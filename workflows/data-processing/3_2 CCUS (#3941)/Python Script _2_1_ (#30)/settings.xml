<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Do pandas inner join%%00010#output_table = input_table_1.join(input_table_2, how='inner', lsuffix=' (left)', rsuffix=' (right)')%%00010# Do pandas inner join%%00010#output_table = input_table_1.join(input_table_2, how='inner', lsuffix=' (left)', rsuffix=' (right)')%%00010import pandas as pd%%00010import numpy as np%%00010%%00010## input%%00010#input_table_2.drop('row ID',axis=1,inplace=True)%%00010output_table=input_table_1.copy()%%00010countries=input_table_1['Country'][0:29].tolist()%%00010#countries=input_table_1['Country'][0:29].to_list()%%00010years=(*range(1990, 2016), *range(2020, 2055, 5))%%00010%%00010##add a new column for the ccs/potential to go to TPE%%00010output_table['ccu_ccus_ccs-potential-occupation[%]']=np.zeros(957)%%00010%%00010## Group by country%%00010group=input_table_1.groupby('Country')%%00010%%00010## for each country, calculate the yearly accumulative ccs[Mt],and compare it with the potential%%00010for pays in countries:%%00010    country=group.get_group(pays)%%00010    total_ccs=country['ccu_ccus_enhanced-oil-recovery[Mt]']+country['ccu_ccus_depleted-oil-gas-reservoirs[Mt]']+\%%00010              country['ccu_ccus_unmineable-coal-seams[Mt]']+country['ccu_ccus_deep-saline-formation[Mt]']%%00010    total_ccs_acc=np.cumsum(total_ccs)*5%%00010    potentials=input_table_2[input_table_2['Country'] == pays].values.tolist()[0]%%00010    potential=potentials[1]%%00010    # calcuate the ccs/potential%%00010    if potential&gt;0:%%00010        ccs_occupation=total_ccs_acc/potential*100%%00010        output_table.loc[ccs_occupation.index.tolist(),'ccu_ccus_ccs-potential-occupation[%]']=ccs_occupation.values%%00010    if potential==0:%%00010    %%00009output_table.loc[total_ccs_acc.index.tolist(),'ccu_ccus_ccs-potential-occupation[%]']=200%%00010    year_index=total_ccs_acc[total_ccs_acc &gt; potential].index.tolist()#denoting all the row indexes of the year  where the potential is supassed.%%00010    if len(year_index)&gt;=1:%%00010        ## let the excessive ccs to be used%%00010        jjj=output_table.loc[year_index,&quot;ccu_ccus_methane-formation[Mt]&quot;]%%00010        output_table.loc[year_index, &quot;ccu_ccus_methane-formation[Mt]&quot;] = jjj +\%%00010        output_table.loc[year_index,&quot;ccu_ccus_enhanced-oil-recovery[Mt]&quot;]+\%%00010        output_table.loc[year_index, &quot;ccu_ccus_depleted-oil-gas-reservoirs[Mt]&quot;] +\%%00010        output_table.loc[year_index, &quot;ccu_ccus_unmineable-coal-seams[Mt]&quot;] +\%%00010        output_table.loc[year_index, &quot;ccu_ccus_deep-saline-formation[Mt]&quot;]%%00010        ## clear the orginal values%%00010        output_table.loc[year_index,&quot;ccu_ccus_enhanced-oil-recovery[Mt]&quot;]=0%%00010        output_table.loc[year_index, &quot;ccu_ccus_depleted-oil-gas-reservoirs[Mt]&quot;]=0%%00010        output_table.loc[year_index, &quot;ccu_ccus_unmineable-coal-seams[Mt]&quot;]=0%%00010        output_table.loc[year_index, &quot;ccu_ccus_deep-saline-formation[Mt]&quot;]=0%%00010        output_table.loc[year_index, &quot;ccu_ccus_ccs-potential-occupation[%]&quot;]=100%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="CCS potential constraint"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1274"/>
<entry key="y-coordinate" type="xint" value="219"/>
<entry key="width" type="xint" value="133"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 957, Cols: 8"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="8b9e5ed3-34c8-4b8a-902c-f2ca33f5bb2d"/>
</config>
</config>
