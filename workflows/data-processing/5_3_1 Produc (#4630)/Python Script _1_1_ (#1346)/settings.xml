<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import numpy as np%%00010import re%%00010%%00010%%00010# yearly electric production data input (from supply mod)%%00010y_eprod = pd.DataFrame()%%00010y_eprod  = input_table%%00010%%00010#filter for future years%%00010df=y_eprod[y_eprod.Years&gt;2015]%%00010df=df.filter(regex='TWh|Years|Country')%%00010%%00010%%00010# drop different VRE columns wind_on, wind_off, PV, and fossil gas and coal%%00010drop_col=['elc_supply_RES_solar_pv[TWh]', 'elc_supply_RES_wind_onshore[TWh]', 'elc_supply_RES_wind_offshore[TWh]','elc_supply_fossil_coal[TWh]', 'elc_supply_fossil_gas[TWh]']%%00010df=df.drop(columns=drop_col)%%00010#print(df.columns)%%00010%%00010Country_l=y_eprod.Country.unique().tolist()%%00010num_of_countries=len(Country_l)%%00010Year_l=[str(year) for year in range(2020,2051,5)]%%00010%%00010# multiple reindex – years as outer index%%00010df.set_index(['Years','Country'], inplace=True, drop=True)%%00010df=df.sort_index()%%00010%%00010# hourly values of must run for normal and leap years%%00010np_hourly_avg_normal=df.sum(axis=1).values/8760.%%00010np_hourly_avg_leap=np_hourly_avg_normal*8760/8784%%00010%%00010# cretaing proper output table columns%%00010end_c=[x+'_'+str(y) for y in Year_l for x in Country_l]%%00010%%00010# creating output table structure%%00010df_hourly_ou_=pd.DataFrame(0, index=np.arange(8784), columns=end_c)%%00010np_hourly_=np.ones((8784,num_of_countries))%%00010np_hourly_sum=np.ones((8784,num_of_countries*7))%%00010%%00010for year in range(2020,2051,5):%%00010%%00009ii=int((year-2020)/5*num_of_countries)%%00010%%00009# leap years%%00010%%00009if year == 2020 or year == 2040:%%00010%%00009%%00009np_hourly_out=np_hourly_*np_hourly_avg_leap[ii:ii+num_of_countries]%%00010%%00009else:%%00010%%00009%%00009np_hourly_out=np_hourly_*np_hourly_avg_normal[ii:ii+num_of_countries]%%00010%%00009%%00009np_hourly_out[-24:,:]=0%%00010%%00009%%00009%%00010%%00009#print(np_hourly_out.shape)%%00010%%00009np_hourly_sum[:,ii:ii+num_of_countries]=np_hourly_out%%00010%%00009#df_hourly_out.iloc[:,ii:ii+num_of_countries]=np_hourly_out%%00010%%00010#print(np_hourly_sum.shape, df_hourly_ou_.info())%%00010df_hourly_out=pd.DataFrame(np_hourly_sum, index=df_hourly_ou_.index, columns=df_hourly_ou_.columns)%%00010#print(df_hourly_out.sum(axis=0))%%00010output_table = df_hourly_out*1000"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calculate hourly must_run%%00013%%00010production curve"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="135"/>
<entry key="y-coordinate" type="xint" value="49"/>
<entry key="width" type="xint" value="144"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
