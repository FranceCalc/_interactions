<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import numpy as np%%00010import re%%00010%%00010%%00010##########x Knime data input######################%%00010# yearly electric production data input (from supply mod)%%00010y_eprod = pd.DataFrame()%%00010y_eprod  = input_table_1%%00010#print(y_eprod.shape)%%00010#%%00010# hourly onshore wind data input (renewables.ninja)%%00010h_ecap = pd.DataFrame()%%00010h_ecap  = input_table_2%%00010h_ecap.set_index('time (date)')%%00010h_ecap=h_ecap.drop(['time (date)'], axis=1)%%00010h_ecap=h_ecap.sort_index(axis=1)%%00010%%00010Country_l=y_eprod.Country.unique().tolist()%%00010num_of_countries=len(Country_l)%%00010Year_l=[str(year) for year in range(2020,2051,5)]%%00010%%00010#filter for future years%%00010df=y_eprod[y_eprod.Years&gt;2015]%%00010%%00010# filter for different VRW columns wind_on, wind_off, PV, or must_tun%%00010df=df.filter(items=['Country', 'Years', 'elc_supply_RES_solar_pv[TWh]'])%%00010#df=df.filter(regex='TWh|Years|Country')%%00010#df=df.filter(like='elc_supply_RES_wind_onshore[TWh]')%%00010%%00010# multiple reindex – years as outer index%%00010df.set_index(['Years','Country'], inplace=True)%%00010df=df.sort_index()%%00010%%00010# convert to numpy array%%00010np_y_eprod=df['elc_supply_RES_solar_pv[TWh]'].values%%00010#print(np_y_eprod.shape)%%00010%%00010# convert hourly data to numpy array%%00010# That is valid only in Spyder with column header excel reading%%00010# h_ecap=h_ecap.drop(['time (date)'], axis=1)%%00010#h_ecap=h_ecap.sort_index(axis=1)%%00010%%00010np_h_ecap=h_ecap.values%%00010#print(1, h_ecap.shape)%%00010%%00010# normalizing hourly capacity factors and adding an additional daily duration %%00010# with zeros for common handling normal and leap years%%00010yearly_sum=np.sum(np_h_ecap, axis=0)%%00010np_h_norm=np.divide(np_h_ecap, yearly_sum)%%00010np_h_norm=np.concatenate((np_h_norm, np.zeros((24,np_h_norm.shape[1]))))%%00010#print(2, np_h_norm.shape)%%00010%%00010# normalizing hourly capacity factors for leap years cap factors for 28 february are duplicated%%00010np_h_ecap_leap=np.concatenate((np_h_ecap[0:1416], np_h_ecap[1392:]))%%00010np_h_norm_leap=np.divide(np_h_ecap_leap, np.sum(np_h_ecap_leap, axis=0))%%00010#print(3, np_h_norm_leap.shape)%%00010%%00010# control calculation if summed hourly product eaual with yearly one%%00010# h_prod=pd.DataFrame(data=np_h_norm)%%00010#                                            # %%00010# print(h_prod())%%00010%%00010# cretaing proper output table columns multiindexing doesn_t work in Knime%%00010#multi_array=[Country_l, Year_l]%%00010#r_index = pd.MultiIndex.from_product(multi_array, names=('Country', 'Year'))%%00010%%00010r_index=[x+'_'+str(y) for y in Year_l for x in Country_l]%%00010%%00010%%00010%%00010# preparing output table structure%%00010# all tables have 366*24=8784 rows%%00010# in case of normal years the last 24 our is fillled with zeros%%00010# in case of leaő years februar 29 is filled with the values of febr 28%%00010%%00010df_hourly_ou_= pd.DataFrame(0, index=np.arange(8784),columns=r_index)%%00010np_hourly_sum=np.ones((8784,num_of_countries*7))%%00010#print(4, df_hourly_out.shape)%%00010%%00010for year in range(2020,2051,5):%%00010    ii=int((year-2020)/5*num_of_countries)%%00010    #print(ii)%%00010    if year == 2020 or year == 2040:%%00010        np_hourly_out=np.multiply(np_h_norm_leap, np_y_eprod[ii:ii+num_of_countries])%%00010    else:%%00010        np_hourly_out=np.multiply(np_h_norm, np_y_eprod[ii:ii+num_of_countries])%%00010%%00009%%00009%%00010    #print(5, np_hourly_out.shape)%%00010    np_hourly_sum[:,ii:ii+num_of_countries]=np_hourly_out%%00010%%00009#df_hourly_out.iloc[:,ii:ii+num_of_countries]=np_hourly_out%%00010%%00010#print(np_hourly_sum.shape, df_hourly_ou_.info())%%00010df_hourly_out=pd.DataFrame(np_hourly_sum, index=df_hourly_ou_.index, columns=df_hourly_ou_.columns)%%00010#print(df_hourly_out.sum(axis=0))%%00010output_table = df_hourly_out*1000"/>
<entry key="rowLimit" type="xint" value="10000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calculate hourly solar_PV%%00013%%00010production curve"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="130"/>
<entry key="y-coordinate" type="xint" value="479"/>
<entry key="width" type="xint" value="141"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 8784, Cols: 203"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="6bb5124a-9704-4af1-ae38-2e0cd5d2e573"/>
</config>
</config>
