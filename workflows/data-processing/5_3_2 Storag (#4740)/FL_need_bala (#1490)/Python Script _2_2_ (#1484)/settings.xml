<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010print('indul')%%00010fl_need=input_table_2.copy()%%00010%%00010%%00010# Set multiple indexes for joining different tables%%00010fl_need.set_index(['Trade_zone', 'Years'], inplace=True)%%00010fl_need=fl_need.sort_index()%%00010%%00010%%00010storages=input_table_1.copy()%%00010storages.set_index(['Trade_zone', 'Years'], inplace=True)%%00010storages.sort_index()%%00010%%00010# Build up storage technology tables%%00010# Different boundaries set by storage lever levels already have been %%00010# reduced from input electricity to their output in the previous node %%00010# (controlled by round_trip parameter) %%00010# Of course used storage capaczÃ³ity also have to convert to their gross%%00010# value to calculate necessary investments, as there are loss capacities %%00010%%00010st_Ptx=storages.loc[:, ['Ptx', 'Rt_Ptx[Percent]' ]].copy()%%00010st_PHS=storages.loc[:, ['PHS', 'Rt_PHS[Percent]' ]].copy()%%00010st_CAES=storages.loc[:, ['CAES', 'Rt_CAES[Percent]' ]].copy()%%00010st_Fly=storages.loc[:, ['Flywheel', 'Rt_Fly[Percent]' ]].copy()%%00010st_Fly.rename(columns={'Flywheel':'Fly', 'Rt_Fly[Percent]':'Rt_Fly[Percent]'}, inplace=True)%%00010st_Bat=storages.loc[:, ['Battery', 'Rt_Bat[Percent]' ]].copy()%%00010st_Bat.rename(columns={'Battery':'Bat', 'Rt_Bat[Percent]':'Rt_Bat[Percent]'}, inplace=True)%%00010%%00010%%00010# Preparing data for setisfying weekly flexibility need %%00010fl_w_calc=pd.concat([fl_need, st_Ptx, st_PHS], axis=1)%%00010fl_w_calc.drop(columns=['Fld_d', 'Fld_s'], inplace=True)%%00010%%00010# Calculating used Ptx to reduce weekly flex need%%00010s1=fl_w_calc['Ptx']%%00010s2=fl_w_calc['Fld_w']%%00010%%00010# Modification of weekly flexibility need as Ptx is an additional (out)%%00010# energy source, so must not calculate with storage lost%%00010# Here can be set a flag if necessary to sign %%00010# that Ptx capacity is greater than the need%%00010%%00010fl_w_calc['Ptx_used']=pd.DataFrame([s1, s2]).min()%%00010fl_w_calc['Fl_w_gap']=fl_w_calc['Fld_w']-fl_w_calc['Ptx_used']%%00010%%00010# Calculating used PHS to reduce weekly flex need%%00010# Set maximum usable PHS storage%%00010s1=fl_w_calc['PHS']%%00010s2=fl_w_calc['Fld_w']*fl_w_calc['Rt_PHS[Percent]']/100%%00010fl_w_calc['PHS_pot']=pd.DataFrame([s1, s2]).min()%%00010%%00010# Cap maximum usable PHS to weekly need%%00010# The remaining gap have to be fill by natural gas%%00010s1=fl_w_calc['PHS_pot']%%00010s2=fl_w_calc['Fl_w_gap']%%00010fl_w_calc['PHS_w_used']=pd.DataFrame([s1, s2]).min()%%00010fl_w_calc['Fl_w_gap']=fl_w_calc['Fl_w_gap']-fl_w_calc['PHS_w_used']%%00010%%00010# Preparing data for setisfying daily flexibility need %%00010fl_d_calc=pd.concat([fl_need, st_PHS, st_CAES], axis=1)%%00010fl_d_calc.drop(columns=['Fld_w', 'Fld_s'], inplace=True)%%00010# Reduce PHS boundary by the amount was used in meeting for %%00010# weekly flexibility need%%00010fl_d_calc['PHS']=fl_d_calc['PHS']-\%%00010fl_w_calc['PHS_w_used']%%00010%%00010# Calculating used PHS to reduce daily flex need%%00010# Set maximum usable PHS storage and substract from need%%00010s1=fl_d_calc['PHS']%%00010s2=fl_d_calc['Fld_d']*fl_d_calc['Rt_PHS[Percent]']/100%%00010fl_d_calc['PHS_d_used']=pd.DataFrame([s1, s2]).min()%%00010fl_d_calc['Fl_d_gap']=fl_d_calc['Fld_d']-fl_d_calc['PHS_d_used']%%00010%%00010# Calculating used CAES to reduce daily flex need%%00010# Set maximum usable CAES storage and substract from need%%00010s1=fl_d_calc['CAES']%%00010s2=fl_d_calc['Fl_d_gap']*fl_d_calc['Rt_CAES[Percent]']/100%%00010fl_d_calc['CAES_d_used']=pd.DataFrame([s1, s2]).min()%%00010fl_d_calc['Fl_d_gap']=fl_d_calc['Fl_d_gap']-fl_d_calc['CAES_d_used']%%00010%%00010# Preparing data for setisfying subdaily flexibility need%%00010# as parallel using of batteries and flywheels%%00010%%00010st_BatFly=st_Bat.copy()%%00010#print(st_Bat.info)%%00010st_BatFly.rename(columns={'Bat':'BatFly', \%%00010'Bat': 'BatFly', 'Rp_Bat[GW]' : 'Rp_BatFly[GW]', \%%00010'Rt_Bat[percent]' : 'Rt_BatFly[Percent]'}, inplace=True)%%00010%%00010#print(st_Bat.info)%%00010%%00010st_BatFly['BatFly']=st_Bat['Bat']+\%%00010st_Fly['Fly']%%00010#print(st_BatFly['BatFly'])%%00010st_BatFly['Rt_BatFly[Percent]']=\%%00010(st_Bat['Rt_Bat[Percent]'].multiply(st_Bat['Bat'])+\%%00010st_Fly['Rt_Fly[Percent]'].multiply(st_Fly['Fly']))/\%%00010st_BatFly['BatFly']%%00010%%00010# preparing data for combined calculation%%00010fl_s_calc=pd.concat([fl_need, st_BatFly], axis=1)%%00010fl_s_calc.drop(columns=['Fld_w', 'Fld_d'], inplace=True)%%00010%%00010# Calculating used Battery and Flywheel to reduce daily flex need%%00010# Set maximum usable Battery and Flywheel storage and substract from need%%00010s1=fl_s_calc['BatFly']%%00010s2=fl_s_calc['Fld_s']*fl_s_calc['Rt_BatFly[Percent]']/100%%00010fl_s_calc['BatFly_used']=pd.DataFrame([s1, s2]).min()%%00010fl_s_calc['Fl_s_gap']=fl_s_calc['Fld_s']-fl_s_calc['BatFly_used']%%00010%%00010%%00010# Calculating specific use of Batteries and Flywheels%%00010fl_s_calc['perc']=fl_s_calc['BatFly_used'].divide(st_BatFly['BatFly'])%%00010fl_s_calc['Fly_s_used']=st_Fly['Fly'].multiply(fl_s_calc['perc'])%%00010fl_s_calc['Bat_s_used']=st_Bat['Bat'].multiply(fl_s_calc['perc'])%%00010%%00010%%00010%%00010# constructing output for all important data%%00010# used storage an natural capacities are recalculated to gross values, %%00010# i.e. stored input electricity as base for investment and cost calculations%%00010%%00010fl_need_meet=fl_need.copy()%%00010fl_need_ctrl=fl_need.copy()%%00010%%00010# weekly flexibility need%%00010fl_need_meet['Ptx_used_g']=fl_w_calc['Ptx_used']/st_Ptx.loc[:,'Rt_Ptx[Percent]'][0]*100%%00010#fl_need_meet['Ptx']=st_Ptx['Ptx']%%00010fl_need_meet['PHS_w_used_g']=fl_w_calc['PHS_w_used']/st_PHS.loc[:,'Rt_PHS[Percent]'][0]*100%%00010#fl_need_meet['PHS']=st_PHS['PHS']%%00010fl_need_meet['NGas_w_used']=fl_w_calc['Fl_w_gap']%%00010%%00010# daily flexibility need%%00010fl_need_meet['PHS_d_used_g']=fl_d_calc['PHS_d_used']/st_PHS.loc[:,'Rt_PHS[Percent]'][0]*100%%00010#fl_need_meet['PHS']=st_PHS['PHS']%%00010fl_need_meet['CAES_used_g']=fl_d_calc['CAES_d_used']/st_CAES.loc[:,'Rt_CAES[Percent]'][0]*100%%00010#fl_need_meet['CAES']=st_CAES['CAES']%%00010fl_need_meet['NGas_d_used']=fl_d_calc['Fl_d_gap']%%00010%%00010#subdaily flexibility need%%00010fl_need_meet['Fly_used_g']=fl_s_calc['Fly_s_used']/st_Fly.loc[:,'Rt_Fly[Percent]'][0]*100%%00010#fl_need_meet['Fly']=st_Fly['Fly']%%00010fl_need_meet['Bat_used_g']=fl_s_calc['Bat_s_used']/st_Bat.loc[:,'Rt_Bat[Percent]'][0]*100%%00010#fl_need_meet['Bat']=st_Bat['Bat']%%00010fl_need_meet['NGas_s_used']=fl_s_calc['Fl_s_gap']%%00010%%00010# Summation storage needs on different timescales%%00010fl_need_meet['PHS_used_g']=fl_need_meet['PHS_w_used_g']+fl_need_meet['PHS_d_used_g']%%00010fl_need_meet['NGas_used']=fl_need_meet['NGas_w_used']+fl_need_meet['NGas_d_used']+\%%00010fl_need_meet['NGas_s_used']%%00010%%00010# Drop unecessary columns%%00010fl_need_meet.drop(columns=['Fld_w', 'Fld_d', 'Fld_s','NGas_w_used', 'NGas_d_used', 'NGas_s_used',\%%00010'PHS_w_used_g', 'PHS_d_used_g'], inplace=True)%%00010%%00010fl_need_meet.reset_index(inplace=True)%%00010%%00010%%00010# Calculations for control, can be drop after check%%00010%%00010fl_need_ctrl['Ptx_used']=fl_w_calc['Ptx_used']%%00010fl_need_ctrl['Ptx']=st_Ptx['Ptx']%%00010fl_need_ctrl['PHS_w_used']=fl_w_calc['PHS_w_used']%%00010fl_need_ctrl['PHS']=st_PHS['PHS']%%00010fl_need_ctrl['NGas_w_used']=fl_w_calc['Fl_w_gap']%%00010%%00010# daily flexibility need%%00010fl_need_ctrl['PHS_d_used']=fl_d_calc['PHS_d_used']%%00010fl_need_ctrl['PHS']=st_PHS['PHS']%%00010fl_need_ctrl['CAES_used']=fl_d_calc['CAES_d_used']%%00010fl_need_ctrl['CAES']=st_CAES['CAES']%%00010fl_need_ctrl['NGas_d_used']=fl_d_calc['Fl_d_gap']%%00010%%00010#subdaily flexibility need%%00010fl_need_ctrl['Fly_used']=fl_s_calc['Fly_s_used']%%00010fl_need_ctrl['Fly']=st_Fly['Fly']%%00010fl_need_ctrl['Bat_used']=fl_s_calc['Bat_s_used']%%00010fl_need_ctrl['Bat']=st_Bat['Bat']%%00010fl_need_ctrl['NGas_s_used']=fl_s_calc['Fl_s_gap']%%00010%%00010fl_need_ctrl.reset_index(inplace=True)%%00010%%00010#print(st_Ptx.columns)%%00010output_table_2 = fl_need_meet%%00010output_table_1 = fl_need_ctrl%%00010#print('ready')%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Satisfying flexibility needs from by %%00013%%00010Ptx, diferent storage technologies and %%00013%%00010Natural gas in trading zone level"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="217"/>
<entry key="y-coordinate" type="xint" value="239"/>
<entry key="width" type="xint" value="209"/>
<entry key="height" type="xint" value="45"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in2out.Python2Script2In2OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2â2)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2â2)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 63, Cols: 19"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 63, Cols: 8"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="d8e176c9-f358-4218-b5c7-1a6b25d1be53"/>
</config>
</config>
