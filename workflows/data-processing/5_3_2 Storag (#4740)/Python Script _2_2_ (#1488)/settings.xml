<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010%%00010sd_gap_cprod = input_table_1.copy()%%00010other_trz = input_table_2.copy()%%00010Ptx_percent=0.05%%00010%%00010def Ptx_cap(series, max_val):%%00010%%00009if series.sum()&gt;0:%%00010%%00009%%00009series=series*(max_val/series.sum())%%00010%%00009return series%%00010%%00010# Selecting Ptx related data%%00010st_Ptx_level = other_trz.loc[:, ['Trade_zone', 'Years', 'Ptx']]%%00010st_Ptx_level_Years = st_Ptx_level.groupby('Years')['Ptx'].first()%%00010%%00010Ptx_prod=pd.DataFrame(0.0, index=st_Ptx_level.Years.unique(), columns=['Ptx_produce[TWh]'])%%00010%%00010# scaling down country level Ptx production to Ptx lever level cboundary%%00010# i.e. the estimated future capacity of produce%%00010# In case of excess production, when production is greater than the boundary%%00010# a worning is given %%00010%%00010splitting=sd_gap_cprod.groupby('Years')%%00010%%00010for group_name, group in splitting:%%00010%%00010%%00009max_val=st_Ptx_level_Years.loc[group_name]%%00010%%00009if  sd_gap_cprod.loc[group.index, 'Ptx_produce[TWh]'].sum() &gt; max_val:%%00010%%00009%%00009sd_gap_cprod.loc[group.index, 'Exc_flag']=1%%00010%%00009%%00009sd_gap_cprod.loc[group.index, 'Ptx_produce[TWh]'] = \%%00010%%00009%%00009Ptx_cap(group['Ptx_produce[TWh]'], max_val).values%%00010%%00010%%00009# print(group_name, type(sd_gap_cprod.loc[group.index, 'Ptx_produce[TWh]'].sum()))%%00010%%00009Ptx_prod.loc[group_name, 'Ptx_produce[TWh]']=\%%00010%%00009sd_gap_cprod.loc[group.index, 'Ptx_produce[TWh]'].sum()*Ptx_percent%%00010%%00009%%00010#print(Ptx_prod.info(), sd_gap_cprod.info())%%00010%%00010output_table_1 = sd_gap_cprod%%00010output_table_2 = Ptx_prod%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Ptx_capacity %%00013%%00010to lever%%00013%%00010"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="2848"/>
<entry key="y-coordinate" type="xint" value="-441"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="45"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in2out.Python2Script2In2OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒2)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒2)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 203, Cols: 22"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 7, Cols: 1"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="780e8297-a62f-42a6-8e57-204da6e207f8"/>
</config>
</config>
