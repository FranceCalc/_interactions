<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Do pandas inner join%%00010sd_ngas=input_table_2%%00010tech_dat=input_table_1%%00010%%00010%%00010import pandas as pd%%00010import numpy as np%%00010%%00010# tech data - fuel consumption, CO2 emission%%00010tech_dat=pd.DataFrame()%%00010tech_dat=input_table_1%%00010#tech_dat.sort_values(by=['Years', 'Country'], inplace=True)%%00010%%00010# nominal capacity and production data%%00010sd_gap_prod=pd.DataFrame()%%00010sd_gap_prod=input_table_2%%00010%%00010################ Calculating fuel compsumption and CO2 emissinon%%00010# fitting rows of efficiency and production data (for the same country and year)%%00010tech_dat.set_index(['Years','Country'], drop=False, inplace=True)%%00010tech_dat.sort_index()%%00010# fitting rows of efficiency and production data (for the same country and year)%%00010sd_gap_prod.set_index(['Years','Country'], drop=False, inplace=True)%%00010sd_gap_prod.sort_index()%%00010%%00010# Prepare natural gas effectivity data for multiplication%%00010# Original power plants are calculated with the 2015 effectivity value%%00010Eff_2015=tech_dat.loc['2015']['tec_efficiency_fossil_gas[%]'].values%%00010# Avoid division by zero in case of Switzerland%%00010Eff_2015 = np.where(Eff_2015==0, 0.335, Eff_2015)%%00010%%00010# Fuel_consumption for old powers%%00010# Initialization and fitting data on country and year%%00010# efficiency data for 2015 have to be repeat for the whole time scale%%00010# for old power plants%%00010sd_ngas.loc[:,'Nat_gas_fuel_consumption_old[TWh]']=0%%00010Eff_array_old_=np.broadcast_to(Eff_2015, (7, len(Eff_2015)))%%00010Eff_array_old=Eff_array_old_.flatten()%%00010#print(len(Eff_array_old))%%00010# For check the pattern%%00010sd_ngas.loc[:, 'check_old_gas_eff']=Eff_array_old%%00010#print(sd_ngas.loc[:,'Nat_gas_gross_old_powers[TWh]'])%%00010%%00010#  Fuel_consumption for old powers based on efficiancy in 2015%%00010fc_op=np.array(sd_ngas.loc[:,'Nat_gas_gross_old_powers[TWh]'])%%00010ng_fs=np.divide(fc_op, Eff_array_old)%%00010sd_ngas.loc[:,'Nat_gas_fuel_consumption_old[TWh]']=ng_fs%%00010%%00010# Fuel_consumption for new powers based on 51% efficiancy (flex_need) and tec eff values (yearly)%%00010fl_need_eff_rate=sd_ngas.loc[:,'NGas_used'].values/sd_ngas.loc[:,'Nat_gas_prod_inc[TWh]'].values%%00010Eff_new_pp=tech_dat.loc['2020': '2050']['tec_efficiency_fossil_gas[%]'].values*(1-fl_need_eff_rate)+\%%00010fl_need_eff_rate*0.51%%00010sd_ngas.loc[:,'Nat_gas_fuel_consumption_new[TWh]']=\%%00010sd_ngas.loc[:,'Nat_gas_gross_effective_powers[TWh]']/Eff_new_pp%%00010%%00010# CO2 emission increase natural gas%%00010CO2_ef=tech_dat.loc[('2015', 'Austria'), 'tec_emission-factor_CO2_gas[g/kWh]']%%00010sd_ngas.loc[:,'Nat_gas_CO2_emission_old[kt]']=sd_ngas.loc[:,'Nat_gas_fuel_consumption_old[TWh]']*CO2_ef%%00010sd_ngas.loc[:,'Nat_gas_CO2_emission_new[kt]']=sd_ngas.loc[:,'Nat_gas_fuel_consumption_new[TWh]']*CO2_ef%%00010%%00010%%00010# Fuel comsumption decrease coal%%00010# because of the variable effectivity decrease is calculated by %%00010# the average of yearly power plant mix%%00010%%00010# another issue is to avoid division by zero%%00010ind_coal=sd_ngas.loc[:,'Fossil_coal_reduce[TWh]']&gt;0%%00010Coal_sum_consumption=tech_dat.loc['2020':'2050']['coal_sum_cons[TWh]']%%00010%%00010#print(Coal_sum_consumption)%%00010#print(tech_dat.loc[ind_coal,'coal_sum_cons[TWh]'])%%00010%%00010# Calculation decrease of coal fuel consumption, based on ratio of production reduce %%00010# to input prduction and total fuel consumption of original produce%%00010sd_ngas.loc[ind_coal,'coal_fuel_consumption_decr[TWh]']=-1*\%%00010Coal_sum_consumption[ind_coal]*\%%00010sd_ngas.loc[ind_coal,'Fossil_coal_reduce[TWh]']/\%%00010sd_ngas.loc[ind_coal,'elc_supply_fossil_coal[TWh]']%%00010%%00010# CO2 emission decrease of reduced coal based emission%%00010CO2_ef=tech_dat.loc[('2015', 'Austria'), 'tec_emission-factor_CO2_coal[g/kWh]']%%00010sd_ngas.loc[:,'Coal_CO2_emission_decr[kt]']=sd_ngas.loc[:,'coal_fuel_consumption_decr[TWh]']*CO2_ef%%00010%%00010#sd_ngas['eff_rate']=fl_need_eff_rate%%00010#sd_ngas['eff_val']=Eff_new_pp%%00010%%00010sd_ngas.fillna(0, inplace=True)%%00010output_table=sd_ngas"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calculate fuel consumption%%00013%%00010CO2 emission"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="646"/>
<entry key="y-coordinate" type="xint" value="259"/>
<entry key="width" type="xint" value="150"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
