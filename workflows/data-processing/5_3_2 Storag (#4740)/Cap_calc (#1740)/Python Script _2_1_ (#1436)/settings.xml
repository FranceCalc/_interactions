<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import pandas as pd%%00010import numpy as np%%00010%%00010# Self consumption of CCS %%00010%%00010sc_CCS = 0.768%%00010%%00010tech_dat_a=pd.DataFrame()%%00010tech_dat_a=input_table_1.copy()%%00010tech_dat_a.set_index(['Years', 'Country'], inplace=True)%%00010tech_dat = tech_dat_a.loc['2020':'2050', :]%%00010tech_dat.reset_index(drop=True, inplace=True)%%00010#print(tech_dat.index)%%00010%%00010sd_gap_cprod=input_table_2.copy()%%00010sd_gap_cprod.sort_values(by=['Years', 'Country'], inplace=True)%%00010sd_gap_cprod.reset_index(drop=True, inplace=True)%%00010#print(sd_gap_cprod.index)%%00010%%00010%%00010# function for calculation for yearly investments taking into account the%%00010# 30 years lifespan for natural gas power plants the series is the input of%%00010# necessary production of the period %%00010def y_invest(series):%%00010%%00009# calculation envelope of investment - i.e. it is not permitted to reduce %%00010%%00009# the invested capacity till the end of it lifespan%%00010%%00009# Inicialization max, first and last element of new investments%%00010    maxinv=0%%00010    inv_max=series.max()%%00010    inv_first=series.iloc[0]%%00010    inv_last=series.iloc[-1]%%00010    # initialization dictionary to stora data%%00010    ld=dict()%%00010    for i, e in series.iteritems():%%00010        c=max(e-maxinv,0)%%00010        maxinv=max(maxinv, e)%%00010        ld[i]=c%%00010%%00010    # resulted time series with the yearly investments%%00010    series_r=pd.Series(ld)%%00010    %%00010    # taking into account decomissioning -  in the last period (after 30 years) the first%%00010    # period's investment have to be decomissioned, and the remaining production have to %%00010    # provide necessary product%%00010    series_r.iloc[-1]=series_r.iloc[-1]+max(inv_last-inv_max+inv_first,0)%%00010    return series_r%%00010%%00010# Summation of newly invested production to calculate nominal capacities %%00010def y_sum(series):%%00010    sum=0%%00010    ld=dict()%%00010    for i, e in series.iteritems():%%00010        sum=sum+e%%00010        ld[i]=sum%%00010    return pd.Series(ld)%%00010    %%00010# assignment of power plan out%%00010def power_out(series):   %%00010    series2=pd.Series(0, series.index)%%00010    series2.iloc[-1]=-1*series.iloc[0]%%00010    return series2%%00010%%00010######################################################################################%%00010#### distinguish flexibilty need and yearly balance on gas prod for CHP generation calc%%00010sd_gap_cprod['Ngas_yearly']=sd_gap_cprod['Nat_gas_prod_inc[TWh]']%%00010sd_gap_cprod['Nat_gas_prod_inc[TWh]']=sd_gap_cprod['Ngas_yearly']+\%%00010sd_gap_cprod['NGas_used']%%00010sd_gap_cprod['Ngas_flex']=sd_gap_cprod['NGas_used']%%00010%%00010# share of flex/other for CO2 emission divison for CHG%%00010sd_gap_cprod['CHP_pot_share']=\%%00010(sd_gap_cprod['Ngas_yearly']+sd_gap_cprod['elc_supply_fossil_gas[TWh]'])/ \%%00010(sd_gap_cprod['Ngas_flex']+sd_gap_cprod['Ngas_yearly']+sd_gap_cprod['elc_supply_fossil_gas[TWh]'])%%00010%%00010%%00010# coal reduction percent for CHP calculation%%00010sd_gap_cprod['supply_coal_reduce_rate[%]'] = \%%00010sd_gap_cprod['Fossil_coal_reduce[TWh]']/\%%00010sd_gap_cprod['elc_supply_fossil_coal[TWh]']%%00010%%00010sd_gap_cprod.fillna(0, inplace=True)%%00010%%00010%%00010##########################################################################################%%00010%%00010#nat gas and coal production self consumptions%%00010#self_c_natg=0.02%%00010#self_c_coal=0.09%%00010#print(tech_dat.head())%%00010self_c_ngas=tech_dat.loc[:,'tec_self-consumption_gas[%]'][0]%%00010self_c_coal=tech_dat.loc[:,'tec_self-consumption_coal[%]'][0]%%00010%%00010# determination of CCUS ratio as pandas series (lever dependdent values)%%00010CCS_ratio_y_c = tech_dat.loc[:,'elc_ccs_ratio[percentage]']%%00010#[percentage]%%00010# preparation for pathway explorer calculculation%%00010sd_ngas=sd_gap_cprod.copy(deep=True)%%00010%%00010# addition self consumption and electricity need for CCS %%00010# to net value of production reducement %%00010# this will be the base of calculations for reducing %%00010# the fuel consumption and CO2 emission%%00010%%00010# reduce of self consumption and CCS%%00010re_series = (1-self_c_coal)*(1-CCS_ratio_y_c)+(1-self_c_coal)*sc_CCS* CCS_ratio_y_c%%00010#print('itt',re_series)%%00010sd_ngas.loc[:,'Fossil_coal_reduce_gross[TWh]']=\%%00010sd_ngas.loc[:,'Fossil_coal_reduce[TWh]'].divide(re_series)%%00010proba=sd_ngas.loc[:,'Fossil_coal_reduce_gross[TWh]']%%00010%%00010# addition self consumption and CCS to net value of natural gas production increase%%00010# this will be the base of calculations for increase of fuel consumption and CO2 emission%%00010re_series_ng = (1-self_c_ngas)*(1-CCS_ratio_y_c)+(1-self_c_ngas)*sc_CCS* CCS_ratio_y_c%%00010sd_ngas['Nat_gas_gross_prod_inc[TWh]']=\%%00010sd_ngas['Nat_gas_prod_inc[TWh]'].divide(re_series_ng)%%00010%%00010%%00010# Modify generation value for 85% capacity from gross to net%%00010sd_ngas['elc_fossil_gas_gen_85p[TWh]']=\%%00010sd_ngas['elc_fossil_gas_gen_85p[TWh]'].multiply(re_series_ng)%%00010%%00010%%00010#Calculation of gross demands can be produces by original power plants%%00010s1=sd_ngas['elc_fossil_gas_gen_85p[TWh]']\%%00010-sd_ngas['elc_supply_fossil_gas[TWh]'].multiply(re_series_ng)%%00010%%00010s2=sd_ngas['Nat_gas_gross_prod_inc[TWh]']%%00010%%00010# select minimum%%00010sd_ngas['Nat_gas_gross_old_powers[TWh]']=pd.DataFrame([s1,s2]).min()%%00010%%00010# calculating net production increase by old powers doesn't need for further calc%%00010#sd_ngas['Nat_gas_net_old_powers[TWh]']=\%%00010#sd_ngas['Nat_gas_gross_old_powers[TWh]'].divide(re_series_ng)%%00010%%00010# Calculation of demands, cannot be produced by original power plants%%00010# without conditional loop for fastening the code%%00010sd_ngas['Nat_gas_gross_invest[TWh]']=sd_ngas['Nat_gas_gross_prod_inc[TWh]']-\%%00010sd_ngas['elc_fossil_gas_gen_85p[TWh]']\%%00010+sd_ngas['elc_supply_fossil_gas[TWh]'].multiply(re_series_ng)%%00010%%00010# clip to zero if negative%%00010sd_ngas['Nat_gas_gross_invest[TWh]'].clip(lower=0, inplace=True)%%00010%%00010# all gross elc production by new power plants%%00010sd_ngas['Nat_gas_gross_effective_powers[TWh]']=sd_ngas['Nat_gas_gross_invest[TWh]']%%00010%%00010# calculating net production increase by old powers doesn't need for further calc%%00010#sd_ngas['Nat_gas_net_effective_powers[TWh]']=\%%00010#sd_ngas['Nat_gas_gross_effective_powers[TWh]'].divide(re_series_ng)%%00010%%00010# Power out from production after 30 years %%00010sd_ngas['Nat_gas_out[TWh]']=sd_ngas.groupby('Country')['Nat_gas_gross_invest[TWh]'].apply(power_out)%%00010%%00010# New yearly investments from independent yearly demands %%00010sd_ngas['Nat_gas_gross_invest[TWh]']=sd_ngas.groupby('Country')['Nat_gas_gross_invest[TWh]'].apply(y_invest)%%00010%%00010# Yearly summaried investments from yearly investments %%00010sd_ngas['Nat_gas_gross_sum_invest[TWh]']=sd_ngas.groupby(['Country'])['Nat_gas_gross_invest[TWh]'].apply(y_sum)%%00010%%00010#################################################################################################%%00010### Share of rema and exist generation%%00010%%00010sd_ngas['rema_increase[TWh]']=sd_ngas['Nat_gas_gross_old_powers[TWh]']/ \%%00010(sd_ngas['Nat_gas_gross_old_powers[TWh]']+sd_ngas['Nat_gas_gross_effective_powers[TWh]'])* \%%00010sd_gap_cprod['Nat_gas_prod_inc[TWh]']%%00010%%00010sd_ngas['exist_increase[TWh]']=sd_gap_cprod['Nat_gas_prod_inc[TWh]']- \%%00010sd_ngas['rema_increase[TWh]']%%00010%%00010#################################################################################################%%00010%%00010## Calculation of new power plant product (with better efficiency)%%00010#sd_ngas['Nat_gas_gross_effective_powers[TWh]']=\%%00010#sd_ngas['Nat_gas_gross_effective_powers[TWh]']-\%%00010#sd_ngas['Nat_gas_gross_invest[TWh]']%%00010%%00010# Calculation of new investments' nominal power for Opex calculation%%00010sd_ngas['Nat_gas_gross_sum_invest_power[GW]']=((sd_ngas['Nat_gas_gross_sum_invest[TWh]']+\%%00010sd_ngas['Nat_gas_out[TWh]']))/(0.85*8.766)%%00010%%00010# Calculation of new investments for Capex calculation%%00010sd_ngas['Nat_gas_gross_invest_power[GW]']=sd_ngas['Nat_gas_gross_invest[TWh]']/(0.85*8.766)%%00010%%00010## Calculation of capacity_factors just for check%%00010# Don't calculate if there is no any natural gas capacity %%00010# to avoid division by zero%%00010nom_cap_nonz=sd_ngas['Nat_gas_gross_sum_invest[TWh]']\%%00010+sd_ngas['elc_fossil_gas_gen_85p[TWh]']%%00010ind_nonz=nom_cap_nonz[nom_cap_nonz&gt;0].index%%00010#print(re_series_ng[ind_nonz])%%00010%%00010%%00010cap_fac=0.85*\%%00010(sd_ngas.loc[ind_nonz, 'elc_supply_fossil_gas[TWh]'].multiply(re_series_ng[ind_nonz]).values+\%%00010sd_ngas.loc[ind_nonz,'Nat_gas_gross_old_powers[TWh]'].values+\%%00010sd_ngas.loc[ind_nonz,'Nat_gas_gross_effective_powers[TWh]'].values)/\%%00010(sd_ngas.loc[ind_nonz,'Nat_gas_gross_sum_invest[TWh]'].values+\%%00010sd_ngas.loc[ind_nonz,'elc_fossil_gas_gen_85p[TWh]'].values)%%00010%%00010#cap_fac2=\%%00010#(sd_ngas.loc[ind_nonz, 'elc_supply_fossil_gas[TWh]'].values+\%%00010# sd_ngas.loc[ind_nonz,'Nat_gas_prod_old_powers[TWh]'].values+\%%00010#sd_ngas.loc[ind_nonz,'Nat_gas_prod_effective_powers[TWh]'].values+\%%00010#sd_ngas.loc[ind_nonz,'Nat_gas_invest[TWh]'])/\%%00010#((sd_ngas.loc[ind_nonz,'Nat_gas_invest_sum_power[GW]'].values+\%%00010# sd_ngas.loc[ind_nonz,'elc_fossil_gas_power[GW]'].values)*8.766)%%00010%%00010%%00010sd_ngas.loc[ind_nonz,'Nat_gas_cap_fact']=cap_fac%%00010#sd_ngas.loc[ind_nonz,'Nat_gas_cap_fact_check']=cap_fac2%%00010%%00010ind_invest=sd_ngas[sd_ngas['Nat_gas_gross_invest[TWh]']&gt;0].index%%00010sd_ngas.loc[ind_invest,'Ref_year']=sd_ngas.loc[ind_invest,'Years'].astype(int, inplace=True)+30%%00010#sd_ngas.loc[5,'Ref_year'].astype(str, inplace=True)%%00010#sd_ngas.loc[ind_invest,['Ref_year']].astype(str)%%00010%%00010aa=pd.DataFrame%%00010#bb=pd.DataFrame%%00010%%00010aa=sd_ngas.groupby(['Trade_zone', 'Years']).sum()%%00010#aa['result_gap']=sd_ngas.groupby(['Trade_zone', 'Years'])['result_gap[TWh]'].mean()%%00010#%%00010#bb=aa.loc[:, ['Nat_gas_prod_inc[TWh]', 'Nat_gas_invest[TWh]',\%%00010#          'Nat_gas_prod_effective_powers[TWh]', 'Nat_gas_prod_old_powers[TWh]',\%%00010#          'Fossil_coal_reduce[TWh]']]%%00010#bb.loc[:,'Nat_gas_prod_inc[TWh]']=bb.loc[:,'Nat_gas_prod_inc[TWh]']*-1%%00010#bb.sum(axis=1)%%00010sd_ngas.sort_values(by=['Years','Country'])%%00010sd_ngas.set_index(['Years','Country'], drop=False, inplace=True)%%00010sd_ngas.sort_index()%%00010%%00010output_table=sd_ngas"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calculation of necessary new investments, %%00013%%00010coal production reduction%%00013%%00010self consumption"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="463"/>
<entry key="y-coordinate" type="xint" value="299"/>
<entry key="width" type="xint" value="237"/>
<entry key="height" type="xint" value="45"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
