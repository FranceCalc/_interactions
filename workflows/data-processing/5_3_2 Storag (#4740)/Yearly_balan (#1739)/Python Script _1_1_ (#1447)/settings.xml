<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import pandas as pd%%00010%%00010sd_gap_c = pd.DataFrame()%%00010sd_gap_c=input_table.copy()%%00010%%00010sd_gap_ceq=sd_gap_c.copy(deep=True)%%00010sd_gap_ceq['Exc_flag']=0%%00010sd_gap_ceq['Fossil_coal_reduce[TWh]']=0.0%%00010sd_gap_ceq['Ptx_produce[TWh]']=0.0%%00010sd_gap_ceq['Nat_gas_prod_inc[TWh]']=0.0%%00010%%00010sd_gr_obj=sd_gap_ceq.groupby(['Trade_zone', 'Years'])%%00010## gap in trade zones%%00010sd_gap_ceq_exc=sd_gr_obj.filter(lambda g: g['result_gap[TWh]'].mean()&lt;=0)%%00010sd_gap_ceq_def=sd_gr_obj.filter(lambda g: g['result_gap[TWh]'].mean()&gt;0)%%00010%%00010splitting = sd_gap_ceq_exc.groupby(['Trade_zone', 'Years'])%%00010%%00010# distribution of coal capacity trade zone excess to countries proportional with their gap%%00010for group_name, group in splitting:%%00010    group_coal_prod=group['elc_supply_fossil_coal[TWh]'].sum()*-1%%00010    # excess exceed elc_coal production (caution!!! gap and coal prod are negative values)%%00010    if group['result_gap[TWh]'].mean()&lt;group_coal_prod:%%00010        #print(group.index)%%00010        # sd_gap_ceq_exc.loc[group.index,'Exc_flag']=1%%00010        sd_gap_ceq_exc.loc[group.index,'Fossil_coal_reduce[TWh]']=\%%00010        sd_gap_ceq_exc.loc[group.index,'elc_supply_fossil_coal[TWh]']%%00010        # coal production reduce foe the trade zone%%00010        coal_red_sum=sd_gap_ceq_exc.loc[group.index,'Fossil_coal_reduce[TWh]'].sum()%%00010        # remaining exceed can be used to produce H2%%00010        group_c_exc_index=group.loc[:,'gap[TWh]']&lt;0%%00010        #print('itt', group_c_exc_index, 'meg',  group['result_gap[TWh]'], group.loc[group_c_exc_index, 'gap[TWh]'])%%00010        #print(group.loc[group_c_exc_index, 'gap[TWh]'].sum(), group['result_gap[TWh]'].mean(), coal_red_sum)%%00010        group_c_Ptx =\%%00010        group.loc[group_c_exc_index, 'gap[TWh]']/group.loc[group_c_exc_index, 'gap[TWh]'].sum()*\%%00010        (group['result_gap[TWh]'].mean()+coal_red_sum)%%00010        %%00010        sd_gap_ceq_exc.loc[group.index, 'Ptx_produce[TWh]']=\%%00010        -1*group_c_Ptx%%00010%%00010    # elc_coal production exceed excess - distribution of reduce to countries%%00010    else:%%00010        group_ratio=-1*group.loc[group.index,'elc_supply_fossil_coal[TWh]']\%%00010        /group.loc[group.index,'elc_supply_fossil_coal[TWh]'].sum()*\%%00010        group['result_gap[TWh]'].mean()%%00010        %%00010        sd_gap_ceq_exc.loc[group.index,'Fossil_coal_reduce[TWh]']=\%%00010        group_ratio%%00010%%00010# distribution of trade zone gap to countries proportional with their gap      %%00010splitting = sd_gap_ceq_def.groupby(['Trade_zone', 'Years'])%%00010%%00010for group_name, group in splitting:%%00010    group_c_def=group.loc[:,'gap[TWh]']&gt;0%%00010    group_c_ratio=group.loc[group_c_def, 'gap[TWh]']\%%00010    /group.loc[group_c_def, 'gap[TWh]'].sum()\%%00010    *group['result_gap[TWh]'].mean()%%00010    sd_gap_ceq_def.loc[group.index,'Nat_gas_prod_inc[TWh]']=\%%00010        group_c_ratio%%00010%%00010%%00010#print(sd_gap_ceq_def.head())%%00010#print(sd_gap_ceq_exc.head())%%00010sd_gap_cprod=pd.concat([sd_gap_ceq_def, sd_gap_ceq_exc]).fillna(0)%%00010output_table = sd_gap_cprod"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Balance%%00013%%00010calc. for countries"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="2107"/>
<entry key="y-coordinate" type="xint" value="279"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 203, Cols: 21"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="4c63efd4-fead-4182-8668-29f6db9396b3"/>
</config>
</config>
