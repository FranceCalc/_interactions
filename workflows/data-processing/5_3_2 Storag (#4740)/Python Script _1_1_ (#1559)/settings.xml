<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import numpy as np%%00010%%00010ind_calc=[1,2,3,4,5,6,7]%%00010emiss_ccs = input_table%%00010emiss_ccs.set_index(['Country', 'Years'], inplace=True)%%00010%%00010%%00010def CCS_inv(ser, ind_calc):%%00010%%00010%%00010%%00009# Yearly ccs technology for the period 2020:2050%%00010%%00009ser_ind=ser.index%%00010%%00009a=pd.Series(ser.values, index=ind_calc)%%00010%%00010%%00009# inserting initial ccs capacity%%00010%%00009a[0]=0%%00010%%00009a.sort_index(inplace=True)%%00010%%00010%%00009# initialize capacity need for the whoole period neglecting the lifetime of%%00010%%00009# given storage technology%%00010%%00009nom_capacity = pd.Series(0.0, a.index)%%00010%%00010%%00009# set capacity need for the whole pwriod%%00010%%00009for i, e in a.iteritems():%%00010%%00009%%00009%%00010%%00009%%00009#print('i', i, max(a[:i+1]))%%00010%%00009%%00009nom_capacity[i] = max(a[:i+1])%%00010%%00009%%00009#print(i, 'b[i]', b[i])%%00010%%00009%%00009%%00010%%00009# yearly investment need or the whoole period neglecting the lifetime of%%00010%%00009# given storage technology%%00010%%00009inv_new= nom_capacity.diff()[1:]%%00010%%00009#print(inv_new, nom_capacity)%%00010%%00009# output of new investments and working nominal capacity%%00010%%00009ccs_invest=pd.DataFrame([inv_new])%%00010%%00010%%00009return ccs_invest%%00010%%00010splitting = emiss_ccs.groupby('Country')%%00010%%00010for group_name, group in splitting:%%00010%%00009%%00010%%00010%%00009emiss_ccs.loc[group.index, 'elc_ccs_old[t]'] =%%00009\%%00010%%00009np.transpose(CCS_inv(group['elc_ccs_old[t]'], ind_calc).values)%%00010%%00009emiss_ccs.loc[group.index, 'elc_ccs_new[t]'] =%%00009\%%00010%%00009np.transpose(CCS_inv(group['elc_ccs_new[t]'], ind_calc).values)%%00010%%00010emiss_ccs.reset_index(drop=False, inplace=True)%%00010output_table=emiss_ccs%%00010"/>
<entry key="rowLimit" type="xint" value="10000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Calc%%00013%%00010ccs investments"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="8108"/>
<entry key="y-coordinate" type="xint" value="1259"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 203, Cols: 5"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="cc194a0f-2de9-48e6-958c-ab761f18f9bd"/>
</config>
</config>
