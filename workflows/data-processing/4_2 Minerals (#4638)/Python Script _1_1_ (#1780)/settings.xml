<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="# Copy input to output%%00010import pandas as pd%%00010import numpy as np%%00010%%00010df = input_table.copy()%%00010%%00010def cum_series(ll):%%00010    ll2 = [ll[0]]%%00010    for i in range(1,len(ll[:])):%%00010        ll2.append(ll2[i-1] + ll[i])%%00010    return ll2%%00010%%00010def count_values_in_range(series, range_min, range_max):%%00010%%00010    # &quot;between&quot; returns a boolean Series equivalent to left &lt;= series &lt;= right.%%00010    # NA values will be treated as False.%%00010    return series.between(left=range_min, right=range_max).sum()%%00010%%00010xy = [i[12:-4] for i in df.columns if i[:11] == 'min_reserve']%%00010xz = np.concatenate([df.columns,['min_relative_reserves_left_' + s + '[%]' for s in xy]])%%00010df = df.reindex(columns = xz)%%00010x = int(df.shape[1]*(2/3) + 1)%%00010y = int(df.shape[1]*(1/3) + 1)%%00010for i,j in zip(df.columns[x:],df.columns[1:y]):%%00010    df[i] = df[j]%%00010df2 = df[df['Years']&gt;='2015']%%00010df3 = pd.DataFrame()%%00010df3['Years'] = df2.Years%%00010for i,k in zip(df2.columns[x:],df2.columns[y:x]):%%00010    f = df2[i].values[0]%%00010    h = 5*df2[k][1:].values%%00010    h2 = cum_series(h)%%00010    g = f - h2%%00010    g2 = np.concatenate([np.array([f]),g])%%00010    df3[i] = g2%%00010df3 = df3.reset_index()%%00010len_df = len(df3)%%00010col = df3.columns[2:]%%00010col2 = np.array([df3['Years'][len_df - 1],df3['index'][len_df - 1]])%%00010lol = df3[col].loc[len_df-1].values/df3[col].loc[0].values - 1%%00010lol = np.asfarray(lol,float)%%00010df4 = df3[col]%%00010df4.loc[len_df] = lol*-100%%00010df4['min_mineral_warning'] = df4[len_df:].apply(func=lambda row: count_values_in_range(row, 100, 300), axis=1)%%00010%%00010if df4['min_mineral_warning'][len_df] == 0:%%00010    df4['min_mineral_warning'][len_df] = 0%%00010elif df4['min_mineral_warning'][len_df] == 1:%%00010    df4['min_mineral_warning'][len_df] = 1%%00010elif df4['min_mineral_warning'][len_df] &gt;= 2:%%00010    df4['min_mineral_warning'][len_df] = 2%%00010df4 = df4[df4['min_mineral_warning'] == df4['min_mineral_warning'][len_df]]%%00010df4['Country'] = 'Europe'%%00010df4['Years'] = df3['Years'][len_df-1]%%00010%%00010output_table = df4"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Relative Reserves%%00013%%00010Minerals"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="9247"/>
<entry key="y-coordinate" type="xint" value="339"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 1, Cols: 13"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="2d7511fe-f3a8-4dcc-a10f-f47307970279"/>
</config>
</config>
