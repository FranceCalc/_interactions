<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010input_table.Years = pd.to_numeric(input_table.Years)%%00010df = input_table.set_index(['Years'])%%00010mode_tech_list = ['HDVL_ICE-diesel',%%00010                  'HDVL_ICE-gasoline',%%00010                  'HDVL_ICE-gas',%%00010                  'HDVL_PHEV-gasoline',%%00010                  'HDVL_PHEV-diesel',%%00010                  'HDVL_BEV',%%00010                  'HDVL_CEV',%%00010                  'HDVL_FCEV',%%00010                  'HDVM_ICE-diesel',%%00010                  'HDVM_ICE-gasoline',%%00010                  'HDVM_ICE-gas',%%00010                  'HDVM_PHEV-gasoline',%%00010                  'HDVM_PHEV-diesel',%%00010                  'HDVM_BEV',%%00010                  'HDVM_CEV',%%00010                  'HDVM_FCEV',%%00010                  'HDVH_ICE-diesel',%%00010                  'HDVH_ICE-gasoline',%%00010                  'HDVH_ICE-gas',%%00010                  'HDVH_PHEV-gasoline',%%00010                  'HDVH_PHEV-diesel',%%00010                  'HDVH_BEV',%%00010                  'HDVH_CEV',%%00010                  'HDVH_FCEV',%%00010                  'rail_CEV',%%00010                  'rail_ICE-diesel',%%00010                  'aviation_BEV',%%00010                  'aviation_ICE',%%00010                  'IWW_BEV',%%00010                  'IWW_ICE',%%00010                  'marine_BEV',%%00010                  'marine_ICE']%%00010%%00010mode_tech_agg_list = [&quot;rail&quot;,%%00010                      &quot;IWW&quot;,%%00010                      &quot;marine&quot;,%%00010                      &quot;aviation&quot;,%%00010                      &quot;HDV&quot;]%%00010%%00010%%00010sensitivity = 0.0001%%00010%%00010remaining_vehicles = sorted([&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list])%%00010technology_share_fleet = sorted([&quot;tra_freight_technology-share_fleet_&quot; + j + &quot;[%]&quot; for j in mode_tech_list])%%00010new_vehicles = sorted([&quot;tra_freight_new-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list])%%00010vehicle_fleet = sorted([&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list])%%00010vehicle_lifetime_fleet= sorted([&quot;tra_freight_vehicle-lifetime_fleet_&quot; + j + &quot;[years]&quot; for j in mode_tech_list if ('HDV' not in j and 'LDV' not in j)]+[&quot;tra_freight_vehicle-lifetime_fleet_&quot; + j + &quot;[km]&quot; for j in mode_tech_list if ('HDVL' in j or 'HDVM' in j or 'HDVH' in j)])%%00010vehicle_lifetime_new= sorted([&quot;tra_freight_vehicle-lifetime_new_&quot; + j + &quot;[years]&quot; for j in mode_tech_list if ('HDV' not in j and 'LDV' not in j)]+ [&quot;tra_freight_vehicle-lifetime_new_&quot; + j + &quot;[km]&quot; for j in mode_tech_list if ('HDVL' in j or 'HDVM' in j or 'HDVH' in j)])%%00010vehicle_efficiency_fleet= sorted([&quot;tra_freight_vehicle-efficiency_fleet_&quot; + j + &quot;[MJ/tkm]&quot; for j in mode_tech_list if ('HDV' not in j and 'LDV' not in j)]+[&quot;tra_freight_vehicle-efficiency_fleet_&quot; + j + &quot;[MJ/km]&quot; for j in mode_tech_list if ('HDVL' in j or 'HDVM' in j or 'HDVH' in j)])%%00010vehicle_efficiency_new= sorted([&quot;tra_freight_vehicle-efficiency_new_&quot; + j + &quot;[MJ/tkm]&quot; for j in mode_tech_list if ('HDV' not in j and 'LDV' not in j)]+[&quot;tra_freight_vehicle-efficiency_new_&quot; + j + &quot;[MJ/km]&quot; for j in mode_tech_list if ('HDVL' in j or 'HDVM' in j or 'HDVH' in j)])%%00010%%00010%%00010remaining_vehicles_agg = sorted([&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_agg_list])%%00010remaining_vehicles_rail_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;rail&quot; in j]%%00010remaining_vehicles_IWW_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;IWW&quot; in j]%%00010remaining_vehicles_marine_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;marine&quot; in j]%%00010remaining_vehicles_aviation_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;aviation&quot; in j]%%00010remaining_vehicles_HDVL_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVL&quot; in j]%%00010remaining_vehicles_HDVM_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVM&quot; in j]%%00010remaining_vehicles_HDVH_list = [&quot;tra_freight_remaining-vehicles_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVH&quot; in j]%%00010vehicle_fleet_agg = sorted([&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_agg_list])%%00010vehicle_fleet_rail_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;rail&quot; in j]%%00010vehicle_fleet_IWW_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;IWW&quot; in j]%%00010vehicle_fleet_marine_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;marine&quot; in j]%%00010vehicle_fleet_aviation_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;aviation&quot; in j]%%00010vehicle_fleet_HDVL_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVL&quot; in j]%%00010vehicle_fleet_HDVM_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVM&quot; in j]%%00010vehicle_fleet_HDVH_list = [&quot;tra_freight_vehicle-fleet_&quot; + j + &quot;[number]&quot; for j in mode_tech_list if &quot;HDVH&quot; in j]%%00010# mode_list = ['HDV', 'rail', 'aviation', 'IWW', 'marine']%%00010%%00010# initialization%%00010init = 0%%00010baseyear = 2015%%00010previous_year = baseyear%%00010output_table = input_table.copy();%%00010%%00010# loop through the years%%00010for i in input_table['Years'].unique():%%00010    # if the year appears in the index, do the calculation%%00010    if i &gt; baseyear:%%00010        output_table_y = output_table[output_table['Years'] == i].copy()%%00010        output_table_prev = output_table[output_table['Years'] == previous_year].copy()%%00010%%00010        output_table_remaining_vehicles_y = output_table_y[remaining_vehicles].reset_index(drop=True)%%00010        output_table_remaining_vehicles_prev = output_table_prev[remaining_vehicles].reset_index(drop=True)%%00010        output_table_remaining_vehicles_agg_y = output_table_remaining_vehicles_y.copy()%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_rail[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_rail_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_IWW[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_IWW_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_marine[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_marine_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_aviation[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_aviation_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_HDVL[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_HDVL_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_HDVM[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_HDVM_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_remaining-vehicles_HDVH[number]&quot;]%%00010        output_table_remaining_vehicles_agg_y[remaining_vehicles_HDVH_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010        %%00010        output_table_vehicle_fleet_y = output_table_y[vehicle_fleet].reset_index(drop=True)%%00010        output_table_vehicle_fleet_prev = output_table_prev[vehicle_fleet].reset_index(drop=True)%%00010        output_table_vehicle_fleet_agg_y = output_table_vehicle_fleet_y.copy()%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_rail[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_rail_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_IWW[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_IWW_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_marine[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_marine_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_aviation[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_aviation_list] = pd.concat([df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_HDVL[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_HDVL_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_HDVM[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_HDVM_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010        df = output_table_y[&quot;tra_freight_vehicle-fleet_HDVH[number]&quot;]%%00010        output_table_vehicle_fleet_agg_y[vehicle_fleet_HDVH_list] = pd.concat([df,df,df,df,df,df,df,df], axis=1).values%%00010%%00010%%00010%%00010        output_table_new_vehicles_y = output_table_y[new_vehicles].reset_index(drop=True)%%00010        output_table_technology_share_fleet_y = output_table_y[technology_share_fleet].reset_index(drop=True)%%00010        output_table_technology_share_fleet_prev = output_table_prev[technology_share_fleet].reset_index(drop=True)%%00010%%00010        output_table_vehicle_lifetime_fleet_y = output_table_y[vehicle_lifetime_fleet].reset_index(drop=True)%%00010        output_table_vehicle_lifetime_fleet_prev = output_table_prev[vehicle_lifetime_fleet].reset_index(drop=True)%%00010        output_table_vehicle_lifetime_new_y = output_table_y[vehicle_lifetime_new].reset_index(drop=True)%%00010        output_table_vehicle_efficiency_fleet_y = output_table_y[vehicle_efficiency_fleet].reset_index(drop=True)%%00010        output_table_vehicle_efficiency_fleet_prev = output_table_prev[vehicle_efficiency_fleet].reset_index(drop=True)%%00010        output_table_vehicle_efficiency_new_y = output_table_y[vehicle_efficiency_new].reset_index(drop=True)%%00010%%00010        # VEHICLE FLEET%%00010        output_table_remaining_vehicles_y = output_table_remaining_vehicles_agg_y * output_table_technology_share_fleet_prev.values%%00010%%00010        mask1 = (output_table_new_vehicles_y &gt;= -sensitivity)%%00010        mask1_vehicle_fleet = mask1.copy()%%00010        mask1_vehicle_fleet.columns = vehicle_fleet%%00010        mask1_remaining_vehicles = mask1.copy()%%00010        mask1_remaining_vehicles.columns = remaining_vehicles%%00010        mask1_technology_share = mask1.copy()%%00010        mask1_technology_share.columns = technology_share_fleet%%00010        output_table_vehicle_fleet_y[mask1_vehicle_fleet] = output_table_remaining_vehicles_y[mask1_remaining_vehicles].values + output_table_new_vehicles_y[mask1].values%%00010        output_table_vehicle_fleet_y[~mask1_vehicle_fleet] = output_table_technology_share_fleet_prev[~mask1_technology_share].values * output_table_vehicle_fleet_agg_y[~mask1_vehicle_fleet].values%%00010%%00010        submask1 = (output_table_remaining_vehicles_y.values &lt; output_table_vehicle_fleet_y.values)%%00010        output_table_remaining_vehicles_y[~mask1_remaining_vehicles &amp; submask1] = output_table_remaining_vehicles_y[~mask1_remaining_vehicles &amp; submask1]%%00010        output_table_remaining_vehicles_y[~mask1_remaining_vehicles &amp; ~submask1] = output_table_vehicle_fleet_y[~mask1_vehicle_fleet &amp; ~submask1].values%%00010%%00010        # Technology-share%%00010        mask2 = (output_table_vehicle_fleet_agg_y &gt; 0)%%00010        mask2_technology_share_fleet = mask2.copy()%%00010        mask2_technology_share_fleet.columns = technology_share_fleet%%00010        output_table_technology_share_fleet_y[mask2_technology_share_fleet] = output_table_vehicle_fleet_y[mask2].values/output_table_vehicle_fleet_agg_y[mask2].values%%00010        output_table_technology_share_fleet_y[~mask2_technology_share_fleet] = 0%%00010%%00010        mask3 = (output_table_vehicle_fleet_prev.values &lt; output_table_remaining_vehicles_prev.values)%%00010        output_table_remaining_vehicles_prev[pd.DataFrame(data=mask3, columns=remaining_vehicles)] = output_table_vehicle_fleet_prev[pd.DataFrame(data=mask3, columns=vehicle_fleet)].values%%00010%%00010        mask4 = (output_table_vehicle_fleet_y != 0)%%00010        mask4_lifetime_fleet = mask4.copy()%%00010        mask4_lifetime_fleet.columns = vehicle_lifetime_fleet%%00010        mask4_remaining_vehicles = mask4.copy()%%00010        mask4_remaining_vehicles.columns = remaining_vehicles%%00010        mask4_remaining_vehicles = mask4.copy()%%00010        mask4_remaining_vehicles.columns = remaining_vehicles%%00010        mask4_lifetime_new = mask4.copy()%%00010        mask4_lifetime_new.columns = vehicle_lifetime_new%%00010        mask4_new_vehicles = mask4.copy()%%00010        mask4_new_vehicles.columns = new_vehicles%%00010        mask4_efficiency_fleet = mask4.copy()%%00010        mask4_efficiency_fleet.columns = vehicle_efficiency_fleet%%00010        mask4_efficiency_new = mask4.copy()%%00010        mask4_efficiency_new.columns = vehicle_efficiency_new%%00010        output_table_vehicle_lifetime_fleet_y[mask4_lifetime_fleet &amp; mask1] = (output_table_remaining_vehicles_y[mask4_remaining_vehicles].values *%%00010                                                                     output_table_vehicle_lifetime_fleet_prev[mask4_lifetime_fleet].values+%%00010                                                                     output_table_new_vehicles_y[mask4_new_vehicles].values *%%00010                                                                     output_table_vehicle_lifetime_new_y[mask4_lifetime_new].values) / \%%00010                                                                    output_table_vehicle_fleet_y[mask4].values%%00010        output_table_vehicle_efficiency_fleet_y[mask4_efficiency_fleet &amp; mask1] = (output_table_remaining_vehicles_y[mask4_remaining_vehicles].values *%%00010                                                                       output_table_vehicle_efficiency_fleet_prev[mask4_efficiency_fleet].values+%%00010                                                                       output_table_new_vehicles_y[mask4_new_vehicles].values *%%00010                                                                       output_table_vehicle_efficiency_new_y[mask4_efficiency_new].values) / \%%00010                                                                      output_table_vehicle_fleet_y[mask4].values%%00010%%00010        output_table_vehicle_lifetime_fleet_y[mask4_lifetime_fleet &amp; ~mask1] = output_table_vehicle_lifetime_fleet_prev[mask4_lifetime_fleet].values%%00010        output_table_vehicle_efficiency_fleet_y[mask4_efficiency_fleet &amp; ~mask1] = output_table_vehicle_efficiency_fleet_prev[mask4_efficiency_fleet].values%%00010%%00010        # avoid division by 0%%00010        output_table_vehicle_lifetime_fleet_y[~mask4_lifetime_fleet] = 0%%00010        output_table_vehicle_efficiency_fleet_y[~mask4_efficiency_fleet] = 0%%00010%%00010        output_table.loc[output_table['Years'] == i, remaining_vehicles] = output_table_remaining_vehicles_y.values.copy()%%00010        output_table.loc[output_table['Years'] == previous_year, remaining_vehicles] = output_table_remaining_vehicles_prev.values.copy()%%00010        output_table.loc[output_table['Years'] == i, vehicle_fleet] = output_table_vehicle_fleet_y.values.copy()%%00010        output_table.loc[output_table['Years'] == previous_year, vehicle_fleet] = output_table_vehicle_fleet_prev.values.copy()%%00010        output_table.loc[output_table['Years'] == i, new_vehicles] = output_table_new_vehicles_y.values.copy()%%00010        output_table.loc[output_table['Years'] == i, technology_share_fleet] = output_table_technology_share_fleet_y.values.copy()%%00010        output_table.loc[output_table['Years'] == previous_year, technology_share_fleet] = output_table_technology_share_fleet_prev.values.copy()%%00010        output_table.loc[output_table['Years'] == i, vehicle_lifetime_fleet] = output_table_vehicle_lifetime_fleet_y.values.copy()%%00010        output_table.loc[output_table['Years'] == previous_year, vehicle_lifetime_fleet] = output_table_vehicle_lifetime_fleet_prev.values.copy()%%00010        output_table.loc[output_table['Years'] == i, vehicle_lifetime_new] = output_table_vehicle_lifetime_new_y.values.copy()%%00010        output_table.loc[output_table['Years'] == i, vehicle_efficiency_fleet] = output_table_vehicle_efficiency_fleet_y.values.copy()%%00010        output_table.loc[output_table['Years'] == previous_year, vehicle_efficiency_fleet] = output_table_vehicle_efficiency_fleet_prev.values.copy()%%00010        output_table.loc[output_table['Years'] == i, vehicle_efficiency_new] = output_table_vehicle_efficiency_new_y.values.copy()%%00010        previous_year = i%%00010%%00010%%00010output_table.Years = output_table.Years.astype(str)%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 957, Cols: 477"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="b16640ac-bc8b-4540-ae07-cdee5c2d2290"/>
</config>
</config>
