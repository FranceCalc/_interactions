
{
    "type":"object",
    "properties":{
        "string-input-0:3628:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "disabled-0:1393:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "string-input-807:556:553":{
            "type":"string",
            "default":"ots_tec_power",
            "description":"Enter Description",
            "example":"ots_tec_power"
        },
        "string-input-807:556:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-0:722:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 2/1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 2/1"
            }
        },
        "boolean-input-0:3213:2380:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3101:2808:3993:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:2106:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:2847:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:721:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-4620:679:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3101:3084:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:3700:3689:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "lighting_electricity",
                    "lighting_gas-ff-natural",
                    "lighting_solid-bio",
                    "lighting_solid-ff-coal",
                    "lighting_gas-bio",
                    "lighting_heat-ambient",
                    "lighting_heat-district",
                    "lighting_heat-solar",
                    "lighting_liquid-bio-diesel",
                    "lighting_liquid-bio-gasoline",
                    "lighting_liquid-ff-heatingoil",
                    "lighting_solid-waste",
                    "lighting_heat-geothermal"
                ]
            }
        },
        "string-input-0:2942:2906:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "string-input-0:3101:3084:357":{
            "type":"string",
            "default":".*heat_.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*heat_.*"
        },
        "string-input-0:3147:1596":{
            "type":"string",
            "default":"(.*)_(.*)\\[.*",
            "description":"Enter Description",
            "example":"(.*)_(.*)\\[.*"
        },
        "string-input-0:3147:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "boolean-input-0:3099:3103:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "boolean-input-0:3503:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3147:1599":{
            "type":"string",
            "default":"subsector",
            "description":"Enter Description",
            "example":"subsector"
        },
        "column-filter-0:2942:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "fed_calibrated_electricity[TWh]",
                    "fed_calibrated_gas-bio[TWh]",
                    "fed_calibrated_gas-ff-natural[TWh]",
                    "fed_calibrated_heat-ambient[TWh]",
                    "fed_calibrated_heat-geothermal[TWh]",
                    "fed_calibrated_heat-solar[TWh]",
                    "fed_calibrated_liquid-bio-diesel[TWh]",
                    "fed_calibrated_liquid-bio-gasoline[TWh]",
                    "fed_calibrated_liquid-ff-heatingoil[TWh]",
                    "fed_calibrated_solid-bio[TWh]",
                    "fed_calibrated_solid-ff-coal[TWh]",
                    "fed_calibrated_solid-waste[TWh]"
                ]
            }
        },
        "column-filter-0:3527:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-CO2_gas-bio_non-residential_education[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-CO2_gas-bio_non-residential_education[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_education[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_education[Mt]",
                    "bld_emissions-CO2_gas-bio_non-residential_health[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_health[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_health[Mt]",
                    "bld_emissions-CO2_gas-bio_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_gas-bio_non-residential_offices[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_offices[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_offices[Mt]",
                    "bld_emissions-CO2_gas-bio_non-residential_other[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_other[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_other[Mt]",
                    "bld_emissions-CO2_gas-bio_non-residential_trade[Mt]",
                    "bld_emissions-N2O_gas-bio_non-residential_trade[Mt]",
                    "bld_emissions-CH4_gas-bio_non-residential_trade[Mt]",
                    "bld_emissions-CO2_gas-bio_residential_mfh[Mt]",
                    "bld_emissions-N2O_gas-bio_residential_mfh[Mt]",
                    "bld_emissions-CH4_gas-bio_residential_mfh[Mt]",
                    "bld_emissions-CO2_gas-bio_residential_sfh[Mt]",
                    "bld_emissions-N2O_gas-bio_residential_sfh[Mt]",
                    "bld_emissions-CH4_gas-bio_residential_sfh[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_education[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_education[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_education[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_health[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_health[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_health[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_offices[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_offices[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_offices[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_other[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_other[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_other[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-residential_trade[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-residential_trade[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-residential_trade[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_residential_mfh[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_residential_mfh[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_residential_mfh[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_residential_sfh[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_residential_sfh[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_residential_sfh[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_education[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_education[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_education[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_health[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_health[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_health[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_offices[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_offices[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_offices[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_other[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_other[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_other[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-residential_trade[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-residential_trade[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-residential_trade[Mt]",
                    "bld_emissions-CO2_heat-ambient_residential_mfh[Mt]",
                    "bld_emissions-N2O_heat-ambient_residential_mfh[Mt]",
                    "bld_emissions-CH4_heat-ambient_residential_mfh[Mt]",
                    "bld_emissions-CO2_heat-ambient_residential_sfh[Mt]",
                    "bld_emissions-N2O_heat-ambient_residential_sfh[Mt]",
                    "bld_emissions-CH4_heat-ambient_residential_sfh[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_education[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_education[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_education[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_health[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_health[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_health[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_offices[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_offices[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_offices[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_other[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_other[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_other[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-residential_trade[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-residential_trade[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-residential_trade[Mt]",
                    "bld_emissions-CO2_heat-geothermal_residential_mfh[Mt]",
                    "bld_emissions-N2O_heat-geothermal_residential_mfh[Mt]",
                    "bld_emissions-CH4_heat-geothermal_residential_mfh[Mt]",
                    "bld_emissions-CO2_heat-geothermal_residential_sfh[Mt]",
                    "bld_emissions-N2O_heat-geothermal_residential_sfh[Mt]",
                    "bld_emissions-CH4_heat-geothermal_residential_sfh[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_education[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_education[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_education[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_health[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_health[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_health[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_offices[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_offices[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_offices[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_other[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_other[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_other[Mt]",
                    "bld_emissions-CO2_heat-solar_non-residential_trade[Mt]",
                    "bld_emissions-N2O_heat-solar_non-residential_trade[Mt]",
                    "bld_emissions-CH4_heat-solar_non-residential_trade[Mt]",
                    "bld_emissions-CO2_heat-solar_residential_mfh[Mt]",
                    "bld_emissions-N2O_heat-solar_residential_mfh[Mt]",
                    "bld_emissions-CH4_heat-solar_residential_mfh[Mt]",
                    "bld_emissions-CO2_heat-solar_residential_sfh[Mt]",
                    "bld_emissions-N2O_heat-solar_residential_sfh[Mt]",
                    "bld_emissions-CH4_heat-solar_residential_sfh[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_education[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_education[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_education[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_health[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_health[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_health[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_offices[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_offices[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_offices[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_other[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_other[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_other[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-residential_trade[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-residential_trade[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-residential_trade[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_residential_mfh[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_residential_mfh[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_residential_mfh[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_residential_sfh[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_residential_sfh[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_residential_sfh[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_education[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_education[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_education[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_health[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_health[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_health[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_offices[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_offices[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_offices[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_other[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_other[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_other[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-residential_trade[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-residential_trade[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-residential_trade[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_residential_mfh[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_residential_mfh[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_residential_mfh[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_residential_sfh[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_residential_sfh[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_residential_sfh[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_education[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_education[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_education[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_health[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_health[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_health[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_offices[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_offices[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_offices[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_other[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_other[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_other[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-residential_trade[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-residential_trade[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-residential_trade[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_residential_mfh[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_residential_mfh[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_residential_mfh[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_residential_sfh[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_residential_sfh[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_residential_sfh[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_education[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_education[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_education[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_health[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_health[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_health[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_offices[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_offices[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_offices[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_other[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_other[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_other[Mt]",
                    "bld_emissions-CO2_solid-bio_non-residential_trade[Mt]",
                    "bld_emissions-N2O_solid-bio_non-residential_trade[Mt]",
                    "bld_emissions-CH4_solid-bio_non-residential_trade[Mt]",
                    "bld_emissions-CO2_solid-bio_residential_mfh[Mt]",
                    "bld_emissions-N2O_solid-bio_residential_mfh[Mt]",
                    "bld_emissions-CH4_solid-bio_residential_mfh[Mt]",
                    "bld_emissions-CO2_solid-bio_residential_sfh[Mt]",
                    "bld_emissions-N2O_solid-bio_residential_sfh[Mt]",
                    "bld_emissions-CH4_solid-bio_residential_sfh[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_education[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_education[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_education[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_health[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_health[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_health[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_offices[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_offices[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_offices[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_other[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_other[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_other[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-residential_trade[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-residential_trade[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-residential_trade[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_residential_mfh[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_residential_mfh[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_residential_mfh[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_residential_sfh[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_residential_sfh[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_residential_sfh[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_education[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_education[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_education[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_health[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_health[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_health[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_offices[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_offices[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_offices[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_other[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_other[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_other[Mt]",
                    "bld_emissions-CO2_solid-waste_non-residential_trade[Mt]",
                    "bld_emissions-N2O_solid-waste_non-residential_trade[Mt]",
                    "bld_emissions-CH4_solid-waste_non-residential_trade[Mt]",
                    "bld_emissions-CO2_solid-waste_residential_mfh[Mt]",
                    "bld_emissions-N2O_solid-waste_residential_mfh[Mt]",
                    "bld_emissions-CH4_solid-waste_residential_mfh[Mt]",
                    "bld_emissions-CO2_solid-waste_residential_sfh[Mt]",
                    "bld_emissions-N2O_solid-waste_residential_sfh[Mt]",
                    "bld_emissions-CH4_solid-waste_residential_sfh[Mt]"
                ]
            }
        },
        "string-input-0:3450:2667:1596":{
            "type":"string",
            "default":"(.*)_(energy-need-)(.*)(-per-m2)_(.*)",
            "description":"Enter Description",
            "example":"(.*)_(energy-need-)(.*)(-per-m2)_(.*)"
        },
        "double-input-0:3217:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-0:3450:2667:1597":{
            "type":"string",
            "default":"$3",
            "description":"Enter Description",
            "example":"$3"
        },
        "string-input-0:2942:2930:843":{
            "type":"string",
            "default":"Romania before calibration",
            "description":"Enter Description",
            "example":"Romania before calibration"
        },
        "string-input-0:3450:2667:1599":{
            "type":"string",
            "default":"use",
            "description":"Enter Description",
            "example":"use"
        },
        "column-filter-0:1130:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_floorarea_reno-dep-off_education_[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_floorarea_reno-dep-off_education_[Mm2]",
                    "bld_floorarea_reno-med-off_education_[Mm2]",
                    "bld_floorarea_reno-shl-off_education_[Mm2]",
                    "bld_floorarea_reno-dep-off_health_[Mm2]",
                    "bld_floorarea_reno-med-off_health_[Mm2]",
                    "bld_floorarea_reno-shl-off_health_[Mm2]",
                    "bld_floorarea_reno-dep-off_hotels_[Mm2]",
                    "bld_floorarea_reno-med-off_hotels_[Mm2]",
                    "bld_floorarea_reno-shl-off_hotels_[Mm2]",
                    "bld_floorarea_reno-dep-mfh_[Mm2]",
                    "bld_floorarea_reno-med-mfh_[Mm2]",
                    "bld_floorarea_reno-shl-mfh_[Mm2]",
                    "bld_floorarea_reno-dep-off_offices_[Mm2]",
                    "bld_floorarea_reno-med-off_offices_[Mm2]",
                    "bld_floorarea_reno-shl-off_offices_[Mm2]",
                    "bld_floorarea_reno-dep-off_other_[Mm2]",
                    "bld_floorarea_reno-med-off_other_[Mm2]",
                    "bld_floorarea_reno-shl-off_other_[Mm2]",
                    "bld_floorarea_reno-dep-sfh_[Mm2]",
                    "bld_floorarea_reno-med-sfh_[Mm2]",
                    "bld_floorarea_reno-shl-sfh_[Mm2]",
                    "bld_floorarea_reno-dep-off_trade_[Mm2]",
                    "bld_floorarea_reno-med-off_trade_[Mm2]",
                    "bld_floorarea_reno-shl-off_trade_[Mm2]"
                ]
            }
        },
        "string-input-0:721:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "column-filter-0:3705:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"non-residential_education_dep_renovated-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "non-residential_education_dep_renovated-area[Mm2]",
                    "non-residential_education_dep_constructed-area[Mm2]",
                    "non-residential_education_dep_demolished-area[Mm2]",
                    "non-residential_education_exi_renovated-area[Mm2]",
                    "non-residential_education_exi_constructed-area[Mm2]",
                    "non-residential_education_exi_demolished-area[Mm2]",
                    "non-residential_education_med_renovated-area[Mm2]",
                    "non-residential_education_med_constructed-area[Mm2]",
                    "non-residential_education_med_demolished-area[Mm2]",
                    "non-residential_education_shl_renovated-area[Mm2]",
                    "non-residential_education_shl_constructed-area[Mm2]",
                    "non-residential_education_shl_demolished-area[Mm2]",
                    "non-residential_health_dep_renovated-area[Mm2]",
                    "non-residential_health_dep_constructed-area[Mm2]",
                    "non-residential_health_dep_demolished-area[Mm2]",
                    "non-residential_health_exi_renovated-area[Mm2]",
                    "non-residential_health_exi_constructed-area[Mm2]",
                    "non-residential_health_exi_demolished-area[Mm2]",
                    "non-residential_health_med_renovated-area[Mm2]",
                    "non-residential_health_med_constructed-area[Mm2]",
                    "non-residential_health_med_demolished-area[Mm2]",
                    "non-residential_health_shl_renovated-area[Mm2]",
                    "non-residential_health_shl_constructed-area[Mm2]",
                    "non-residential_health_shl_demolished-area[Mm2]",
                    "non-residential_hotels_dep_renovated-area[Mm2]",
                    "non-residential_hotels_dep_constructed-area[Mm2]",
                    "non-residential_hotels_dep_demolished-area[Mm2]",
                    "non-residential_hotels_exi_renovated-area[Mm2]",
                    "non-residential_hotels_exi_constructed-area[Mm2]",
                    "non-residential_hotels_exi_demolished-area[Mm2]",
                    "non-residential_hotels_med_renovated-area[Mm2]",
                    "non-residential_hotels_med_constructed-area[Mm2]",
                    "non-residential_hotels_med_demolished-area[Mm2]",
                    "non-residential_hotels_shl_renovated-area[Mm2]",
                    "non-residential_hotels_shl_constructed-area[Mm2]",
                    "non-residential_hotels_shl_demolished-area[Mm2]",
                    "non-residential_offices_dep_renovated-area[Mm2]",
                    "non-residential_offices_dep_constructed-area[Mm2]",
                    "non-residential_offices_dep_demolished-area[Mm2]",
                    "non-residential_offices_exi_renovated-area[Mm2]",
                    "non-residential_offices_exi_constructed-area[Mm2]",
                    "non-residential_offices_exi_demolished-area[Mm2]",
                    "non-residential_offices_med_renovated-area[Mm2]",
                    "non-residential_offices_med_constructed-area[Mm2]",
                    "non-residential_offices_med_demolished-area[Mm2]",
                    "non-residential_offices_shl_renovated-area[Mm2]",
                    "non-residential_offices_shl_constructed-area[Mm2]",
                    "non-residential_offices_shl_demolished-area[Mm2]",
                    "non-residential_other_dep_renovated-area[Mm2]",
                    "non-residential_other_dep_constructed-area[Mm2]",
                    "non-residential_other_dep_demolished-area[Mm2]",
                    "non-residential_other_exi_renovated-area[Mm2]",
                    "non-residential_other_exi_constructed-area[Mm2]",
                    "non-residential_other_exi_demolished-area[Mm2]",
                    "non-residential_other_med_renovated-area[Mm2]",
                    "non-residential_other_med_constructed-area[Mm2]",
                    "non-residential_other_med_demolished-area[Mm2]",
                    "non-residential_other_shl_renovated-area[Mm2]",
                    "non-residential_other_shl_constructed-area[Mm2]",
                    "non-residential_other_shl_demolished-area[Mm2]",
                    "non-residential_trade_dep_renovated-area[Mm2]",
                    "non-residential_trade_dep_constructed-area[Mm2]",
                    "non-residential_trade_dep_demolished-area[Mm2]",
                    "non-residential_trade_exi_renovated-area[Mm2]",
                    "non-residential_trade_exi_constructed-area[Mm2]",
                    "non-residential_trade_exi_demolished-area[Mm2]",
                    "non-residential_trade_med_renovated-area[Mm2]",
                    "non-residential_trade_med_constructed-area[Mm2]",
                    "non-residential_trade_med_demolished-area[Mm2]",
                    "non-residential_trade_shl_renovated-area[Mm2]",
                    "non-residential_trade_shl_constructed-area[Mm2]",
                    "non-residential_trade_shl_demolished-area[Mm2]"
                ]
            }
        },
        "string-input-0:3101:2808:3809:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3571:349":{
            "type":"string",
            "default":"area",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"area"
        },
        "string-input-0:2942:2914:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "single-selection-0:2640:2231:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "string-input-0:3056:357":{
            "type":"string",
            "default":".*_res.*_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*_res.*_.*_(.*)\\[.*"
        },
        "string-input-0:3571:354":{
            "type":"string",
            "default":"Mm²",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm²"
        },
        "string-input-0:3106:3222:445":{
            "type":"string",
            "default":"(.*)\\+ratio",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"(.*)\\+ratio"
        },
        "column-filter-0:3101:3086:3994:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-0:3106:3222:444":{
            "type":"string",
            "default":"std",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"std"
        },
        "column-filter-0:3099:3100:3991:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-4620:695:1151:446":{
            "type":"string",
            "default":"lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_diet_(.*)\\[kcal]"
        },
        "string-input-4620:695:1151:445":{
            "type":"string",
            "default":"cal_lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_diet_(.*)\\[kcal]"
        },
        "string-input-4620:695:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "string-input-0:3628:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3101:3084:349":{
            "type":"string",
            "default":"energydemand-by-ec",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"energydemand-by-ec"
        },
        "string-input-0:3628:357":{
            "type":"string",
            "default":"energy-demand-calibrated_.*tial_(.*_[s,l,g,h].*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"energy-demand-calibrated_.*tial_(.*_[s,l,g,h].*)_.*\\[.*"
        },
        "string-input-0:3106:3222:446":{
            "type":"string",
            "default":"Sum.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"Sum.*"
        },
        "string-input-444:532:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-444:532:553":{
            "type":"string",
            "default":"cal_bld_calibration",
            "description":"Enter Description",
            "example":"cal_bld_calibration"
        },
        "single-selection-0:2721:1017:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:2640:2232:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-0:3101:2808:3994:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "single-selection-0:3106:3219:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:2640:2231:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-0:2845:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emission-factor_CO2[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emission-factor_CO2[Mt/TWh]"
                ]
            }
        },
        "string-input-0:2938:2913:843":{
            "type":"string",
            "default":"End of Energy Demand Box",
            "description":"Enter Description",
            "example":"End of Energy Demand Box"
        },
        "string-input-0:2852:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "string-input-0:3391:1599":{
            "type":"string",
            "default":"use",
            "description":"Enter Description",
            "example":"use"
        },
        "single-selection-0:2640:2380:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3391:1596":{
            "type":"string",
            "default":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)"
        },
        "string-input-0:3501:349":{
            "type":"string",
            "default":"capex",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"capex"
        },
        "string-input-0:3391:1597":{
            "type":"string",
            "default":"$5",
            "description":"Enter Description",
            "example":"$5"
        },
        "string-input-0:3099:2953:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:1014:646":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-444:541:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3572:357":{
            "type":"string",
            "default":".*area.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*area.*"
        },
        "string-input-444:541:561":{
            "type":"string",
            "default":"lever_building-renovation-rate",
            "description":"Enter Description",
            "example":"lever_building-renovation-rate"
        },
        "boolean-input-0:1603:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "string-input-0:721:446":{
            "type":"string",
            "default":".*appliance-efficiency_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":".*appliance-efficiency_(.*)\\[.*"
        },
        "string-input-0:2852:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:721:445":{
            "type":"string",
            "default":".*appliance-use_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":".*appliance-use_(.*)\\[.*"
        },
        "string-input-0:2852:357":{
            "type":"string",
            "default":".*energy-demand_([g,s,l].*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_([g,s,l].*)\\[.*"
        },
        "single-selection-0:2337:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-0:3213:2380:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:3705:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3841:3840:349":{
            "type":"string",
            "default":"capex",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"capex"
        },
        "column-filter-0:722:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3482:349":{
            "type":"string",
            "default":"bld_emissions_non-elec_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_non-elec_appliances"
        },
        "string-input-0:721:444":{
            "type":"string",
            "default":"energy-demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand"
        },
        "string-input-4620:695:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:3482:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "column-filter-0:3433:2959:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_non-residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-residential_lighting_electricity[TWh]",
                    "bld_energy-demand_non-residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_cooking_electricity[TWh]",
                    "bld_energy-demand_residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_residential_lighting_electricity[TWh]",
                    "bld_energy-demand_residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand-non-elec_non-residential_hot-water[TWh]",
                    "bld_energy-demand-non-elec_non-residential_space-cooling[TWh]",
                    "bld_energy-demand-non-elec_residential_cooking[TWh]",
                    "bld_energy-demand-non-elec_residential_hot-water[TWh]"
                ]
            }
        },
        "boolean-input-4620:695:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3482:357":{
            "type":"string",
            "default":".*emissions-non-elec_(.*_.*ial)_.*[i,t][n,e][g,r]\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions-non-elec_(.*_.*ial)_.*[i,t][n,e][g,r]\\[.*"
        },
        "single-selection-0:2845:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3620:3036:357":{
            "type":"string",
            "default":"bld_emissions-(..._.*tial_.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_emissions-(..._.*tial_.*)_.*\\[.*"
        },
        "string-input-444:541:555":{
            "type":"string",
            "default":"lever_building-renovation-rate",
            "description":"Enter Description",
            "example":"lever_building-renovation-rate"
        },
        "string-input-0:3620:3036:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3213:2231:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "boolean-input-0:3058:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-444:541:553":{
            "type":"string",
            "default":"fts_bld_building-renovation-rate",
            "description":"Enter Description",
            "example":"fts_bld_building-renovation-rate"
        },
        "string-input-0:3501:354":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"unit"
        },
        "string-input-0:3501:357":{
            "type":"string",
            "default":".*capex.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*capex.*"
        },
        "single-selection-0:3528:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3564:349":{
            "type":"string",
            "default":"bld_energy-need",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-need"
        },
        "string-input-4623:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-0:3430:2923:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+cal_rate_[%]",
                    "cooking+cal_rate_[%]",
                    "hot-water+cal_rate_[%]",
                    "lighting+cal_rate_[%]",
                    "space-cooling+cal_rate_[%]"
                ]
            }
        },
        "column-filter-0:2337:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand[GWh]",
                    "energy-demand_calibrated[TWh]"
                ]
            }
        },
        "boolean-input-0:2058:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "string-input-1209:1179:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-1209:1179:553":{
            "type":"string",
            "default":"ots_clm_ems-after-2050",
            "description":"Enter Description",
            "example":"ots_clm_ems-after-2050"
        },
        "column-filter-4620:695:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-807:555:553":{
            "type":"string",
            "default":"fts_tec_agriculture",
            "description":"Enter Description",
            "example":"fts_tec_agriculture"
        },
        "single-selection-0:721:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-807:555:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3436:2933:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "string-input-0:2942:2923:843":{
            "type":"string",
            "default":"EU calibration rate",
            "description":"Enter Description",
            "example":"EU calibration rate"
        },
        "column-selection-0:3372:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "single-selection-0:1393:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3868:3866:349":{
            "type":"string",
            "default":"bld_emissions-non-elec",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions-non-elec"
        },
        "string-input-0:1393:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "string-input-444:531:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3564:357":{
            "type":"string",
            "default":".*_.*energy-need_(.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*_.*energy-need_(.*)\\[.*]"
        },
        "string-input-0:2942:2913:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "string-input-0:3570:349":{
            "type":"string",
            "default":"area",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"area"
        },
        "string-input-0:3564:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:1831:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:2640:2380:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3104:2618:843":{
            "type":"string",
            "default":"Industry",
            "description":"Enter Description",
            "example":"Industry"
        },
        "single-selection-4620:693:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-444:531:553":{
            "type":"string",
            "default":"^(?!.*bld_climate).*ots_bld.*$",
            "description":"Enter Description",
            "example":"^(?!.*bld_climate).*ots_bld.*$"
        },
        "boolean-input-4620:653:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-0:2942:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:2938:2904:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "single-selection-0:3872:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:722:460":{
            "type":"string",
            "default":"num",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"num"
        },
        "string-input-0:3868:3866:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:3158:1601:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "string-input-0:3099:3994:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3057:357":{
            "type":"string",
            "default":".*_non-res.*_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*_non-res.*_.*_(.*)\\[.*"
        },
        "column-filter-0:3700:3688:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "hot-water_electricity",
                    "hot-water_gas-ff-natural",
                    "hot-water_solid-bio",
                    "hot-water_solid-ff-coal",
                    "hot-water_gas-bio",
                    "hot-water_heat-ambient",
                    "hot-water_heat-district",
                    "hot-water_heat-solar",
                    "hot-water_liquid-bio-diesel",
                    "hot-water_liquid-bio-gasoline",
                    "hot-water_liquid-ff-heatingoil",
                    "hot-water_solid-waste",
                    "hot-water_heat-geothermal"
                ]
            }
        },
        "string-input-0:3868:3866:357":{
            "type":"string",
            "default":"emissions(.*tial_.*)_[s,l,g,h].*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"emissions(.*tial_.*)_[s,l,g,h].*_.*\\[.*"
        },
        "string-input-0:3057:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-selection-0:1593:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"buildingtype"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"buildingtype"
            }
        },
        "single-selection-4620:693:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3570:354":{
            "type":"string",
            "default":"Mm²",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm²"
        },
        "string-input-0:3570:357":{
            "type":"string",
            "default":".*area.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*area.*"
        },
        "string-input-0:2942:357":{
            "type":"string",
            "default":"(.*)\\+.*calibrated.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*calibrated.*\\[.*"
        },
        "string-input-0:3430:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "boolean-input-0:2640:2232:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3865:3510:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:2721:1015:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_nonres-floor-area_non-residential_offices[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_nonres-floor-area_non-residential_offices[Mm2]",
                    "bld_nonres-floor-area_non-residential_hotels[Mm2]",
                    "bld_nonres-floor-area_non-residential_trade[Mm2]",
                    "bld_nonres-floor-area_non-residential_education[Mm2]",
                    "bld_nonres-floor-area_non-residential_health[Mm2]",
                    "bld_nonres-floor-area_non-residential_other[Mm2]"
                ]
            }
        },
        "string-input-0:3056:349":{
            "type":"string",
            "default":"bld_energy-demand_heat_residential",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_heat_residential"
        },
        "boolean-input-4620:693:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3865:3510:357":{
            "type":"string",
            "default":".*energy-demand_(.*tial)_[c,l,a].*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_(.*tial)_[c,l,a].*\\[.*"
        },
        "string-input-0:3101:3086:3993:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-0:2942:2951:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"electricity+Sum(energy-demand_decentral_renovated[TWh])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "electricity+Sum(energy-demand_decentral_renovated[TWh])",
                    "electricity+Sum(energy-demand_decentral_constructed[TWh])",
                    "electricity+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_renovated[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_constructed[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_renovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_constructed[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_unrenovated[TWh])"
                ]
            }
        },
        "string-input-0:3571:357":{
            "type":"string",
            "default":".*area.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*area.*"
        },
        "string-input-0:3056:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:3101:2808:3993:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "column-filter-0:721:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3216:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-need_renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-need_renovated[GWh]",
                    "energy-need_constructed[GWh]",
                    "energy-need_unrenovated[GWh]",
                    "energy-need[GWh]",
                    "energy-need_decentral_renovated[GWh]",
                    "energy-need_decentral_constructed[GWh]",
                    "energy-need_decentral_unrenovated[GWh]",
                    "energy-need_decentral_[GWh]",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]",
                    "energy-demand_decentral_[GWh]",
                    "energy-demand[GWh]",
                    "energy-demand_calibrated_decentral_renovated[GWh]",
                    "energy-demand_calibrated_decentral_constructed[GWh]",
                    "energy-demand_calibrated_decentral_unrenovated[GWh]",
                    "energy-demand_calibrated_decentral_[GWh]"
                ]
            }
        },
        "boolean-input-0:2339:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:2727:2794:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "non-residential+Sum(Sum(constructed-area-acc[Mm2]))",
                    "non-residential+Sum(Sum(demolished-area-acc[Mm2]))",
                    "non-residential+Sum(Sum(unrenovated-area-acc[Mm2]))",
                    "residential+Sum(Sum(constructed-area-acc[Mm2]))",
                    "residential+Sum(Sum(demolished-area-acc[Mm2]))",
                    "residential+Sum(Sum(unrenovated-area-acc[Mm2]))"
                ]
            }
        },
        "string-input-0:2942:349":{
            "type":"string",
            "default":"fed_calibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_calibrated"
        },
        "boolean-input-0:3836:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:1638:1245":{
            "type":"string",
            "default":".*floor-area(.*)\\[.*",
            "description":"Enter Description",
            "example":".*floor-area(.*)\\[.*"
        },
        "string-input-0:1638:1246":{
            "type":"string",
            "default":"Mm2",
            "description":"Enter Description",
            "example":"Mm2"
        },
        "single-selection-0:3561:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:3057:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-selection-0:2086:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"energycarrier"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"energycarrier"
            }
        },
        "single-selection-0:3527:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3865:3510:349":{
            "type":"string",
            "default":"bld_energy-demand_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_appliances"
        },
        "string-input-0:3101:3086:3809:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:2847:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-4620:679:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3859:349":{
            "type":"string",
            "default":"bld",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld"
        },
        "boolean-input-0:3486:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:722:446":{
            "type":"string",
            "default":"divisor-one",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"divisor-one"
        },
        "string-input-0:722:445":{
            "type":"string",
            "default":".*appliance-lifetime_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":".*appliance-lifetime_(.*)\\[.*"
        },
        "column-filter-0:3154:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"heatcool-efficiency+Sum(ColumnValues)"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "heatcool-efficiency+Sum(ColumnValues)"
                ]
            }
        },
        "string-input-0:722:444":{
            "type":"string",
            "default":"appliance-new-ratio",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"appliance-new-ratio"
        },
        "string-input-0:3431:2914:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "string-input-0:3859:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:3430:2906:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances[TWh]",
                    "cooking[TWh]",
                    "hot-water[TWh]",
                    "lighting[TWh]",
                    "space-cooling[TWh]"
                ]
            }
        },
        "boolean-input-0:3106:3222:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-0:3859:357":{
            "type":"string",
            "default":".*_(energy-demand_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*_(energy-demand_.*)\\[.*]"
        },
        "string-input-0:2940:2883:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:1611:1599":{
            "type":"string",
            "default":"Years_number",
            "description":"Enter Description",
            "example":"Years_number"
        },
        "string-input-0:3213:2232:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "column-filter-0:3430:2914:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances[TWh]",
                    "cooking[TWh]",
                    "hot-water[TWh]",
                    "lighting[TWh]",
                    "space-cooling[TWh]"
                ]
            }
        },
        "string-input-0:3213:2232:445":{
            "type":"string",
            "default":"cal(.*)",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal(.*)"
        },
        "string-input-0:3105:2951:843":{
            "type":"string",
            "default":"pipes",
            "description":"Enter Description",
            "example":"pipes"
        },
        "string-input-0:3213:2232:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "string-input-0:3148:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "column-filter-0:3099:3991:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-0:3148:1596":{
            "type":"string",
            "default":"bld_(.*)_.*(\\[.*)",
            "description":"Enter Description",
            "example":"bld_(.*)_.*(\\[.*)"
        },
        "string-input-0:3148:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "column-filter-0:3101:2808:3809:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energydemand-by-sector&ec[TWh]",
                    "energydemand-by-ec[TWh]",
                    "energydemand-by-btype[TWh]"
                ]
            }
        },
        "string-input-0:2834:354":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"GWh"
        },
        "boolean-input-0:2783:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-0:3841:3840:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2834:357":{
            "type":"string",
            "default":".*energy-need.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-need.*"
        },
        "string-input-0:1611:1596":{
            "type":"string",
            "default":"(.*)",
            "description":"Enter Description",
            "example":"(.*)"
        },
        "column-filter-0:3189:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy_non-residential_hot-water_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy_non-residential_hot-water_electricity[TWh]",
                    "energy_non-residential_hot-water_gas-bio[TWh]",
                    "energy_non-residential_hot-water_gas-ff-natural[TWh]",
                    "energy_non-residential_hot-water_heat-ambient[TWh]",
                    "energy_non-residential_hot-water_heat-district[TWh]",
                    "energy_non-residential_hot-water_heat-geothermal[TWh]",
                    "energy_non-residential_hot-water_heat-solar[TWh]",
                    "energy_non-residential_hot-water_liquid-bio-diesel[TWh]",
                    "energy_non-residential_hot-water_liquid-bio-gasoline[TWh]",
                    "energy_non-residential_hot-water_liquid-ff-heatingoil[TWh]",
                    "energy_non-residential_hot-water_solid-bio[TWh]",
                    "energy_non-residential_hot-water_solid-ff-coal[TWh]",
                    "energy_non-residential_hot-water_solid-waste[TWh]",
                    "energy_non-residential_lighting_electricity[TWh]",
                    "energy_non-residential_space-cooling_electricity[TWh]",
                    "energy_non-residential_space-cooling_gas-bio[TWh]",
                    "energy_non-residential_space-cooling_gas-ff-natural[TWh]",
                    "energy_non-residential_space-heating_electricity[TWh]",
                    "energy_non-residential_space-heating_gas-bio[TWh]",
                    "energy_non-residential_space-heating_gas-ff-natural[TWh]",
                    "energy_non-residential_space-heating_heat-ambient[TWh]",
                    "energy_non-residential_space-heating_heat-geothermal[TWh]",
                    "energy_non-residential_space-heating_heat-solar[TWh]",
                    "energy_non-residential_space-heating_liquid-bio-diesel[TWh]",
                    "energy_non-residential_space-heating_liquid-bio-gasoline[TWh]",
                    "energy_non-residential_space-heating_liquid-ff-heatingoil[TWh]",
                    "energy_non-residential_space-heating_solid-bio[TWh]",
                    "energy_non-residential_space-heating_solid-ff-coal[TWh]",
                    "energy_non-residential_space-heating_solid-waste[TWh]",
                    "energy_residential_appliances_electricity[TWh]",
                    "energy_residential_cooking_electricity[TWh]",
                    "energy_residential_cooking_gas-bio[TWh]",
                    "energy_residential_cooking_gas-ff-natural[TWh]",
                    "energy_residential_cooking_solid-bio[TWh]",
                    "energy_residential_cooking_solid-ff-coal[TWh]",
                    "energy_residential_hot-water_electricity[TWh]",
                    "energy_residential_hot-water_gas-bio[TWh]",
                    "energy_residential_hot-water_gas-ff-natural[TWh]",
                    "energy_residential_hot-water_heat-ambient[TWh]",
                    "energy_residential_hot-water_heat-district[TWh]",
                    "energy_residential_hot-water_heat-geothermal[TWh]",
                    "energy_residential_hot-water_heat-solar[TWh]",
                    "energy_residential_hot-water_liquid-bio-diesel[TWh]",
                    "energy_residential_hot-water_liquid-bio-gasoline[TWh]",
                    "energy_residential_hot-water_liquid-ff-heatingoil[TWh]",
                    "energy_residential_hot-water_solid-bio[TWh]",
                    "energy_residential_hot-water_solid-ff-coal[TWh]",
                    "energy_residential_hot-water_solid-waste[TWh]",
                    "energy_residential_lighting_electricity[TWh]",
                    "energy_residential_space-cooling_electricity[TWh]",
                    "energy_residential_space-cooling_gas-bio[TWh]",
                    "energy_residential_space-cooling_gas-ff-natural[TWh]",
                    "energy_residential_space-heating_electricity[TWh]",
                    "energy_residential_space-heating_gas-bio[TWh]",
                    "energy_residential_space-heating_gas-ff-natural[TWh]",
                    "energy_residential_space-heating_heat-ambient[TWh]",
                    "energy_residential_space-heating_heat-geothermal[TWh]",
                    "energy_residential_space-heating_heat-solar[TWh]",
                    "energy_residential_space-heating_liquid-bio-diesel[TWh]",
                    "energy_residential_space-heating_liquid-bio-gasoline[TWh]",
                    "energy_residential_space-heating_liquid-ff-heatingoil[TWh]",
                    "energy_residential_space-heating_solid-bio[TWh]",
                    "energy_residential_space-heating_solid-ff-coal[TWh]",
                    "energy_residential_space-heating_solid-waste[TWh]"
                ]
            }
        },
        "single-selection-0:724:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-4620:695:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:1611:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "boolean-input-0:3564:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3101:3083:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:3561:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"non-residential_floor-area_dep[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "non-residential_floor-area_dep[Mm2]",
                    "non-residential_floor-area_exi[Mm2]",
                    "non-residential_floor-area_med[Mm2]",
                    "non-residential_floor-area_shl[Mm2]",
                    "residential_floor-area_dep[Mm2]",
                    "residential_floor-area_exi[Mm2]",
                    "residential_floor-area_med[Mm2]",
                    "residential_floor-area_shl[Mm2]"
                ]
            }
        },
        "boolean-input-0:3619:2990:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:3101:3086:3991:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:2340:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)_(.*)_(.*)(\\[.*)"
        },
        "string-input-0:2340:1597":{
            "type":"string",
            "default":"$5",
            "description":"Enter Description",
            "example":"$5"
        },
        "column-filter-0:3099:3105:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"1991+renovated-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "1991+renovated-area[Mm2]",
                    "1992+renovated-area[Mm2]",
                    "1993+renovated-area[Mm2]",
                    "1994+renovated-area[Mm2]",
                    "1995+renovated-area[Mm2]",
                    "1996+renovated-area[Mm2]"
                ]
            }
        },
        "string-input-0:3436:2906:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "string-input-0:3634:349":{
            "type":"string",
            "default":"bld_energy-demand_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_appliances"
        },
        "column-filter-4620:693:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-0:3871:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3101:2808:3991:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-0:2847:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions_CH4_decentral_renovated[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions_CH4_decentral_renovated[Mt]",
                    "emissions_CH4_decentral_constructed[Mt]",
                    "emissions_CH4_decentral_unrenovated[Mt]",
                    "emissions_CH4_decentral_[Mt]",
                    "emissions_N2O_decentral_renovated[Mt]",
                    "emissions_N2O_decentral_constructed[Mt]",
                    "emissions_N2O_decentral_unrenovated[Mt]",
                    "emissions_N2O_decentral_[Mt]",
                    "emissions_CO2_decentral_renovated[Mt]",
                    "emissions_CO2_decentral_constructed[Mt]",
                    "emissions_CO2_decentral_unrenovated[Mt]",
                    "emissions_CO2_decentral_[Mt]"
                ]
            }
        },
        "string-input-0:2340:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "single-selection-0:2834:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2834:349":{
            "type":"string",
            "default":"dhg_energy-need",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"dhg_energy-need"
        },
        "string-input-1209:1176:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:2942:2910:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "string-input-1209:1176:553":{
            "type":"string",
            "default":"cal_clm_emissions",
            "description":"Enter Description",
            "example":"cal_clm_emissions"
        },
        "single-selection-0:3634:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:3431:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "fed_calibrated_appliances[TWh]",
                    "fed_calibrated_cooking[TWh]",
                    "fed_calibrated_hot-water[TWh]",
                    "fed_calibrated_lighting[TWh]",
                    "fed_calibrated_space-cooling[TWh]"
                ]
            }
        },
        "string-input-0:2941:2857:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:1130:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "single-selection-0:1819:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"buildings"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"buildings"
            }
        },
        "string-input-0:3634:357":{
            "type":"string",
            "default":".*energy-demand_(.*tial)_[c,l,a].*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_(.*tial)_[c,l,a].*\\[.*"
        },
        "string-input-0:3561:354":{
            "type":"string",
            "default":"million_m2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"million_m2"
        },
        "string-input-0:3430:2955:843":{
            "type":"string",
            "default":"EU calibration rate",
            "description":"Enter Description",
            "example":"EU calibration rate"
        },
        "column-filter-0:2834:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-need_residential_district_mfh[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-need_residential_district_mfh[GWh]",
                    "bld_energy-need_residential_district_sfh[GWh]",
                    "energy-need_hot-water[GWh]"
                ]
            }
        },
        "string-input-0:3213:2380:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "single-selection-4620:693:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3634:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-0:3534:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3101:3085:349":{
            "type":"string",
            "default":"energydemand-by-btype",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"energydemand-by-btype"
        },
        "single-selection-0:3436:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3099:3100:3991:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3430:2951:349":{
            "type":"string",
            "default":"fed_uncalibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_uncalibrated"
        },
        "string-input-0:1393:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "string-input-0:1393:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "boolean-input-0:3056:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1393:1150:446":{
            "type":"string",
            "default":"bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"bld_(emissions_.*residential_...)\\[.*"
        },
        "boolean-input-0:3843:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:3561:349":{
            "type":"string",
            "default":"bld_floor-area",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_floor-area"
        },
        "string-input-0:1393:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "country-list-0:3101:3086:4543":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"EU28+1"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"EU28+1"
            }
        },
        "string-input-0:1393:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "column-filter-0:3217:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand[GWh]",
                    "energy-demand_calibrated_[GWh]"
                ]
            }
        },
        "string-input-0:2939:2859:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3101:3085:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-4620:679:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3101:3085:357":{
            "type":"string",
            "default":".*ener.*-dem.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*ener.*-dem.*"
        },
        "string-input-807:558:553":{
            "type":"string",
            "default":"tec_costs",
            "description":"Enter Description",
            "example":"tec_costs"
        },
        "string-input-807:558:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:2783:444":{
            "type":"string",
            "default":"energy-nee_district",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-nee_district"
        },
        "boolean-input-0:3099:3104:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:3430:2951:357":{
            "type":"string",
            "default":"(.*)\\+.*dem.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*dem.*\\[.*"
        },
        "string-input-0:3757:445":{
            "type":"string",
            "default":"(.*-area)-acc\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"(.*-area)-acc\\[.*"
        },
        "string-input-0:3757:446":{
            "type":"string",
            "default":"(.*-area)-acc-prev\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"(.*-area)-acc-prev\\[.*"
        },
        "string-input-0:3216:1245":{
            "type":"string",
            "default":".*\\[GWh\\]",
            "description":"Enter Description",
            "example":".*\\[GWh\\]"
        },
        "single-selection-0:2847:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:1393:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-0:1393:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"cal_bld_emissions_non-residential_CH4[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "cal_bld_emissions_non-residential_CH4[Mt]",
                    "cal_bld_emissions_residential_CH4[Mt]",
                    "cal_bld_emissions_non-residential_CO2[Mt]",
                    "cal_bld_emissions_residential_CO2[Mt]",
                    "cal_bld_emissions_non-residential_N2O[Mt]",
                    "cal_bld_emissions_residential_N2O[Mt]"
                ]
            }
        },
        "string-input-0:2783:446":{
            "type":"string",
            "default":"bld_district-heating-share_dh.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"bld_district-heating-share_dh.*"
        },
        "string-input-0:3757:444":{
            "type":"string",
            "default":"bld",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"bld"
        },
        "string-input-0:2783:445":{
            "type":"string",
            "default":".*need(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":".*need(.*)\\[.*"
        },
        "string-input-0:3213:2380:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "string-input-0:3700:3690:843":{
            "type":"string",
            "default":"Space Cooling",
            "description":"Enter Description",
            "example":"Space Cooling"
        },
        "string-input-0:3213:2380:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "boolean-input-0:2942:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3562:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3216:1246":{
            "type":"string",
            "default":"TWh",
            "description":"Enter Description",
            "example":"TWh"
        },
        "string-input-0:3101:2808:3994:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3430:2951:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3213:2380:444":{
            "type":"string",
            "default":"energy-demand_calibrated",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_calibrated"
        },
        "single-selection-0:2783:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:3154:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3561:357":{
            "type":"string",
            "default":".*floor-area_.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*floor-area_.*"
        },
        "single-selection-0:3859:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:3101:3084:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3101:3083:357":{
            "type":"string",
            "default":".*heat.*tial.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*heat.*tial.*"
        },
        "boolean-input-4620:679:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3621:3601:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3101:3083:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:3628:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3621:3601:357":{
            "type":"string",
            "default":"bld_emissions.(..._.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_emissions.(..._.*)_.*\\[.*"
        },
        "boolean-input-0:3520:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-4620:693:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-0:3562:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"non-residential_floor-area-constructed_dep[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "non-residential_floor-area-constructed_dep[Mm2]",
                    "non-residential_floor-area-constructed_med[Mm2]",
                    "non-residential_floor-area-constructed_shl[Mm2]",
                    "residential_floor-area-constructed_dep[Mm2]",
                    "residential_floor-area-constructed_med[Mm2]",
                    "residential_floor-area-constructed_shl[Mm2]",
                    "non-residential_floor-area-demolished_dep[Mm2]",
                    "non-residential_floor-area-demolished_exi[Mm2]",
                    "non-residential_floor-area-demolished_med[Mm2]",
                    "non-residential_floor-area-demolished_shl[Mm2]",
                    "residential_floor-area-demolished_dep[Mm2]",
                    "residential_floor-area-demolished_exi[Mm2]",
                    "residential_floor-area-demolished_med[Mm2]",
                    "residential_floor-area-demolished_shl[Mm2]",
                    "non-residential_floor-area-renovated_dep[Mm2]",
                    "non-residential_floor-area-renovated_med[Mm2]",
                    "non-residential_floor-area-renovated_shl[Mm2]",
                    "residential_floor-area-renovated_dep[Mm2]",
                    "residential_floor-area-renovated_med[Mm2]",
                    "residential_floor-area-renovated_shl[Mm2]",
                    "non-residential_floor-area-unrenovated_exi[Mm2]",
                    "residential_floor-area-unrenovated_exi[Mm2]"
                ]
            }
        },
        "column-filter-0:2941:2895:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "education+Sum(cal_rate_[%])",
                    "health+Sum(cal_rate_[%])",
                    "hotels+Sum(cal_rate_[%])",
                    "offices+Sum(cal_rate_[%])",
                    "other+Sum(cal_rate_[%])",
                    "trade+Sum(cal_rate_[%])",
                    "mfh+Sum(cal_rate_[%])",
                    "sfh+Sum(cal_rate_[%])"
                ]
            }
        },
        "string-input-1209:1177:553":{
            "type":"string",
            "default":"fts_clm_ems-after-2050",
            "description":"Enter Description",
            "example":"fts_clm_ems-after-2050"
        },
        "string-input-4620:695:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-1209:1177:555":{
            "type":"string",
            "default":"lever_ems-after-2050",
            "description":"Enter Description",
            "example":"lever_ems-after-2050"
        },
        "string-input-0:3841:3840:357":{
            "type":"string",
            "default":".*capex.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*capex.*"
        },
        "column-filter-0:1393:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-4620:695:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "boolean-input-0:3154:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-4620:695:1150:446":{
            "type":"string",
            "default":"lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_diet_(.*)\\[kcal]"
        },
        "string-input-0:3841:3840:354":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"unit"
        },
        "string-input-0:1594:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-0:1594:1599":{
            "type":"string",
            "default":"parameter_name",
            "description":"Enter Description",
            "example":"parameter_name"
        },
        "single-selection-0:2783:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:3570:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2783:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "string-input-0:1594:1596":{
            "type":"string",
            "default":"bld_building-(.*)_(.*-.*-.*)(\\[.*)",
            "description":"Enter Description",
            "example":"bld_building-(.*)_(.*-.*-.*)(\\[.*)"
        },
        "string-input-0:724:460":{
            "type":"string",
            "default":"num",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"num"
        },
        "single-selection-0:3154:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:3106:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:1014:644":{
            "type":"string",
            "default":"1000m2",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"1000m2"
        },
        "single-selection-0:722:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:1014:643":{
            "type":"string",
            "default":".*floor-area_residential.*",
            "description":"Pattern selecting the fixed column. The pattern should return only one column.  \nExamples: \"sector_demand_.*\"",
            "example":".*floor-area_residential.*"
        },
        "string-input-0:1014:642":{
            "type":"string",
            "default":".*mix_(...)_.*\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. ",
            "example":".*mix_(...)_.*\\[.*"
        },
        "string-input-0:1014:641":{
            "type":"string",
            "default":"bld_floor-area_residential",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"bld_floor-area_residential"
        },
        "column-filter-0:2940:2870:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "Years",
                    "Years_number",
                    "use",
                    "energy-demand[GWh]",
                    "cal_rate_[%]",
                    "technology",
                    "energycarrier"
                ]
            }
        },
        "string-input-0:2063:1599":{
            "type":"string",
            "default":"subsector",
            "description":"Enter Description",
            "example":"subsector"
        },
        "column-filter-0:3619:2987:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:2063:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-0:1393:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "string-input-0:1393:1151:445":{
            "type":"string",
            "default":"cal_bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_bld_(emissions_.*residential_...)\\[.*"
        },
        "string-input-0:3757:460":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mm2"
        },
        "single-selection-0:3213:2231:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "column-filter-0:2942:2911:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:1393:1151:446":{
            "type":"string",
            "default":"bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"bld_(emissions_.*residential_...)\\[.*"
        },
        "column-filter-0:3101:2808:535":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Select the columns for data selection",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energydemand-by-sector&ec[TWh]",
                    "energydemand-by-ec[TWh]",
                    "energydemand-by-btype[TWh]"
                ]
            }
        },
        "string-input-0:3101:3083:349":{
            "type":"string",
            "default":"energydemand-by-sector&ec",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"energydemand-by-sector&ec"
        },
        "string-input-0:2063:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)(\\[.*)"
        },
        "column-selection-0:2063:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"buildingtype"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"buildingtype"
            }
        },
        "column-filter-0:3528:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions-CH4_gas-ff-natural_residential_cooking[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions-CH4_gas-ff-natural_residential_cooking[Mt]",
                    "emissions-CO2_gas-ff-natural_residential_cooking[Mt]",
                    "emissions-N2O_gas-ff-natural_residential_cooking[Mt]",
                    "emissions-CH4_solid-bio_residential_cooking[Mt]",
                    "emissions-CO2_solid-bio_residential_cooking[Mt]",
                    "emissions-N2O_solid-bio_residential_cooking[Mt]",
                    "emissions-CH4_solid-ff-coal_residential_cooking[Mt]",
                    "emissions-CO2_solid-ff-coal_residential_cooking[Mt]",
                    "emissions-N2O_solid-ff-coal_residential_cooking[Mt]",
                    "emissions-CH4_gas-ff-natural_non-residential_hot-water[Mt]",
                    "emissions-CO2_gas-ff-natural_non-residential_hot-water[Mt]",
                    "emissions-N2O_gas-ff-natural_non-residential_hot-water[Mt]",
                    "emissions-CH4_gas-ff-natural_residential_hot-water[Mt]",
                    "emissions-CO2_gas-ff-natural_residential_hot-water[Mt]",
                    "emissions-N2O_gas-ff-natural_residential_hot-water[Mt]",
                    "emissions-CH4_heat-solar_non-residential_hot-water[Mt]",
                    "emissions-CO2_heat-solar_non-residential_hot-water[Mt]",
                    "emissions-N2O_heat-solar_non-residential_hot-water[Mt]",
                    "emissions-CH4_heat-solar_residential_hot-water[Mt]",
                    "emissions-CO2_heat-solar_residential_hot-water[Mt]",
                    "emissions-N2O_heat-solar_residential_hot-water[Mt]",
                    "emissions-CH4_liquid-ff-heatingoil_non-residential_hot-water[Mt]",
                    "emissions-CO2_liquid-ff-heatingoil_non-residential_hot-water[Mt]",
                    "emissions-N2O_liquid-ff-heatingoil_non-residential_hot-water[Mt]",
                    "emissions-CH4_liquid-ff-heatingoil_residential_hot-water[Mt]",
                    "emissions-CO2_liquid-ff-heatingoil_residential_hot-water[Mt]",
                    "emissions-N2O_liquid-ff-heatingoil_residential_hot-water[Mt]",
                    "emissions-CH4_solid-bio_non-residential_hot-water[Mt]",
                    "emissions-CO2_solid-bio_non-residential_hot-water[Mt]",
                    "emissions-N2O_solid-bio_non-residential_hot-water[Mt]",
                    "emissions-CH4_solid-bio_residential_hot-water[Mt]",
                    "emissions-CO2_solid-bio_residential_hot-water[Mt]",
                    "emissions-N2O_solid-bio_residential_hot-water[Mt]",
                    "emissions-CH4_solid-ff-coal_residential_hot-water[Mt]",
                    "emissions-CO2_solid-ff-coal_residential_hot-water[Mt]",
                    "emissions-N2O_solid-ff-coal_residential_hot-water[Mt]",
                    "emissions-CH4_solid-waste_non-residential_hot-water[Mt]",
                    "emissions-CO2_solid-waste_non-residential_hot-water[Mt]",
                    "emissions-N2O_solid-waste_non-residential_hot-water[Mt]",
                    "emissions-CH4_gas-ff-natural_non-residential_space-cooling[Mt]",
                    "emissions-CO2_gas-ff-natural_non-residential_space-cooling[Mt]",
                    "emissions-N2O_gas-ff-natural_non-residential_space-cooling[Mt]",
                    "emissions-CH4_gas-bio_non-residential_hot-water[Mt]",
                    "emissions-CO2_gas-bio_non-residential_hot-water[Mt]",
                    "emissions-N2O_gas-bio_non-residential_hot-water[Mt]",
                    "emissions-CH4_gas-bio_non-residential_space-cooling[Mt]",
                    "emissions-CO2_gas-bio_non-residential_space-cooling[Mt]",
                    "emissions-N2O_gas-bio_non-residential_space-cooling[Mt]",
                    "emissions-CH4_heat-ambient_non-residential_hot-water[Mt]",
                    "emissions-CO2_heat-ambient_non-residential_hot-water[Mt]",
                    "emissions-N2O_heat-ambient_non-residential_hot-water[Mt]",
                    "emissions-CH4_heat-ambient_residential_hot-water[Mt]",
                    "emissions-CO2_heat-ambient_residential_hot-water[Mt]",
                    "emissions-N2O_heat-ambient_residential_hot-water[Mt]",
                    "emissions-CH4_liquid-bio-diesel_non-residential_hot-water[Mt]",
                    "emissions-CO2_liquid-bio-diesel_non-residential_hot-water[Mt]",
                    "emissions-N2O_liquid-bio-diesel_non-residential_hot-water[Mt]",
                    "emissions-CH4_gas-bio_residential_cooking[Mt]",
                    "emissions-CO2_gas-bio_residential_cooking[Mt]",
                    "emissions-N2O_gas-bio_residential_cooking[Mt]",
                    "emissions-CH4_gas-bio_residential_hot-water[Mt]",
                    "emissions-CO2_gas-bio_residential_hot-water[Mt]",
                    "emissions-N2O_gas-bio_residential_hot-water[Mt]",
                    "emissions-CH4_solid-ff-coal_non-residential_hot-water[Mt]",
                    "emissions-CO2_solid-ff-coal_non-residential_hot-water[Mt]",
                    "emissions-N2O_solid-ff-coal_non-residential_hot-water[Mt]",
                    "emissions-CH4_liquid-bio-diesel_residential_hot-water[Mt]",
                    "emissions-CO2_liquid-bio-diesel_residential_hot-water[Mt]",
                    "emissions-N2O_liquid-bio-diesel_residential_hot-water[Mt]",
                    "emissions-CH4_liquid-bio-gasoline_non-residential_hot-water[Mt]",
                    "emissions-CO2_liquid-bio-gasoline_non-residential_hot-water[Mt]",
                    "emissions-N2O_liquid-bio-gasoline_non-residential_hot-water[Mt]",
                    "emissions-CH4_liquid-bio-gasoline_residential_hot-water[Mt]",
                    "emissions-CO2_liquid-bio-gasoline_residential_hot-water[Mt]",
                    "emissions-N2O_liquid-bio-gasoline_residential_hot-water[Mt]",
                    "emissions-CH4_heat-geothermal_non-residential_hot-water[Mt]",
                    "emissions-CO2_heat-geothermal_non-residential_hot-water[Mt]",
                    "emissions-N2O_heat-geothermal_non-residential_hot-water[Mt]",
                    "emissions-CH4_solid-waste_residential_hot-water[Mt]",
                    "emissions-CO2_solid-waste_residential_hot-water[Mt]",
                    "emissions-N2O_solid-waste_residential_hot-water[Mt]"
                ]
            }
        },
        "string-input-0:3431:2923:843":{
            "type":"string",
            "default":"EU calibration rate",
            "description":"Enter Description",
            "example":"EU calibration rate"
        },
        "column-selection-0:1832:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3700:3584:843":{
            "type":"string",
            "default":"Cooking",
            "description":"Enter Description",
            "example":"Cooking"
        },
        "string-input-0:1596:1599":{
            "type":"string",
            "default":"renovationcategory",
            "description":"Enter Description",
            "example":"renovationcategory"
        },
        "string-input-4620:680:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:3213:2231:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-0:1596:1597":{
            "type":"string",
            "default":"$4",
            "description":"Enter Description",
            "example":"$4"
        },
        "single-selection-0:1130:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"buildings"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"buildings"
            }
        },
        "string-input-0:3213:2231:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "string-input-0:2078:1245":{
            "type":"string",
            "default":".*emission.*",
            "description":"Enter Description",
            "example":".*emission.*"
        },
        "string-input-0:3213:2231:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "string-input-0:2078:1246":{
            "type":"string",
            "default":"Mt/TWh",
            "description":"Enter Description",
            "example":"Mt/TWh"
        },
        "string-input-0:1596:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)-(.*)_(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)-(.*)_(.*)-(.*)(\\[.*)"
        },
        "string-input-0:3841:3496:349":{
            "type":"string",
            "default":"reno",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"reno"
        },
        "string-input-0:3626:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "single-selection-0:3213:2380:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3213:2232:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:2081:1599":{
            "type":"string",
            "default":"gas",
            "description":"Enter Description",
            "example":"gas"
        },
        "single-selection-1213:768":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"1.3 Technology costs"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"1.3 Technology costs"
            }
        },
        "column-filter-0:3626:2961:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_energy-demand_non-sh_gas-bio[TWh]",
                    "bld_energy-demand_non-sh_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-sh_heat-ambient[TWh]",
                    "bld_energy-demand_non-sh_heat-geothermal[TWh]",
                    "bld_energy-demand_non-sh_heat-solar[TWh]",
                    "bld_energy-demand_non-sh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-sh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-sh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-sh_solid-bio[TWh]",
                    "bld_energy-demand_non-sh_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-sh_solid-waste[TWh]",
                    "bld_energy-demand_non-sh_renewables[TWh]"
                ]
            }
        },
        "string-input-4620:680:1146:444":{
            "type":"string",
            "default":"lfs",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs"
        },
        "string-input-0:2339:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)_(.*)_(.*)(\\[.*)"
        },
        "string-input-0:2081:1597":{
            "type":"string",
            "default":"$3",
            "description":"Enter Description",
            "example":"$3"
        },
        "string-input-0:3528:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-4620:680:1146:446":{
            "type":"string",
            "default":"lfs_(.*)\\[1000m2]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_(.*)\\[1000m2]"
        },
        "string-input-4620:680:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-0:2339:1597":{
            "type":"string",
            "default":"$4",
            "description":"Enter Description",
            "example":"$4"
        },
        "string-input-0:2081:1596":{
            "type":"string",
            "default":"(.*)-(.*)_(.*)_(.*)\\[.*",
            "description":"Enter Description",
            "example":"(.*)-(.*)_(.*)_(.*)\\[.*"
        },
        "string-input-0:3528:357":{
            "type":"string",
            "default":".*emissions.(.*_.*)_.*ial_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions.(.*_.*)_.*ial_.*\\[.*"
        },
        "string-input-4620:695:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "string-input-0:3099:2794:843":{
            "type":"string",
            "default":"Floor area",
            "description":"Enter Description",
            "example":"Floor area"
        },
        "string-input-0:2339:1599":{
            "type":"string",
            "default":"subsector",
            "description":"Enter Description",
            "example":"subsector"
        },
        "string-input-0:3562:357":{
            "type":"string",
            "default":".*_(floor-area-.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*_(floor-area-.*)\\[.*]"
        },
        "boolean-input-0:2715:2505:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:1684:1599":{
            "type":"string",
            "default":"renovationcategory",
            "description":"Enter Description",
            "example":"renovationcategory"
        },
        "string-input-0:1684:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "single-selection-1213:767":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"1.3 Technology"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"1.3 Technology"
            }
        },
        "string-input-0:1684:1596":{
            "type":"string",
            "default":"(.*)_(.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)"
        },
        "column-filter-0:3534:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-CH4_gas-bio_non-space-heating[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-CH4_gas-bio_non-space-heating[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_non-space-heating[Mt]",
                    "bld_emissions-CH4_heat-ambient_non-space-heating[Mt]",
                    "bld_emissions-CH4_heat-geothermal_non-space-heating[Mt]",
                    "bld_emissions-CH4_heat-solar_non-space-heating[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_non-space-heating[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_non-space-heating[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_non-space-heating[Mt]",
                    "bld_emissions-CH4_solid-bio_non-space-heating[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_non-space-heating[Mt]",
                    "bld_emissions-CH4_solid-waste_non-space-heating[Mt]",
                    "bld_emissions-CO2_gas-bio_non-space-heating[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_non-space-heating[Mt]",
                    "bld_emissions-CO2_heat-ambient_non-space-heating[Mt]",
                    "bld_emissions-CO2_heat-geothermal_non-space-heating[Mt]",
                    "bld_emissions-CO2_heat-solar_non-space-heating[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_non-space-heating[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_non-space-heating[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_non-space-heating[Mt]",
                    "bld_emissions-CO2_solid-bio_non-space-heating[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_non-space-heating[Mt]",
                    "bld_emissions-CO2_solid-waste_non-space-heating[Mt]",
                    "bld_emissions-N2O_gas-bio_non-space-heating[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_non-space-heating[Mt]",
                    "bld_emissions-N2O_heat-ambient_non-space-heating[Mt]",
                    "bld_emissions-N2O_heat-geothermal_non-space-heating[Mt]",
                    "bld_emissions-N2O_heat-solar_non-space-heating[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_non-space-heating[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_non-space-heating[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_non-space-heating[Mt]",
                    "bld_emissions-N2O_solid-bio_non-space-heating[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_non-space-heating[Mt]",
                    "bld_emissions-N2O_solid-waste_non-space-heating[Mt]",
                    "bld_emissions-CH4_gas-bio_space-heating[Mt]",
                    "bld_emissions-CH4_gas-ff-natural_space-heating[Mt]",
                    "bld_emissions-CH4_heat-ambient_space-heating[Mt]",
                    "bld_emissions-CH4_heat-geothermal_space-heating[Mt]",
                    "bld_emissions-CH4_heat-solar_space-heating[Mt]",
                    "bld_emissions-CH4_liquid-bio-diesel_space-heating[Mt]",
                    "bld_emissions-CH4_liquid-bio-gasoline_space-heating[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil_space-heating[Mt]",
                    "bld_emissions-CH4_solid-bio_space-heating[Mt]",
                    "bld_emissions-CH4_solid-ff-coal_space-heating[Mt]",
                    "bld_emissions-CH4_solid-waste_space-heating[Mt]",
                    "bld_emissions-CO2_gas-bio_space-heating[Mt]",
                    "bld_emissions-CO2_gas-ff-natural_space-heating[Mt]",
                    "bld_emissions-CO2_heat-ambient_space-heating[Mt]",
                    "bld_emissions-CO2_heat-geothermal_space-heating[Mt]",
                    "bld_emissions-CO2_heat-solar_space-heating[Mt]",
                    "bld_emissions-CO2_liquid-bio-diesel_space-heating[Mt]",
                    "bld_emissions-CO2_liquid-bio-gasoline_space-heating[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil_space-heating[Mt]",
                    "bld_emissions-CO2_solid-bio_space-heating[Mt]",
                    "bld_emissions-CO2_solid-ff-coal_space-heating[Mt]",
                    "bld_emissions-CO2_solid-waste_space-heating[Mt]",
                    "bld_emissions-N2O_gas-bio_space-heating[Mt]",
                    "bld_emissions-N2O_gas-ff-natural_space-heating[Mt]",
                    "bld_emissions-N2O_heat-ambient_space-heating[Mt]",
                    "bld_emissions-N2O_heat-geothermal_space-heating[Mt]",
                    "bld_emissions-N2O_heat-solar_space-heating[Mt]",
                    "bld_emissions-N2O_liquid-bio-diesel_space-heating[Mt]",
                    "bld_emissions-N2O_liquid-bio-gasoline_space-heating[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil_space-heating[Mt]",
                    "bld_emissions-N2O_solid-bio_space-heating[Mt]",
                    "bld_emissions-N2O_solid-ff-coal_space-heating[Mt]",
                    "bld_emissions-N2O_solid-waste_space-heating[Mt]"
                ]
            }
        },
        "boolean-input-0:3842:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:724:445":{
            "type":"string",
            "default":".*appliance-new-ratio_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":".*appliance-new-ratio_(.*)\\[.*"
        },
        "single-selection-4620:693:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-0:724:444":{
            "type":"string",
            "default":"appliance-new",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"appliance-new"
        },
        "disabled-4620:693:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "column-selection-0:3450:2667:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"subsector"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"subsector"
            }
        },
        "string-input-0:724:446":{
            "type":"string",
            "default":".*appliance-own_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":".*appliance-own_(.*)\\[.*"
        },
        "string-input-0:3841:3496:357":{
            "type":"string",
            "default":".*reno.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*reno.*"
        },
        "boolean-input-0:1393:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3528:349":{
            "type":"string",
            "default":"bld_emissions_non-space-heating",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_non-space-heating"
        },
        "string-input-1209:1177:561":{
            "type":"string",
            "default":"lever_ems-after-2050",
            "description":"Enter Description",
            "example":"lever_ems-after-2050"
        },
        "string-input-1209:1177:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3574:3559:843":{
            "type":"string",
            "default":"floor area by renovation",
            "description":"Enter Description",
            "example":"floor area by renovation"
        },
        "string-input-0:3562:349":{
            "type":"string",
            "default":"bld",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld"
        },
        "string-input-0:3841:3496:354":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"unit"
        },
        "single-selection-0:3621:3601:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-807:557:553":{
            "type":"string",
            "default":"ots_tec_fuel_prices",
            "description":"Enter Description",
            "example":"ots_tec_fuel_prices"
        },
        "string-input-807:557:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3634:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_appliances_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_non-residential_lighting_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_cooking_electricity[TWh]",
                    "bld_energy-demand_residential_lighting_electricity[TWh]"
                ]
            }
        },
        "string-input-0:3562:354":{
            "type":"string",
            "default":"million_m2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"million_m2"
        },
        "string-input-0:3621:3601:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "string-input-0:2939:2864:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3436:2914:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "column-filter-0:3571:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Sum(bld_floor-area_non-residential_education[million_m2])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Sum(bld_floor-area_non-residential_education[million_m2])",
                    "Sum(bld_floor-area_non-residential_health[million_m2])",
                    "Sum(bld_floor-area_non-residential_hotels[million_m2])",
                    "Sum(bld_floor-area_non-residential_offices[million_m2])",
                    "Sum(bld_floor-area_non-residential_other[million_m2])",
                    "Sum(bld_floor-area_non-residential_trade[million_m2])",
                    "Sum(bld_floor-area_residential_mfh[million_m2])",
                    "Sum(bld_floor-area_residential_sfh[million_m2])"
                ]
            }
        },
        "string-input-0:3486:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3486:357":{
            "type":"string",
            "default":".*emissions_(.*_.*ial).*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions_(.*_.*ial).*\\[.*"
        },
        "single-selection-0:3016:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:652:349":{
            "type":"string",
            "default":"energy-demand_residential_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"energy-demand_residential_appliances"
        },
        "agg-method-0:3101:2808:4544":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2789:444":{
            "type":"string",
            "default":"energy-need_decentral",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-need_decentral"
        },
        "string-input-0:2789:445":{
            "type":"string",
            "default":".*need(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":".*need(.*)\\[.*"
        },
        "string-input-0:2789:446":{
            "type":"string",
            "default":"bld_decentral-heating-share_dh.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"bld_decentral-heating-share_dh.*"
        },
        "column-filter-4620:695:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3099:3809:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-503:559:561":{
            "type":"string",
            "default":"lever_pkm",
            "description":"Enter Description",
            "example":"lever_pkm"
        },
        "string-input-503:559:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3842:354":{
            "type":"string",
            "default":"MEUR",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"MEUR"
        },
        "string-input-0:3842:357":{
            "type":"string",
            "default":".*reno-...-(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*reno-...-(.*)\\[.*"
        },
        "column-filter-0:3436:2914:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking+ColumnValues",
                    "hot-water+ColumnValues",
                    "lighting+ColumnValues",
                    "space-cooling+ColumnValues"
                ]
            }
        },
        "string-input-444:536:561":{
            "type":"string",
            "default":"lever_district-heating-share",
            "description":"Enter Description",
            "example":"lever_district-heating-share"
        },
        "string-input-444:536:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3628:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-waste_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-geothermal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-waste_all-tech[TWh]"
                ]
            }
        },
        "column-filter-0:2540:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-need_residential_district_mfh[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-need_residential_district_mfh[GWh]",
                    "bld_energy-need_residential_district_sfh[GWh]"
                ]
            }
        },
        "string-input-0:3486:349":{
            "type":"string",
            "default":"bld_emissions_space-heating",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_space-heating"
        },
        "column-filter-4620:680:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:724:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-0:2793:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-0:3099:3993:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "Austria",
                    "Belgium",
                    "Bulgaria",
                    "Croatia",
                    "Cyprus",
                    "Czech Republic",
                    "Denmark",
                    "Estonia",
                    "Finland",
                    "France",
                    "Germany",
                    "Greece",
                    "Hungary",
                    "Ireland",
                    "Italy",
                    "Latvia",
                    "Lithuania",
                    "Luxembourg",
                    "Malta",
                    "Netherlands",
                    "Poland",
                    "Portugal",
                    "Romania",
                    "Slovakia",
                    "Slovenia",
                    "Spain",
                    "Sweden",
                    "Switzerland",
                    "United Kingdom"
                ]
            }
        },
        "string-input-0:652:357":{
            "type":"string",
            "default":".*energy-demand.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand.*"
        },
        "string-input-0:3619:2990:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "country-list-0:3099:3100:4543":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"EU28+1"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"EU28+1"
            }
        },
        "string-input-0:652:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3619:2990:357":{
            "type":"string",
            "default":".*energy-demand_.*_(.*_.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_.*_(.*_.*)\\[.*"
        },
        "string-input-0:2847:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-0:3619:2990:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3431:349":{
            "type":"string",
            "default":"fed_calibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_calibrated"
        },
        "double-input-0:3158:2009:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "column-filter-0:3101:2808:3991:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-4620:679:444":{
            "type":"string",
            "default":"lfs",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs"
        },
        "single-selection-0:3571:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:680:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:3106:3218:444":{
            "type":"string",
            "default":"standardized_subsector",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"standardized_subsector"
        },
        "agg-method-0:3101:3086:4544":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:679:445":{
            "type":"string",
            "default":"cal_lfs_travel_(.*)\\[pkm]",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_travel_(.*)\\[pkm]"
        },
        "boolean-input-0:3562:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3213:2231:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-0:3106:3218:446":{
            "type":"string",
            "default":"(.*)_S.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"(.*)_S.*"
        },
        "string-input-4620:679:446":{
            "type":"string",
            "default":"lfs_(.*)\\[pkm]",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_(.*)\\[pkm]"
        },
        "string-input-0:3842:349":{
            "type":"string",
            "default":"bld_capex_reno",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_capex_reno"
        },
        "string-input-0:3106:3218:445":{
            "type":"string",
            "default":"(.*)\\+.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"(.*)\\+.*"
        },
        "string-input-0:2939:2868:843":{
            "type":"string",
            "default":"Residential",
            "description":"Enter Description",
            "example":"Residential"
        },
        "string-input-0:3433:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "string-input-0:2942:2911:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "boolean-input-4620:679:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-0:3391:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "double-input-0:1638:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "column-filter-0:3101:3086:3991:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "column-filter-0:3099:3103:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"1990+renovated-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "1990+renovated-area[Mm2]",
                    "1991+renovated-area[Mm2]",
                    "1992+renovated-area[Mm2]",
                    "1993+renovated-area[Mm2]",
                    "1994+renovated-area[Mm2]",
                    "1995+renovated-area[Mm2]"
                ]
            }
        },
        "column-filter-0:3532:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-waste_all-tech[Mt]"
                ]
            }
        },
        "string-input-0:1713:1596":{
            "type":"string",
            "default":"(.*)_(.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)"
        },
        "string-input-4620:693:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "column-filter-0:3623:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-need_renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-need_renovated[GWh]",
                    "energy-need_constructed[GWh]",
                    "energy-need_unrenovated[GWh]",
                    "energy-need[GWh]",
                    "energy-need_district__renovated[GWh]",
                    "energy-need_district__constructed[GWh]",
                    "energy-need_district__unrenovated[GWh]",
                    "energy-need_district_[GWh]",
                    "energy-need_decentral__renovated[GWh]",
                    "energy-need_decentral__constructed[GWh]",
                    "energy-need_decentral__unrenovated[GWh]",
                    "energy-need_decentral_[GWh]"
                ]
            }
        },
        "string-input-0:1713:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-4620:693:1151:445":{
            "type":"string",
            "default":"cal_lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_fwaste_(.*)\\[kcal]"
        },
        "string-input-4620:693:1151:446":{
            "type":"string",
            "default":"lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_fwaste_(.*)\\[kcal]"
        },
        "boolean-input-0:3620:3036:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:1713:1599":{
            "type":"string",
            "default":"parameter-name",
            "description":"Enter Description",
            "example":"parameter-name"
        },
        "string-input-503:560:553":{
            "type":"string",
            "default":"fts_lfs_pop",
            "description":"Enter Description",
            "example":"fts_lfs_pop"
        },
        "string-input-0:2721:1017:354":{
            "type":"string",
            "default":"Mm²",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm²"
        },
        "string-input-0:2721:1017:357":{
            "type":"string",
            "default":"bld_floor-area_residential_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_floor-area_residential_.*\\[.*"
        },
        "string-input-0:3431:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3431:357":{
            "type":"string",
            "default":"(.*)\\+.*calibrated.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*calibrated.*\\[.*"
        },
        "single-selection-0:3056:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:3431:2906:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances[TWh]",
                    "cooking[TWh]",
                    "hot-water[TWh]",
                    "lighting[TWh]",
                    "space-cooling[TWh]"
                ]
            }
        },
        "string-input-0:1393:444":{
            "type":"string",
            "default":"cal_bld_factor",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_bld_factor"
        },
        "column-filter-0:3430:2952:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "fed_calibrated_appliances[TWh]",
                    "fed_calibrated_cooking[TWh]",
                    "fed_calibrated_hot-water[TWh]",
                    "fed_calibrated_lighting[TWh]",
                    "fed_calibrated_space-cooling[TWh]"
                ]
            }
        },
        "string-input-503:560:555":{
            "type":"string",
            "default":"lever_pop",
            "description":"Enter Description",
            "example":"lever_pop"
        },
        "column-filter-0:3620:3042:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-0:1393:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-503:558:553":{
            "type":"string",
            "default":"fts_lfs_paperpack",
            "description":"Enter Description",
            "example":"fts_lfs_paperpack"
        },
        "string-input-503:558:555":{
            "type":"string",
            "default":"lever_paperpack",
            "description":"Enter Description",
            "example":"lever_paperpack"
        },
        "boolean-input-0:3506:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3619:2987:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1393:445":{
            "type":"string",
            "default":"cal_bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_bld_(emissions_.*residential_...)\\[.*"
        },
        "column-filter-0:2640:2231:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:1393:446":{
            "type":"string",
            "default":"bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"bld_(emissions_.*residential_...)\\[.*"
        },
        "boolean-input-0:3101:3085:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-4620:680:1151:446":{
            "type":"string",
            "default":"lfs_(.*)\\[1000m2]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_(.*)\\[1000m2]"
        },
        "string-input-503:560:561":{
            "type":"string",
            "default":"lever_pop",
            "description":"Enter Description",
            "example":"lever_pop"
        },
        "string-input-4620:680:1151:445":{
            "type":"string",
            "default":"cal_lfs_area_(.*)\\[1000m2]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_area_(.*)\\[1000m2]"
        },
        "string-input-503:560:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3868:3866:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-waste_all-tech[Mt]"
                ]
            }
        },
        "string-input-4620:680:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "boolean-input-0:1393:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-0:3532:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:3865:3518:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:2847:446":{
            "type":"string",
            "default":"emissions_(...)_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"emissions_(...)_(.*)\\[.*"
        },
        "boolean-input-0:3570:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:2847:445":{
            "type":"string",
            "default":"(...)",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"(...)"
        },
        "string-input-0:2847:444":{
            "type":"string",
            "default":"emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions"
        },
        "string-input-0:3501:3495:349":{
            "type":"string",
            "default":"energy",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"energy"
        },
        "column-filter-0:3016:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_education_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_education_electricity[TWh]",
                    "bld_energy-demand_non-residential_health_electricity[TWh]",
                    "bld_energy-demand_non-residential_hotels_electricity[TWh]",
                    "bld_energy-demand_non-residential_offices_electricity[TWh]",
                    "bld_energy-demand_non-residential_other_electricity[TWh]",
                    "bld_energy-demand_non-residential_trade_electricity[TWh]",
                    "bld_energy-demand_residential_mfh_electricity[TWh]",
                    "bld_energy-demand_residential_sfh_electricity[TWh]",
                    "bld_energy-demand_non-residential_education_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_health_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_other_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-bio[TWh]",
                    "bld_energy-demand_residential_mfh_gas-bio[TWh]",
                    "bld_energy-demand_residential_sfh_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_education_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_health_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_other_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_mfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_sfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_education_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_health_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_other_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-ambient[TWh]",
                    "bld_energy-demand_residential_mfh_heat-ambient[TWh]",
                    "bld_energy-demand_residential_sfh_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_education_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_health_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_other_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_mfh_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_sfh_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_education_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_health_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_other_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-solar[TWh]",
                    "bld_energy-demand_residential_mfh_heat-solar[TWh]",
                    "bld_energy-demand_residential_sfh_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_education_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_health_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_other_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-bio[TWh]",
                    "bld_energy-demand_residential_mfh_solid-bio[TWh]",
                    "bld_energy-demand_residential_sfh_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_education_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_health_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_other_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_mfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_sfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_education_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_health_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_other_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-waste[TWh]",
                    "bld_energy-demand_residential_mfh_solid-waste[TWh]",
                    "bld_energy-demand_residential_sfh_solid-waste[TWh]"
                ]
            }
        },
        "column-selection-0:3146:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "boolean-input-0:3213:2231:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-0:3213:2380:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-0:2721:1015:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3572:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:693:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-0:3621:3601:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-CH4_non-residential_appliances[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-CH4_non-residential_appliances[Mt]",
                    "bld_emissions-CH4_residential_appliances[Mt]",
                    "bld_emissions-CO2_non-residential_appliances[Mt]",
                    "bld_emissions-CO2_residential_appliances[Mt]",
                    "bld_emissions-N2O_non-residential_appliances[Mt]",
                    "bld_emissions-N2O_residential_appliances[Mt]",
                    "bld_emissions_CH4_non-residential_education[Mt]",
                    "bld_emissions_CH4_non-residential_health[Mt]",
                    "bld_emissions_CH4_non-residential_hotels[Mt]",
                    "bld_emissions_CH4_non-residential_offices[Mt]",
                    "bld_emissions_CH4_non-residential_other[Mt]",
                    "bld_emissions_CH4_non-residential_trade[Mt]",
                    "bld_emissions_CH4_residential_mfh[Mt]",
                    "bld_emissions_CH4_residential_sfh[Mt]",
                    "bld_emissions_CO2_non-residential_education[Mt]",
                    "bld_emissions_CO2_non-residential_health[Mt]",
                    "bld_emissions_CO2_non-residential_hotels[Mt]",
                    "bld_emissions_CO2_non-residential_offices[Mt]",
                    "bld_emissions_CO2_non-residential_other[Mt]",
                    "bld_emissions_CO2_non-residential_trade[Mt]",
                    "bld_emissions_CO2_residential_mfh[Mt]",
                    "bld_emissions_CO2_residential_sfh[Mt]",
                    "bld_emissions_N2O_non-residential_education[Mt]",
                    "bld_emissions_N2O_non-residential_health[Mt]",
                    "bld_emissions_N2O_non-residential_hotels[Mt]",
                    "bld_emissions_N2O_non-residential_offices[Mt]",
                    "bld_emissions_N2O_non-residential_other[Mt]",
                    "bld_emissions_N2O_non-residential_trade[Mt]",
                    "bld_emissions_N2O_residential_mfh[Mt]",
                    "bld_emissions_N2O_residential_sfh[Mt]"
                ]
            }
        },
        "boolean-input-0:3174:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3085:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:2106:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "boolean-input-0:1832:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:3101:3083:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_heat_residential_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_heat_residential_electricity[TWh]",
                    "bld_energy-demand_heat_residential_gas-bio[TWh]",
                    "bld_energy-demand_heat_residential_gas-ff-natural[TWh]",
                    "bld_energy-demand_heat_residential_heat-ambient[TWh]",
                    "bld_energy-demand_heat_residential_heat-geothermal[TWh]",
                    "bld_energy-demand_heat_residential_heat-solar[TWh]",
                    "bld_energy-demand_heat_residential_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_heat_residential_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_heat_residential_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_heat_residential_solid-bio[TWh]",
                    "bld_energy-demand_heat_residential_solid-ff-coal[TWh]",
                    "bld_energy-demand_heat_residential_solid-waste[TWh]",
                    "bld_energy-demand_heat_non-residential_electricity[TWh]",
                    "bld_energy-demand_heat_non-residential_gas-bio[TWh]",
                    "bld_energy-demand_heat_non-residential_gas-ff-natural[TWh]",
                    "bld_energy-demand_heat_non-residential_heat-ambient[TWh]",
                    "bld_energy-demand_heat_non-residential_heat-geothermal[TWh]",
                    "bld_energy-demand_heat_non-residential_heat-solar[TWh]",
                    "bld_energy-demand_heat_non-residential_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_heat_non-residential_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_heat_non-residential_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_heat_non-residential_solid-bio[TWh]",
                    "bld_energy-demand_heat_non-residential_solid-ff-coal[TWh]",
                    "bld_energy-demand_heat_non-residential_solid-waste[TWh]"
                ]
            }
        },
        "boolean-input-0:1602:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "single-selection-0:2420:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2938:2889:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:3430:2951:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:2942:2951:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:3570:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Sum(non-residential_education+floor-area[Mm2])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Sum(non-residential_education+floor-area[Mm2])",
                    "Sum(non-residential_health+floor-area[Mm2])",
                    "Sum(non-residential_hotels+floor-area[Mm2])",
                    "Sum(non-residential_offices+floor-area[Mm2])",
                    "Sum(non-residential_other+floor-area[Mm2])",
                    "Sum(non-residential_trade+floor-area[Mm2])",
                    "Sum(residential_mfh+floor-area[Mm2])",
                    "Sum(residential_sfh+floor-area[Mm2])"
                ]
            }
        },
        "string-input-0:3501:3495:357":{
            "type":"string",
            "default":".*energy.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy.*"
        },
        "single-selection-0:3464:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-444:537:561":{
            "type":"string",
            "default":"lever_heatcool-efficiency",
            "description":"Enter Description",
            "example":"lever_heatcool-efficiency"
        },
        "string-input-444:537:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3501:3495:354":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"unit"
        },
        "string-input-0:3843:357":{
            "type":"string",
            "default":".*reno-(...)-.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*reno-(...)-.*\\[.*"
        },
        "string-input-0:3843:354":{
            "type":"string",
            "default":"MEUR",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"MEUR"
        },
        "boolean-input-0:2006:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-selection-0:3391:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "boolean-input-0:3859:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3101:3084:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1593:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "boolean-input-0:3561:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3189:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1593:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "column-filter-0:3626:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_energy-demand_appliances_electricity[TWh]",
                    "bld_energy-demand_lighting_electricity[TWh]",
                    "bld_energy-demand_cooking_electricity[TWh]",
                    "bld_energy-demand_space-cooling_electricity[TWh]",
                    "bld_energy-demand_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-elec_cooking[TWh]",
                    "bld_energy-demand_non-elec_hot-water[TWh]",
                    "bld_energy-demand_non-elec_space-cooling[TWh]",
                    "bld_energy-demand_non-sh_liquid-bio-diesel[TWh]"
                ]
            }
        },
        "string-input-0:2941:2874:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:1593:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "string-input-0:2942:2927:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "boolean-input-0:2792:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-0:3532:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:2721:1017:349":{
            "type":"string",
            "default":"bld_floor-area_residential",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_floor-area_residential"
        },
        "string-input-1209:1175:553":{
            "type":"string",
            "default":"fts_clt_ems-annual",
            "description":"Enter Description",
            "example":"fts_clt_ems-annual"
        },
        "column-filter-0:3056:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_residential_mfh_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_residential_mfh_electricity[TWh]",
                    "bld_energy-demand_residential_sfh_electricity[TWh]",
                    "bld_energy-demand_residential_mfh_gas-bio[TWh]",
                    "bld_energy-demand_residential_sfh_gas-bio[TWh]",
                    "bld_energy-demand_residential_mfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_sfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_mfh_heat-ambient[TWh]",
                    "bld_energy-demand_residential_sfh_heat-ambient[TWh]",
                    "bld_energy-demand_residential_mfh_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_sfh_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_mfh_heat-solar[TWh]",
                    "bld_energy-demand_residential_sfh_heat-solar[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_mfh_solid-bio[TWh]",
                    "bld_energy-demand_residential_sfh_solid-bio[TWh]",
                    "bld_energy-demand_residential_mfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_sfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_mfh_solid-waste[TWh]",
                    "bld_energy-demand_residential_sfh_solid-waste[TWh]"
                ]
            }
        },
        "string-input-1209:1175:555":{
            "type":"string",
            "default":"lever_temp",
            "description":"Enter Description",
            "example":"lever_temp"
        },
        "single-selection-0:3464:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:1533:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3843:349":{
            "type":"string",
            "default":"bld_capex_reno",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_capex_reno"
        },
        "string-input-4620:680:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "string-input-0:3872:349":{
            "type":"string",
            "default":"bld_energy-demand_non-sh",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_non-sh"
        },
        "single-selection-0:724:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3213:2380:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-0:441:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:2847:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-1209:1175:561":{
            "type":"string",
            "default":"lever_temp",
            "description":"Enter Description",
            "example":"lever_temp"
        },
        "string-input-1209:1175:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-0:3106:3222:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:2789:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "string-input-503:561:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-4620:695:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "double-input-0:1854:1247":{
            "type":"number",
            "default":1000000.0,
            "description":"Enter Description",
            "example":1000000.0
        },
        "string-input-503:561:561":{
            "type":"string",
            "default":"lever_urbpop",
            "description":"Enter Description",
            "example":"lever_urbpop"
        },
        "string-input-0:3705:354":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm2"
        },
        "double-input-0:3216:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "column-selection-0:2715:2505:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"Column Header (#2)"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"Column Header (#2)"
            }
        },
        "column-filter-0:2942:2935:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(cal_rate_[%])",
                    "gas-bio+Sum(cal_rate_[%])",
                    "gas-ff-natural+Sum(cal_rate_[%])",
                    "heat-ambient+Sum(cal_rate_[%])",
                    "heat-geothermal+Sum(cal_rate_[%])",
                    "heat-solar+Sum(cal_rate_[%])",
                    "liquid-bio-diesel+Sum(cal_rate_[%])",
                    "liquid-bio-gasoline+Sum(cal_rate_[%])",
                    "liquid-ff-heatingoil+Sum(cal_rate_[%])",
                    "solid-bio+Sum(cal_rate_[%])",
                    "solid-ff-coal+Sum(cal_rate_[%])",
                    "solid-waste+Sum(cal_rate_[%])"
                ]
            }
        },
        "string-input-0:3705:357":{
            "type":"string",
            "default":".*non-residential_.*_(..._.*-area)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*non-residential_.*_(..._.*-area)\\[.*"
        },
        "column-filter-0:2852:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_gas-ff-natural[TWh]",
                    "bld_energy-demand_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_solid-ff-coal[TWh]",
                    "bld_energy-demand_sh_gas-ff-natural[TWh]",
                    "bld_energy-demand_sh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_sh_solid-ff-coal[TWh]"
                ]
            }
        },
        "string-input-1209:1174:553":{
            "type":"string",
            "default":"fts_clt_tmp-awi.*",
            "description":"Enter Description",
            "example":"fts_clt_tmp-awi.*"
        },
        "string-input-0:3872:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:3620:3037:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3872:357":{
            "type":"string",
            "default":".*energy-demand_[h,c,s].*_([s,l,g,h].*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_[h,c,s].*_([s,l,g,h].*)\\[.*"
        },
        "column-filter-0:3099:3104:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"1991+renovated-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "1991+renovated-area[Mm2]",
                    "1992+renovated-area[Mm2]",
                    "1993+renovated-area[Mm2]",
                    "1994+renovated-area[Mm2]",
                    "1995+renovated-area[Mm2]",
                    "1996+renovated-area[Mm2]"
                ]
            }
        },
        "column-filter-0:2942:2952:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "fed_uncalibrated_electricity[TWh]",
                    "fed_uncalibrated_gas-bio[TWh]",
                    "fed_uncalibrated_gas-ff-natural[TWh]",
                    "fed_uncalibrated_heat-ambient[TWh]",
                    "fed_uncalibrated_heat-geothermal[TWh]",
                    "fed_uncalibrated_heat-solar[TWh]",
                    "fed_uncalibrated_liquid-bio-diesel[TWh]",
                    "fed_uncalibrated_liquid-bio-gasoline[TWh]",
                    "fed_uncalibrated_liquid-ff-heatingoil[TWh]",
                    "fed_uncalibrated_solid-bio[TWh]",
                    "fed_uncalibrated_solid-ff-coal[TWh]",
                    "fed_uncalibrated_solid-waste[TWh]"
                ]
            }
        },
        "single-selection-0:3865:3510:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:693:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "string-input-4620:693:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-0:3189:349":{
            "type":"string",
            "default":"cal_bld_energy",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"cal_bld_energy"
        },
        "single-selection-0:3106:3222:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-4620:693:1150:446":{
            "type":"string",
            "default":"lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_fwaste_(.*)\\[kcal]"
        },
        "string-input-1209:1174:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3146:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-0:3146:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "single-selection-0:3501:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-selection-0:1713:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:2106:357":{
            "type":"string",
            "default":".*emissions_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions_(.*)\\[.*"
        },
        "boolean-input-0:3099:3105:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:3146:1599":{
            "type":"string",
            "default":"technology",
            "description":"Enter Description",
            "example":"technology"
        },
        "string-input-503:561:555":{
            "type":"string",
            "default":"lever_urbpop",
            "description":"Enter Description",
            "example":"lever_urbpop"
        },
        "string-input-503:561:553":{
            "type":"string",
            "default":"fts_lfs_urbpop",
            "description":"Enter Description",
            "example":"fts_lfs_urbpop"
        },
        "string-input-0:3700:3698:843":{
            "type":"string",
            "default":"Space Cooling",
            "description":"Enter Description",
            "example":"Space Cooling"
        },
        "single-selection-0:1116:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"buildings"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"buildings"
            }
        },
        "single-selection-1215:767":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"1.2 Climate"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"1.2 Climate"
            }
        },
        "string-input-0:2106:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-503:559:555":{
            "type":"string",
            "default":"lever_pkm",
            "description":"Enter Description",
            "example":"lever_pkm"
        },
        "single-selection-1215:768":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"2.1 Buildings"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"2.1 Buildings"
            }
        },
        "string-input-503:559:553":{
            "type":"string",
            "default":"fts_lfs_pkm",
            "description":"Enter Description",
            "example":"fts_lfs_pkm"
        },
        "column-selection-0:1594:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3705:349":{
            "type":"string",
            "default":"non-residential",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"non-residential"
        },
        "boolean-input-0:3213:2232:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3106:3218:460":{
            "type":"string",
            "default":"TWhstd",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWhstd"
        },
        "boolean-input-0:3571:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1533:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "single-selection-0:3085:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:680:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-444:536:553":{
            "type":"string",
            "default":"fts_bld_district-heating-share",
            "description":"Enter Description",
            "example":"fts_bld_district-heating-share"
        },
        "string-input-0:3189:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-0:1835:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-4620:680:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "string-input-444:536:555":{
            "type":"string",
            "default":"lever_district-heating-share",
            "description":"Enter Description",
            "example":"lever_district-heating-share"
        },
        "boolean-input-0:652:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-4620:680:1150:446":{
            "type":"string",
            "default":"lfs_(.*)\\[1000m2]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_(.*)\\[1000m2]"
        },
        "string-input-0:3189:357":{
            "type":"string",
            "default":"energy_(.*_.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"energy_(.*_.*)_.*\\[.*"
        },
        "boolean-input-0:3572:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:2640:2231:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3620:3037:357":{
            "type":"string",
            "default":"bld_emissions-(..._.*)_.*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_emissions-(..._.*)_.*_.*\\[.*"
        },
        "string-input-0:3620:3037:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:1835:444":{
            "type":"string",
            "default":"renovated-surface-area",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"renovated-surface-area"
        },
        "single-selection-4620:653:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:1835:445":{
            "type":"string",
            "default":"surface-ratio_(.*)",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"surface-ratio_(.*)"
        },
        "boolean-input-0:3874:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:1835:446":{
            "type":"string",
            "default":".*renovated-area.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":".*renovated-area.*"
        },
        "boolean-input-4620:693:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-0:2845:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3875:349":{
            "type":"string",
            "default":"bld_emissions-CO2_non-elec",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions-CO2_non-elec"
        },
        "column-filter-0:3871:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_cooking_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_cooking_gas-bio[TWh]",
                    "bld_energy-demand_cooking_gas-ff-natural[TWh]",
                    "bld_energy-demand_cooking_solid-bio[TWh]",
                    "bld_energy-demand_cooking_solid-ff-coal[TWh]",
                    "bld_energy-demand_hot-water_gas-bio[TWh]",
                    "bld_energy-demand_hot-water_gas-ff-natural[TWh]",
                    "bld_energy-demand_hot-water_heat-ambient[TWh]",
                    "bld_energy-demand_hot-water_heat-geothermal[TWh]",
                    "bld_energy-demand_hot-water_heat-solar[TWh]",
                    "bld_energy-demand_hot-water_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_hot-water_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_hot-water_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_hot-water_solid-bio[TWh]",
                    "bld_energy-demand_hot-water_solid-ff-coal[TWh]",
                    "bld_energy-demand_hot-water_solid-waste[TWh]",
                    "bld_energy-demand_space-cooling_gas-bio[TWh]",
                    "bld_energy-demand_space-cooling_gas-ff-natural[TWh]"
                ]
            }
        },
        "string-input-0:2845:444":{
            "type":"string",
            "default":"emissions_CO2",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions_CO2"
        },
        "single-selection-0:3106:3218:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2845:445":{
            "type":"string",
            "default":"energy-demand_calibrated_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand_calibrated_(.*)\\[.*"
        },
        "column-filter-0:3099:3100:535":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Select the columns for data selection",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "non-residential+constructed-area[Mm2]"
                ]
            }
        },
        "string-input-0:2640:2380:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-4620:693:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "string-input-0:2845:446":{
            "type":"string",
            "default":"emission-factor_CO2\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"emission-factor_CO2\\[.*"
        },
        "string-input-444:534:555":{
            "type":"string",
            "default":"lever_appliance-efficiency",
            "description":"Enter Description",
            "example":"lever_appliance-efficiency"
        },
        "column-filter-0:3057:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_education_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_education_electricity[TWh]",
                    "bld_energy-demand_non-residential_health_electricity[TWh]",
                    "bld_energy-demand_non-residential_hotels_electricity[TWh]",
                    "bld_energy-demand_non-residential_offices_electricity[TWh]",
                    "bld_energy-demand_non-residential_other_electricity[TWh]",
                    "bld_energy-demand_non-residential_trade_electricity[TWh]",
                    "bld_energy-demand_non-residential_education_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_health_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_other_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_education_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_health_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_other_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_education_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_health_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_other_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_education_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_health_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_other_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_education_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_health_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_other_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_education_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_health_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_other_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_education_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_health_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_other_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_education_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_health_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_other_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:3464:446":{
            "type":"string",
            "default":"emissions_(.*)_.*cal.*\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"emissions_(.*)_.*cal.*\\[.*"
        },
        "column-filter-4620:693:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3464:444":{
            "type":"string",
            "default":"emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions"
        },
        "string-input-0:3464:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[.*"
        },
        "string-input-444:534:553":{
            "type":"string",
            "default":"fts_bld_residential-appeff",
            "description":"Enter Description",
            "example":"fts_bld_residential-appeff"
        },
        "single-selection-0:3106:3222:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3464:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "column-filter-0:3875:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-non-elec_non-sh_CO2_non-residential_hot-water[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-non-elec_non-sh_CO2_non-residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_non-residential_space-cooling[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_residential_cooking[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_residential_hot-water[Mt]"
                ]
            }
        },
        "string-input-807:554:553":{
            "type":"string",
            "default":"cp_tec_industry",
            "description":"Enter Description",
            "example":"cp_tec_industry"
        },
        "string-input-807:554:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3085:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_capex_reno-dep-mfh[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_capex_reno-dep-mfh[MEUR]",
                    "bld_capex_reno-dep-off_education[MEUR]",
                    "bld_capex_reno-dep-off_health[MEUR]",
                    "bld_capex_reno-dep-off_hotels[MEUR]",
                    "bld_capex_reno-dep-off_offices[MEUR]",
                    "bld_capex_reno-dep-off_other[MEUR]",
                    "bld_capex_reno-dep-off_trade[MEUR]",
                    "bld_capex_reno-dep-sfh[MEUR]",
                    "bld_capex_reno-med-mfh[MEUR]",
                    "bld_capex_reno-med-off_education[MEUR]",
                    "bld_capex_reno-med-off_health[MEUR]",
                    "bld_capex_reno-med-off_hotels[MEUR]",
                    "bld_capex_reno-med-off_offices[MEUR]",
                    "bld_capex_reno-med-off_other[MEUR]",
                    "bld_capex_reno-med-off_trade[MEUR]",
                    "bld_capex_reno-med-sfh[MEUR]",
                    "bld_capex_reno-shl-mfh[MEUR]",
                    "bld_capex_reno-shl-off_education[MEUR]",
                    "bld_capex_reno-shl-off_health[MEUR]",
                    "bld_capex_reno-shl-off_hotels[MEUR]",
                    "bld_capex_reno-shl-off_offices[MEUR]",
                    "bld_capex_reno-shl-off_other[MEUR]",
                    "bld_capex_reno-shl-off_trade[MEUR]",
                    "bld_capex_reno-shl-sfh[MEUR]"
                ]
            }
        },
        "string-input-0:1533:444":{
            "type":"string",
            "default":"energy-demand_residential",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_residential"
        },
        "string-input-0:1130:1420":{
            "type":"string",
            "default":"bld_floorarea_(.+)_.*\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":"bld_floorarea_(.+)_.*\\[.*"
        },
        "single-selection-0:721:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-0:3859:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"non-residential_energy-demand_constructed_dep[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "non-residential_energy-demand_constructed_dep[TWh]",
                    "non-residential_energy-demand_constructed_med[TWh]",
                    "non-residential_energy-demand_constructed_shl[TWh]",
                    "residential_energy-demand_constructed_dep[TWh]",
                    "residential_energy-demand_constructed_med[TWh]",
                    "residential_energy-demand_constructed_shl[TWh]",
                    "non-residential_energy-demand_renovated_dep[TWh]",
                    "non-residential_energy-demand_renovated_med[TWh]",
                    "non-residential_energy-demand_renovated_shl[TWh]",
                    "residential_energy-demand_renovated_dep[TWh]",
                    "residential_energy-demand_renovated_med[TWh]",
                    "residential_energy-demand_renovated_shl[TWh]",
                    "non-residential_energy-demand_unrenovated_exi[TWh]",
                    "residential_energy-demand_unrenovated_exi[TWh]"
                ]
            }
        },
        "string-input-0:2721:1015:354":{
            "type":"string",
            "default":"Mm²",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm²"
        },
        "single-selection-0:3213:2231:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-0:3146:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:2721:1015:357":{
            "type":"string",
            "default":"bld_.*non-res.*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_.*non-res.*_.*\\[.*"
        },
        "single-selection-0:3174:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-selection-0:3158:3144:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"technology"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"technology"
            }
        },
        "single-selection-0:3099:523":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Yes"
                }
            },
            "description":"Display a unique variable for all individual country",
            "example":{
                "variable_value":"Yes"
            }
        },
        "single-selection-0:3099:528":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"area graph"
                }
            },
            "description":"Choose the graph type",
            "example":{
                "variable_value":"area graph"
            }
        },
        "single-selection-0:2640:2232:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-0:3501:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1533:445":{
            "type":"string",
            "default":"energy-demand_residential_mfh_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand_residential_mfh_(.*)\\[.*"
        },
        "string-input-0:1533:446":{
            "type":"string",
            "default":"energy-demand_residential_sfh_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand_residential_sfh_(.*)\\[.*"
        },
        "string-input-0:2942:2951:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3865:3518:349":{
            "type":"string",
            "default":"bld_energy-demand_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_electricity"
        },
        "string-input-0:1835:460":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mm2"
        },
        "column-filter-0:3630:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-waste_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-geothermal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-waste_all-tech[TWh]"
                ]
            }
        },
        "string-input-0:3375:1599":{
            "type":"string",
            "default":"level_climatelever",
            "description":"Enter Description",
            "example":"level_climatelever"
        },
        "column-selection-0:1831:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3375:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "boolean-input-0:2852:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-0:3375:1596":{
            "type":"string",
            "default":"(.)\\+(.*)_(.*)_(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.)\\+(.*)_(.*)_(.*)-(.*)(\\[.*)"
        },
        "string-input-0:3058:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:2942:2909:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "boolean-input-0:3630:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3058:357":{
            "type":"string",
            "default":".*energy.*_(.*tial_.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy.*_(.*tial_.*)_.*\\[.*"
        },
        "string-input-0:2942:2951:357":{
            "type":"string",
            "default":"(.*)\\+.*nd.*dec.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*nd.*dec.*\\[.*"
        },
        "string-input-0:3503:357":{
            "type":"string",
            "default":"energy-demand-calibrated_(.*tial_.*)_[s,l,g,h].*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"energy-demand-calibrated_(.*tial_.*)_[s,l,g,h].*_.*\\[.*"
        },
        "boolean-input-0:3375:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:3700:3697:843":{
            "type":"string",
            "default":"Space Cooling",
            "description":"Enter Description",
            "example":"Space Cooling"
        },
        "column-filter-0:3436:2927:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking+ColumnValues",
                    "hot-water+ColumnValues",
                    "lighting+ColumnValues",
                    "space-cooling+ColumnValues"
                ]
            }
        },
        "column-filter-4620:695:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:2783:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-need_renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-need_renovated[GWh]",
                    "energy-need_constructed[GWh]",
                    "energy-need_unrenovated[GWh]",
                    "energy-need[GWh]"
                ]
            }
        },
        "string-input-0:3101:3086:3994:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3057:349":{
            "type":"string",
            "default":"bld_energy-demand_heat_non-residential",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_heat_non-residential"
        },
        "string-input-0:2845:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "single-selection-0:441:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3503:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:2086:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "boolean-input-0:3501:3495:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3189:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3085:357":{
            "type":"string",
            "default":".*capex.*reno.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*capex.*reno.*"
        },
        "single-selection-0:3868:3866:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3085:354":{
            "type":"string",
            "default":"MEUR",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"MEUR"
        },
        "string-input-0:3865:3518:357":{
            "type":"string",
            "default":".*energy-demand_(.*)_.*_e.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_(.*)_.*_e.*\\[.*"
        },
        "column-filter-0:3874:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-sh_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-sh_gas-bio[TWh]",
                    "bld_energy-demand_non-sh_heat-ambient[TWh]",
                    "bld_energy-demand_non-sh_heat-geothermal[TWh]",
                    "bld_energy-demand_non-sh_heat-solar[TWh]",
                    "bld_energy-demand_non-sh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-sh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-sh_solid-bio[TWh]",
                    "bld_energy-demand_non-sh_solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:2640:2380:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "column-filter-0:3106:3219:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"electricity+ratio"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "electricity+ratio",
                    "gas-bio+ratio",
                    "gas-ff-natural+ratio",
                    "heat-ambient+ratio",
                    "heat-geothermal+ratio",
                    "heat-solar+ratio",
                    "liquid-bio-diesel+ratio",
                    "liquid-bio-gasoline+ratio",
                    "liquid-ff-heatingoil+ratio",
                    "solid-bio+ratio",
                    "solid-ff-coal+ratio",
                    "solid-waste+ratio"
                ]
            }
        },
        "string-input-0:2640:2380:444":{
            "type":"string",
            "default":"energy-demand_calibrated",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_calibrated"
        },
        "single-selection-0:2793:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2640:2380:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-0:3503:349":{
            "type":"string",
            "default":"bld_energy-demand-non-elec",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand-non-elec"
        },
        "string-input-0:3865:3518:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-0:3620:3042:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-selection-0:3158:1600:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"technology"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"technology"
            }
        },
        "string-input-0:3085:349":{
            "type":"string",
            "default":"bld_capex_renovation",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_capex_renovation"
        },
        "string-input-0:3875:357":{
            "type":"string",
            "default":".*emissions-non-elec_.*_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions-non-elec_.*_.*_(.*)\\[.*"
        },
        "string-input-0:3875:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "single-selection-0:3630:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:2421:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-0:1594:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:3874:349":{
            "type":"string",
            "default":"bld_energy-demand_non-sh_renewables",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_energy-demand_non-sh_renewables"
        },
        "column-filter-0:3872:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_cooking_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_cooking_gas-bio[TWh]",
                    "bld_energy-demand_cooking_gas-ff-natural[TWh]",
                    "bld_energy-demand_cooking_solid-bio[TWh]",
                    "bld_energy-demand_cooking_solid-ff-coal[TWh]",
                    "bld_energy-demand_hot-water_gas-bio[TWh]",
                    "bld_energy-demand_hot-water_gas-ff-natural[TWh]",
                    "bld_energy-demand_hot-water_heat-ambient[TWh]",
                    "bld_energy-demand_hot-water_heat-geothermal[TWh]",
                    "bld_energy-demand_hot-water_heat-solar[TWh]",
                    "bld_energy-demand_hot-water_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_hot-water_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_hot-water_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_hot-water_solid-bio[TWh]",
                    "bld_energy-demand_hot-water_solid-ff-coal[TWh]",
                    "bld_energy-demand_hot-water_solid-waste[TWh]",
                    "bld_energy-demand_space-cooling_gas-bio[TWh]",
                    "bld_energy-demand_space-cooling_gas-ff-natural[TWh]"
                ]
            }
        },
        "boolean-input-0:721:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-0:3503:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:1602:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "boolean-input-0:3431:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1602:1599":{
            "type":"string",
            "default":"technology",
            "description":"Enter Description",
            "example":"technology"
        },
        "boolean-input-0:837:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-444:533:553":{
            "type":"string",
            "default":"cal_dhg_calibration",
            "description":"Enter Description",
            "example":"cal_dhg_calibration"
        },
        "column-filter-0:3058:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_education_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_education_electricity[TWh]",
                    "bld_energy-demand_non-residential_health_electricity[TWh]",
                    "bld_energy-demand_non-residential_hotels_electricity[TWh]",
                    "bld_energy-demand_non-residential_offices_electricity[TWh]",
                    "bld_energy-demand_non-residential_other_electricity[TWh]",
                    "bld_energy-demand_non-residential_trade_electricity[TWh]",
                    "bld_energy-demand_residential_mfh_electricity[TWh]",
                    "bld_energy-demand_residential_sfh_electricity[TWh]",
                    "bld_energy-demand_non-residential_education_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_health_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_other_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-bio[TWh]",
                    "bld_energy-demand_residential_mfh_gas-bio[TWh]",
                    "bld_energy-demand_residential_sfh_gas-bio[TWh]",
                    "bld_energy-demand_non-residential_education_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_health_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_hotels_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_offices_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_other_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_trade_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_mfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_residential_sfh_gas-ff-natural[TWh]",
                    "bld_energy-demand_non-residential_education_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_health_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_other_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-ambient[TWh]",
                    "bld_energy-demand_residential_mfh_heat-ambient[TWh]",
                    "bld_energy-demand_residential_sfh_heat-ambient[TWh]",
                    "bld_energy-demand_non-residential_education_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_health_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_other_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_mfh_heat-geothermal[TWh]",
                    "bld_energy-demand_residential_sfh_heat-geothermal[TWh]",
                    "bld_energy-demand_non-residential_education_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_health_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_hotels_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_offices_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_other_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_trade_heat-solar[TWh]",
                    "bld_energy-demand_residential_mfh_heat-solar[TWh]",
                    "bld_energy-demand_residential_sfh_heat-solar[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_non-residential_education_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_health_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_hotels_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_offices_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_other_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_trade_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_mfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_residential_sfh_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_non-residential_education_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_health_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_other_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-bio[TWh]",
                    "bld_energy-demand_residential_mfh_solid-bio[TWh]",
                    "bld_energy-demand_residential_sfh_solid-bio[TWh]",
                    "bld_energy-demand_non-residential_education_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_health_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_other_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_mfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_residential_sfh_solid-ff-coal[TWh]",
                    "bld_energy-demand_non-residential_education_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_health_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_hotels_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_offices_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_other_solid-waste[TWh]",
                    "bld_energy-demand_non-residential_trade_solid-waste[TWh]",
                    "bld_energy-demand_residential_mfh_solid-waste[TWh]",
                    "bld_energy-demand_residential_sfh_solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:2939:2869:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-444:533:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "boolean-input-0:3372:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:1602:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "string-input-0:3630:357":{
            "type":"string",
            "default":"energy-demand-calibrated_.*tial_.*_([s,l,g,h].*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"energy-demand-calibrated_.*tial_.*_([s,l,g,h].*)_.*\\[.*"
        },
        "string-input-0:3620:3036:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "single-selection-0:3874:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:679:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "column-filter-0:2942:2938:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_decentral_renovated[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_renovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_renovated[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_renovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_renovated[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_renovated[TWh])"
                ]
            }
        },
        "string-input-4620:679:1151:445":{
            "type":"string",
            "default":"cal_lfs_travel_(.*)\\[pkm]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_travel_(.*)\\[pkm]"
        },
        "string-input-4620:679:1151:446":{
            "type":"string",
            "default":"lfs_(.*)\\[pkm]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_(.*)\\[pkm]"
        },
        "string-input-0:3630:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-4620:679:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-0:3016:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-0:652:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand_comp[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand_comp[GWh]",
                    "energy-demand_dishwasher[GWh]",
                    "energy-demand_dryer[GWh]",
                    "energy-demand_freezer[GWh]",
                    "energy-demand_fridge[GWh]",
                    "energy-demand_phone[GWh]",
                    "energy-demand_tv[GWh]",
                    "energy-demand_wmachine[GWh]"
                ]
            }
        },
        "single-selection-0:1835:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3101:3086:3993:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "Austria",
                    "Belgium",
                    "Bulgaria",
                    "Croatia",
                    "Cyprus",
                    "Czech Republic",
                    "Denmark",
                    "Estonia",
                    "Finland",
                    "France",
                    "Germany",
                    "Greece",
                    "Hungary",
                    "Ireland",
                    "Italy",
                    "Latvia",
                    "Lithuania",
                    "Luxembourg",
                    "Malta",
                    "Netherlands",
                    "Poland",
                    "Portugal",
                    "Romania",
                    "Slovakia",
                    "Slovenia",
                    "Spain",
                    "Sweden",
                    "Switzerland",
                    "United Kingdom"
                ]
            }
        },
        "string-input-0:3430:349":{
            "type":"string",
            "default":"fed_calibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_calibrated"
        },
        "string-input-0:441:444":{
            "type":"string",
            "default":"fts_bld_appliance-lifetime",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"fts_bld_appliance-lifetime"
        },
        "boolean-input-4620:680:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-0:3572:354":{
            "type":"string",
            "default":"Mm²",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm²"
        },
        "string-input-0:441:445":{
            "type":"string",
            "default":"bld_appliance-lifetime_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"bld_appliance-lifetime_(.*)\\[.*"
        },
        "string-input-0:441:446":{
            "type":"string",
            "default":"ll_bld_appliance-lifetime_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ll_bld_appliance-lifetime_(.*)\\[.*"
        },
        "column-filter-0:3501:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Sum(bld_capex_renovation[MEUR])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Sum(bld_capex_renovation[MEUR])",
                    "Sum(bld_capex_comp[MEUR])",
                    "Sum(bld_capex_dh_pipes[MEUR])",
                    "Sum(bld_capex_dishwasher[MEUR])",
                    "Sum(bld_capex_dryer[MEUR])",
                    "Sum(bld_capex_freezer[MEUR])",
                    "Sum(bld_capex_fridge[MEUR])",
                    "Sum(bld_capex_phone[MEUR])",
                    "Sum(bld_capex_tv[MEUR])",
                    "Sum(bld_capex_wmachine[MEUR])"
                ]
            }
        },
        "column-selection-0:1602:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:2942:2951:349":{
            "type":"string",
            "default":"fed_uncalibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_uncalibrated"
        },
        "string-input-0:2938:2902:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "single-selection-0:3430:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3058:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "string-input-4620:653:444":{
            "type":"string",
            "default":"lfs_appliance-use",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs_appliance-use"
        },
        "string-input-1209:553:553":{
            "type":"string",
            "default":"ots_clm_temp",
            "description":"Enter Description",
            "example":"ots_clm_temp"
        },
        "column-filter-0:3626:2959:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_energy-demand_appliances_electricity[TWh]",
                    "bld_energy-demand_lighting_electricity[TWh]",
                    "bld_energy-demand_cooking_electricity[TWh]",
                    "bld_energy-demand_space-cooling_electricity[TWh]",
                    "bld_energy-demand_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-elec_cooking[TWh]",
                    "bld_energy-demand_non-elec_hot-water[TWh]",
                    "bld_energy-demand_non-elec_space-cooling[TWh]"
                ]
            }
        },
        "single-selection-0:2640:2231:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "double-input-0:2078:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-4620:653:446":{
            "type":"string",
            "default":"lfs_appliance-own_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_appliance-own_(.*)\\[.*"
        },
        "string-input-1209:553:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-4620:653:445":{
            "type":"string",
            "default":"lfs_appliance-use_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_appliance-use_(.*)\\[.*"
        },
        "string-input-0:3430:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3572:349":{
            "type":"string",
            "default":"area",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"area"
        },
        "string-input-807:553:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:2942:2923:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(cal_rate_[%])",
                    "gas-bio+Sum(cal_rate_[%])",
                    "gas-ff-natural+Sum(cal_rate_[%])",
                    "heat-ambient+Sum(cal_rate_[%])",
                    "heat-geothermal+Sum(cal_rate_[%])",
                    "heat-solar+Sum(cal_rate_[%])",
                    "liquid-bio-diesel+Sum(cal_rate_[%])",
                    "liquid-bio-gasoline+Sum(cal_rate_[%])",
                    "liquid-ff-heatingoil+Sum(cal_rate_[%])",
                    "solid-bio+Sum(cal_rate_[%])",
                    "solid-ff-coal+Sum(cal_rate_[%])",
                    "solid-waste+Sum(cal_rate_[%])"
                ]
            }
        },
        "string-input-807:553:553":{
            "type":"string",
            "default":"ots_tec_transport",
            "description":"Enter Description",
            "example":"ots_tec_transport"
        },
        "boolean-input-0:3875:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-4620:679:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "string-input-4620:695:446":{
            "type":"string",
            "default":"lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_diet_(.*)\\[kcal]"
        },
        "string-input-4620:695:445":{
            "type":"string",
            "default":"cal_lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_diet_(.*)\\[kcal]"
        },
        "string-input-0:3431:2927:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "boolean-input-0:2337:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-4620:695:444":{
            "type":"string",
            "default":"lfs_diet",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs_diet"
        },
        "string-input-0:3430:357":{
            "type":"string",
            "default":"(.*)\\+.*calibrated.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*calibrated.*\\[.*"
        },
        "column-filter-0:3101:3086:3809:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "column-filter-0:3464:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"cal_rate_CH4[%]+ColumnValues"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "cal_rate_CH4[%]+ColumnValues",
                    "cal_rate_CO2[%]+ColumnValues",
                    "cal_rate_N2O[%]+ColumnValues"
                ]
            }
        },
        "string-input-807:552:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-807:552:553":{
            "type":"string",
            "default":"fts_tec_buildings",
            "description":"Enter Description",
            "example":"fts_tec_buildings"
        },
        "single-selection-0:2852:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-4620:693:1164":{
            "type":"string",
            "default":"2013",
            "description":"Enter Description",
            "example":"2013"
        },
        "string-input-4620:693:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "string-input-4620:679:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-0:3865:3510:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3099:3994:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "string-input-0:2721:1015:349":{
            "type":"string",
            "default":"bld_floor-area_non-residential",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_floor-area_non-residential"
        },
        "single-selection-4620:680:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-4620:695:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3016:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:3574:3562:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_floor-area-constructed_dep[million_m2]",
                    "bld_floor-area-constructed_med[million_m2]",
                    "bld_floor-area-constructed_shl[million_m2]",
                    "bld_floor-area-demolished-pos[million_m2]",
                    "bld_floor-area-demolished_dep[million_m2]",
                    "bld_floor-area-demolished_exi[million_m2]",
                    "bld_floor-area-demolished_med[million_m2]",
                    "bld_floor-area-demolished_shl[million_m2]"
                ]
            }
        },
        "single-selection-0:1835:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:441:460":{
            "type":"string",
            "default":"a",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"a"
        },
        "column-selection-0:3375:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3016:357":{
            "type":"string",
            "default":".*energy.*_.*tial_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy.*_.*tial_.*_(.*)\\[.*"
        },
        "single-selection-0:2640:2232:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "boolean-input-4620:695:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-4620:679:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-0:3620:3037:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "string-input-4620:679:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "string-input-4620:679:1150:446":{
            "type":"string",
            "default":"lfs_(.*)\\[pkm]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"lfs_(.*)\\[pkm]"
        },
        "single-selection-0:3875:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:1533:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand_residential_mfh_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand_residential_mfh_electricity[TWh]",
                    "energy-demand_residential_mfh_gas-ff-natural[TWh]",
                    "energy-demand_residential_mfh_liquid-ff-heatingoil[TWh]",
                    "energy-demand_residential_mfh_solid-bio-woodlog[TWh]",
                    "energy-demand_residential_mfh_solid-ff-coal[TWh]",
                    "energy-demand_residential_mfh_solid-bio-pellets[TWh]"
                ]
            }
        },
        "string-input-0:1831:1596":{
            "type":"string",
            "default":"bld_(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"bld_(.*)_(.*)_(.*)(\\[.*)"
        },
        "string-input-0:3874:357":{
            "type":"string",
            "default":".*energy-demand_non-sh.*_.*-[b,a,s,g].*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_non-sh.*_.*-[b,a,s,g].*\\[.*"
        },
        "string-input-0:1831:1597":{
            "type":"string",
            "default":"$3",
            "description":"Enter Description",
            "example":"$3"
        },
        "string-input-4620:653:460":{
            "type":"string",
            "default":"h",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"h"
        },
        "string-input-0:3874:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:2340:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "single-selection-0:837:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-444:534:561":{
            "type":"string",
            "default":"lever_appliance-efficiency",
            "description":"Enter Description",
            "example":"lever_appliance-efficiency"
        },
        "string-input-0:3630:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "string-input-0:1831:1599":{
            "type":"string",
            "default":"buildingtype",
            "description":"Enter Description",
            "example":"buildingtype"
        },
        "string-input-4620:680:444":{
            "type":"string",
            "default":"lfs",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs"
        },
        "string-input-4620:680:445":{
            "type":"string",
            "default":"cal_lfs_area_(.*)\\[1000m2]",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_area_(.*)\\[1000m2]"
        },
        "column-filter-0:3099:535":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Select the columns for data selection",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "residential+constructed-area[Mm2]"
                ]
            }
        },
        "column-filter-0:2640:2232:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:722:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-4620:680:446":{
            "type":"string",
            "default":"lfs_(.*)\\[1000m2]",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_(.*)\\[1000m2]"
        },
        "column-filter-4620:680:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:3430:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-444:534:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3572:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Sum(bld_floor-area[million_m2])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Sum(bld_floor-area[million_m2])",
                    "Sum(bld_floor-area-constructed_dep[million_m2])",
                    "Sum(bld_floor-area-constructed_med[million_m2])",
                    "Sum(bld_floor-area-constructed_shl[million_m2])",
                    "Sum(bld_floor-area-demolished_dep[million_m2])",
                    "Sum(bld_floor-area-demolished_exi[million_m2])",
                    "Sum(bld_floor-area-demolished_med[million_m2])",
                    "Sum(bld_floor-area-demolished_shl[million_m2])",
                    "Sum(bld_floor-area-renovated_dep[million_m2])",
                    "Sum(bld_floor-area-renovated_med[million_m2])",
                    "Sum(bld_floor-area-renovated_shl[million_m2])",
                    "Sum(bld_floor-area-unrenovated_exi[million_m2])",
                    "Sum(bld_floor-area-demolished-pos[million_m2])"
                ]
            }
        },
        "column-filter-0:3106:3222:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"electricity+ratio"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "electricity+ratio",
                    "gas-bio+ratio",
                    "gas-ff-natural+ratio",
                    "heat-ambient+ratio",
                    "heat-geothermal+ratio",
                    "heat-solar+ratio",
                    "liquid-bio-diesel+ratio",
                    "liquid-bio-gasoline+ratio",
                    "liquid-ff-heatingoil+ratio",
                    "solid-bio+ratio",
                    "solid-ff-coal+ratio",
                    "solid-waste+ratio"
                ]
            }
        },
        "single-selection-0:3520:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3532:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-1209:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-503:555:555":{
            "type":"string",
            "default":"lever_floor-intensity",
            "description":"Enter Description",
            "example":"lever_floor-intensity"
        },
        "string-input-503:555:553":{
            "type":"string",
            "default":"fts_lfs_floor-intensity",
            "description":"Enter Description",
            "example":"fts_lfs_floor-intensity"
        },
        "boolean-input-0:2420:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3008:349":{
            "type":"string",
            "default":"bld_energy-demand_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"bld_energy-demand_electricity"
        },
        "string-input-0:3532:357":{
            "type":"string",
            "default":"emissions-(.*_.*ial)_.*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"emissions-(.*_.*ial)_.*_.*\\[.*"
        },
        "single-selection-0:2421:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3099:3105:349":{
            "type":"string",
            "default":"1992-1997",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"1992-1997"
        },
        "single-selection-0:2420:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3524:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "column-selection-0:1611:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"Years"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"Years"
            }
        },
        "string-input-0:1116:1420":{
            "type":"string",
            "default":"appliance-new_(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":"appliance-new_(.+)\\[.*"
        },
        "column-filter-0:3620:3037:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3524:357":{
            "type":"string",
            "default":".*emissions.(.*_.*ial_.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions.(.*_.*ial_.*)_.*\\[.*"
        },
        "column-selection-0:3148:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3431:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "column-filter-0:3700:3690:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "space-cooling_electricity",
                    "space-cooling_gas-ff-natural",
                    "space-cooling_solid-bio",
                    "space-cooling_solid-ff-coal",
                    "space-cooling_gas-bio",
                    "space-cooling_heat-ambient",
                    "space-cooling_heat-district",
                    "space-cooling_heat-solar",
                    "space-cooling_liquid-bio-diesel",
                    "space-cooling_liquid-bio-gasoline",
                    "space-cooling_liquid-ff-heatingoil",
                    "space-cooling_solid-waste",
                    "space-cooling_heat-geothermal"
                ]
            }
        },
        "column-filter-0:3430:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "fed_calibrated_appliances[TWh]",
                    "fed_calibrated_cooking[TWh]",
                    "fed_calibrated_hot-water[TWh]",
                    "fed_calibrated_lighting[TWh]",
                    "fed_calibrated_space-cooling[TWh]"
                ]
            }
        },
        "string-input-0:2006:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "string-input-0:3430:2906:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "string-input-0:2127:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3008:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3008:357":{
            "type":"string",
            "default":".*en.*el.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*en.*el.*"
        },
        "string-input-0:2127:357":{
            "type":"string",
            "default":".*emissions-(.*_.*ial_.*)_[^e].*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions-(.*_.*ial_.*)_[^e].*_.*\\[.*"
        },
        "string-input-0:3431:2955:843":{
            "type":"string",
            "default":"EU calibration rate",
            "description":"Enter Description",
            "example":"EU calibration rate"
        },
        "single-selection-0:3099:3103:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:3486:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3016:349":{
            "type":"string",
            "default":"bld_energy-demand_heat",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_heat"
        },
        "column-filter-0:3430:2951:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3524:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "single-selection-0:3106:3218:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3105:2951:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "dhg_pipes-total[km]",
                    "dhg_new_dh_pipes[km]"
                ]
            }
        },
        "column-selection-0:2340:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "single-selection-0:3842:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:3520:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_appliances_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_non-residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-residential_lighting_electricity[TWh]",
                    "bld_energy-demand_non-residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_cooking_electricity[TWh]",
                    "bld_energy-demand_residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_residential_lighting_electricity[TWh]",
                    "bld_energy-demand_residential_space-cooling_electricity[TWh]"
                ]
            }
        },
        "single-selection-0:3431:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2727:2794:843":{
            "type":"string",
            "default":"Floor area",
            "description":"Enter Description",
            "example":"Floor area"
        },
        "column-filter-0:3431:2933:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+Sum(energy-demand_calibrated[TWh])",
                    "cooking+Sum(energy-demand_calibrated[TWh])",
                    "hot-water+Sum(energy-demand_calibrated[TWh])",
                    "lighting+Sum(energy-demand_calibrated[TWh])",
                    "space-cooling+Sum(energy-demand_calibrated[TWh])"
                ]
            }
        },
        "column-filter-0:2941:2857:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "floor-area-increase-acc[Mm2]",
                    "unrenovated-area-acc[Mm2]",
                    "technology-factor",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]",
                    "energy-demand_decentral_[GWh]",
                    "Years_number (#1)",
                    "energy-demand[GWh]",
                    "cal_rate_[%]"
                ]
            }
        },
        "boolean-input-0:3534:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3436:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "single-selection-0:2845:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-0:1713:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:2942:2929:843":{
            "type":"string",
            "default":"Romania before calibration",
            "description":"Enter Description",
            "example":"Romania before calibration"
        },
        "single-selection-4620:680:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3486:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions_CO2_non-residential_education_gas-bio[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions_CO2_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_CO2_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_N2O_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_CH4_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_CO2_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_N2O_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_CH4_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-waste[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-waste[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-waste[Mt]"
                ]
            }
        },
        "string-input-0:3700:3688:843":{
            "type":"string",
            "default":"Hot water",
            "description":"Enter Description",
            "example":"Hot water"
        },
        "string-input-0:1819:1420":{
            "type":"string",
            "default":".*(dh_pipes)\\[.*]",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*(dh_pipes)\\[.*]"
        },
        "string-input-0:2006:444":{
            "type":"string",
            "default":"energy-demand_decentral",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_decentral"
        },
        "single-selection-0:2789:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-0:2721:1017:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:1835:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"renovated-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "renovated-area[Mm2]"
                ]
            }
        },
        "column-selection-0:2339:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:2006:446":{
            "type":"string",
            "default":"technology-factor",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"technology-factor"
        },
        "string-input-0:3430:2914:843":{
            "type":"string",
            "default":"EU before calibration",
            "description":"Enter Description",
            "example":"EU before calibration"
        },
        "string-input-0:2006:445":{
            "type":"string",
            "default":"energy-need_decentral_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-need_decentral_(.*)\\[.*"
        },
        "column-filter-0:3213:2231:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-4620:680:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-503:556:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-selection-0:3212:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"Years"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"Years"
            }
        },
        "column-filter-0:2420:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand_decentral_renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]",
                    "energy-demand_decentral_[GWh]"
                ]
            }
        },
        "column-filter-0:3842:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_capex_reno-dep-mfh[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_capex_reno-dep-mfh[MEUR]",
                    "bld_capex_reno-dep-off_education[MEUR]",
                    "bld_capex_reno-dep-off_health[MEUR]",
                    "bld_capex_reno-dep-off_hotels[MEUR]",
                    "bld_capex_reno-dep-off_offices[MEUR]",
                    "bld_capex_reno-dep-off_other[MEUR]",
                    "bld_capex_reno-dep-off_trade[MEUR]",
                    "bld_capex_reno-dep-sfh[MEUR]",
                    "bld_capex_reno-med-mfh[MEUR]",
                    "bld_capex_reno-med-off_education[MEUR]",
                    "bld_capex_reno-med-off_health[MEUR]",
                    "bld_capex_reno-med-off_hotels[MEUR]",
                    "bld_capex_reno-med-off_offices[MEUR]",
                    "bld_capex_reno-med-off_other[MEUR]",
                    "bld_capex_reno-med-off_trade[MEUR]",
                    "bld_capex_reno-med-sfh[MEUR]",
                    "bld_capex_reno-shl-mfh[MEUR]",
                    "bld_capex_reno-shl-off_education[MEUR]",
                    "bld_capex_reno-shl-off_health[MEUR]",
                    "bld_capex_reno-shl-off_hotels[MEUR]",
                    "bld_capex_reno-shl-off_offices[MEUR]",
                    "bld_capex_reno-shl-off_other[MEUR]",
                    "bld_capex_reno-shl-off_trade[MEUR]",
                    "bld_capex_reno-shl-sfh[MEUR]"
                ]
            }
        },
        "string-input-0:3574:3562:843":{
            "type":"string",
            "default":"floor area by renovation",
            "description":"Enter Description",
            "example":"floor area by renovation"
        },
        "string-input-503:556:561":{
            "type":"string",
            "default":"lever_fwaste",
            "description":"Enter Description",
            "example":"lever_fwaste"
        },
        "column-filter-0:3503:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand-calibrated_residential_cooking_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-solar_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-ff-heatingoil_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-waste_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-ff-natural_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_heat-ambient_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_residential_cooking_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_gas-bio_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_solid-ff-coal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-diesel_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_liquid-bio-gasoline_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_heat-geothermal_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_solid-waste_all-tech[TWh]"
                ]
            }
        },
        "single-selection-4620:695:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "column-filter-4620:653:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"lfs_appliance-own_fridge[num]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "lfs_appliance-own_fridge[num]",
                    "lfs_appliance-own_freezer[num]",
                    "lfs_appliance-own_wmachine[num]",
                    "lfs_appliance-own_dryer[num]",
                    "lfs_appliance-own_dishwasher[num]",
                    "lfs_appliance-own_tv[num]",
                    "lfs_appliance-own_comp[num]",
                    "lfs_appliance-own_phone[num]"
                ]
            }
        },
        "string-input-4620:679:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "column-filter-0:3620:3036:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3104:2618:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_floor-area_new_non-residential[m2]",
                    "bld_floor-area_reno_non-residential[m2]",
                    "bld_floor-area_new_residential[m2]",
                    "bld_floor-area_reno_residential[m2]"
                ]
            }
        },
        "string-input-4620:679:1163":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "column-filter-0:3430:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"appliances+energy-demand_calibrated[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "appliances+energy-demand_calibrated[TWh]",
                    "cooking+energy-demand_calibrated[TWh]",
                    "hot-water+energy-demand_calibrated[TWh]",
                    "lighting+energy-demand_calibrated[TWh]",
                    "space-cooling+energy-demand_calibrated[TWh]"
                ]
            }
        },
        "single-selection-0:1014:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"SPLIT"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"SPLIT"
            }
        },
        "column-filter-0:441:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_appliance-lifetime_fridge[a]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_appliance-lifetime_fridge[a]",
                    "bld_appliance-lifetime_freezer[a]",
                    "bld_appliance-lifetime_wmachine[a]",
                    "bld_appliance-lifetime_dishwasher[a]",
                    "bld_appliance-lifetime_dryer[a]",
                    "bld_appliance-lifetime_tv[a]",
                    "bld_appliance-lifetime_comp[a]",
                    "bld_appliance-lifetime_phone[a]"
                ]
            }
        },
        "string-input-0:3078:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3436:357":{
            "type":"string",
            "default":"(.*)\\+.*calibrated.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"(.*)\\+.*calibrated.*\\[.*"
        },
        "string-input-0:3078:349":{
            "type":"string",
            "default":"bld_energy-demand_heat",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_heat"
        },
        "column-filter-0:2106:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions_non-residential_CO2[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions_non-residential_CO2[Mt]",
                    "emissions_non-residential_N2O[Mt]",
                    "emissions_non-residential_CH4[Mt]",
                    "emissions_residential_CO2[Mt]",
                    "emissions_residential_N2O[Mt]",
                    "emissions_residential_CH4[Mt]",
                    "emissions_CO2_non-residential_calibrated[Mt]",
                    "emissions_CH4_non-residential_calibrated[Mt]",
                    "emissions_N2O_non-residential_calibrated[Mt]",
                    "emissions_CO2_residential_calibrated[Mt]",
                    "emissions_CH4_residential_calibrated[Mt]",
                    "emissions_N2O_residential_calibrated[Mt]"
                ]
            }
        },
        "single-selection-0:724:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3619:2987:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:3501:3495:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Sum(bld_energy-demand_non-residential_education_electricity[TWh])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Sum(bld_energy-demand_non-residential_education_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_education_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_education_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_education_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_education_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_education_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_health_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_hotels_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_offices_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_other_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_electricity[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_non-residential_trade_solid-ff-coal[TWh])",
                    "Sum(bld_energy-demand_residential_electricity[TWh])",
                    "Sum(bld_energy-demand_residential_gas-ff-natural[TWh])",
                    "Sum(bld_energy-demand_residential_liquid-ff-heatingoil[TWh])",
                    "Sum(bld_energy-demand_residential_solid-bio-pellets[TWh])",
                    "Sum(bld_energy-demand_residential_solid-bio-woodlog[TWh])",
                    "Sum(bld_energy-demand_residential_solid-ff-coal[TWh])"
                ]
            }
        },
        "single-selection-0:2789:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:2106:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3436:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3619:2987:357":{
            "type":"string",
            "default":".*energy-demand_(.*residential_.*)_.*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_(.*residential_.*)_.*_.*\\[.*"
        },
        "column-filter-0:3700:3584:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking_electricity",
                    "cooking_gas-ff-natural",
                    "cooking_solid-bio",
                    "cooking_solid-ff-coal",
                    "cooking_gas-bio",
                    "cooking_heat-ambient",
                    "cooking_heat-district",
                    "cooking_heat-solar",
                    "cooking_liquid-bio-diesel",
                    "cooking_liquid-bio-gasoline",
                    "cooking_liquid-ff-heatingoil",
                    "cooking_solid-waste",
                    "cooking_heat-geothermal"
                ]
            }
        },
        "string-input-0:3433:2959:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "single-selection-0:3099:3100:523":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Yes"
                }
            },
            "description":"Display a unique variable for all individual country",
            "example":{
                "variable_value":"Yes"
            }
        },
        "boolean-input-0:1835:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-4623:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "bld_emissions-CH4_non-residential_appliances[Mt]",
                    "bld_emissions-CH4_residential_appliances[Mt]",
                    "bld_emissions-CO2_non-residential_appliances[Mt]",
                    "bld_emissions-CO2_residential_appliances[Mt]",
                    "bld_emissions-N2O_non-residential_appliances[Mt]",
                    "bld_emissions-N2O_residential_appliances[Mt]",
                    "bld_emissions-CH4_non-residential_education[Mt]",
                    "bld_emissions-CH4_non-residential_health[Mt]",
                    "bld_emissions-CH4_non-residential_hotels[Mt]",
                    "bld_emissions-CH4_non-residential_offices[Mt]",
                    "bld_emissions-CH4_non-residential_other[Mt]",
                    "bld_emissions-CH4_non-residential_trade[Mt]",
                    "bld_emissions-CH4_residential_mfh[Mt]",
                    "bld_emissions-CH4_residential_sfh[Mt]",
                    "bld_emissions-CO2_non-residential_education[Mt]",
                    "bld_emissions-CO2_non-residential_health[Mt]",
                    "bld_emissions-CO2_non-residential_hotels[Mt]",
                    "bld_emissions-CO2_non-residential_offices[Mt]",
                    "bld_emissions-CO2_non-residential_other[Mt]",
                    "bld_emissions-CO2_non-residential_trade[Mt]",
                    "bld_emissions-CO2_residential_mfh[Mt]",
                    "bld_emissions-CO2_residential_sfh[Mt]",
                    "bld_emissions-N2O_non-residential_education[Mt]",
                    "bld_emissions-N2O_non-residential_health[Mt]",
                    "bld_emissions-N2O_non-residential_hotels[Mt]",
                    "bld_emissions-N2O_non-residential_offices[Mt]",
                    "bld_emissions-N2O_non-residential_other[Mt]",
                    "bld_emissions-N2O_non-residential_trade[Mt]",
                    "bld_emissions-N2O_residential_mfh[Mt]",
                    "bld_emissions-N2O_residential_sfh[Mt]",
                    "bld_emissions-CH4_gas-ff-natural[Mt]",
                    "bld_emissions-CH4_heat-ambient[Mt]",
                    "bld_emissions-CH4_heat-geothermal[Mt]",
                    "bld_emissions-CH4_heat-solar[Mt]",
                    "bld_emissions-CH4_liquid-ff-heatingoil[Mt]",
                    "bld_emissions-CH4_solid-bio[Mt]",
                    "bld_emissions-CH4_solid-ff-coal[Mt]",
                    "bld_emissions-CO2_gas-ff-natural[Mt]",
                    "bld_emissions-CO2_heat-ambient[Mt]",
                    "bld_emissions-CO2_heat-geothermal[Mt]",
                    "bld_emissions-CO2_heat-solar[Mt]",
                    "bld_emissions-CO2_liquid-ff-heatingoil[Mt]",
                    "bld_emissions-CO2_solid-bio[Mt]",
                    "bld_emissions-CO2_solid-ff-coal[Mt]",
                    "bld_emissions-N2O_gas-ff-natural[Mt]",
                    "bld_emissions-N2O_heat-ambient[Mt]",
                    "bld_emissions-N2O_heat-geothermal[Mt]",
                    "bld_emissions-N2O_heat-solar[Mt]",
                    "bld_emissions-N2O_liquid-ff-heatingoil[Mt]",
                    "bld_emissions-N2O_solid-bio[Mt]",
                    "bld_emissions-N2O_solid-ff-coal[Mt]"
                ]
            }
        },
        "boolean-input-0:3705:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3099:3100:528":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"area graph"
                }
            },
            "description":"Choose the graph type",
            "example":{
                "variable_value":"area graph"
            }
        },
        "column-filter-0:3099:2794:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "non-residential+Sum(Sum(constructed-area[Mm2]))",
                    "non-residential+Sum(Sum(renovated-area[Mm2]))",
                    "residential+Sum(Sum(constructed-area[Mm2]))",
                    "residential+Sum(Sum(renovated-area[Mm2]))"
                ]
            }
        },
        "column-filter-0:3841:3496:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3158:2009:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"factor_technology"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "factor_technology"
                ]
            }
        },
        "string-input-4620:680:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "string-input-4620:680:1164":{
            "type":"string",
            "default":"2010",
            "description":"Enter Description",
            "example":"2010"
        },
        "column-filter-0:1819:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"dhg_new_dh_pipes[km]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "dhg_new_dh_pipes[km]"
                ]
            }
        },
        "string-input-503:554:553":{
            "type":"string",
            "default":"fts_lfs_diet",
            "description":"Enter Description",
            "example":"fts_lfs_diet"
        },
        "single-selection-0:3058:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2942:2938:843":{
            "type":"string",
            "default":"Romania before calibration",
            "description":"Enter Description",
            "example":"Romania before calibration"
        },
        "string-input-503:554:555":{
            "type":"string",
            "default":"lever_diet",
            "description":"Enter Description",
            "example":"lever_diet"
        },
        "string-input-0:3619:2987:349":{
            "type":"string",
            "default":"bld_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand"
        },
        "boolean-input-0:3527:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3373:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "disabled-4620:680:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "boolean-input-0:2789:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:2940:2870:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:1592:1599":{
            "type":"string",
            "default":"subsector",
            "description":"Enter Description",
            "example":"subsector"
        },
        "single-selection-4620:693:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-4620:680:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:2421:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand[GWh]"
                ]
            }
        },
        "string-input-0:2127:349":{
            "type":"string",
            "default":"bld_emissions_non-elec_non-sh",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_non-elec_non-sh"
        },
        "column-filter-0:3843:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_capex_reno-dep-mfh[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_capex_reno-dep-mfh[MEUR]",
                    "bld_capex_reno-dep-off_education[MEUR]",
                    "bld_capex_reno-dep-off_health[MEUR]",
                    "bld_capex_reno-dep-off_hotels[MEUR]",
                    "bld_capex_reno-dep-off_offices[MEUR]",
                    "bld_capex_reno-dep-off_other[MEUR]",
                    "bld_capex_reno-dep-off_trade[MEUR]",
                    "bld_capex_reno-dep-sfh[MEUR]",
                    "bld_capex_reno-med-mfh[MEUR]",
                    "bld_capex_reno-med-off_education[MEUR]",
                    "bld_capex_reno-med-off_health[MEUR]",
                    "bld_capex_reno-med-off_hotels[MEUR]",
                    "bld_capex_reno-med-off_offices[MEUR]",
                    "bld_capex_reno-med-off_other[MEUR]",
                    "bld_capex_reno-med-off_trade[MEUR]",
                    "bld_capex_reno-med-sfh[MEUR]",
                    "bld_capex_reno-shl-mfh[MEUR]",
                    "bld_capex_reno-shl-off_education[MEUR]",
                    "bld_capex_reno-shl-off_health[MEUR]",
                    "bld_capex_reno-shl-off_hotels[MEUR]",
                    "bld_capex_reno-shl-off_offices[MEUR]",
                    "bld_capex_reno-shl-off_other[MEUR]",
                    "bld_capex_reno-shl-off_trade[MEUR]",
                    "bld_capex_reno-shl-sfh[MEUR]"
                ]
            }
        },
        "single-selection-0:2006:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-0:1854:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_constructed-area_non-residential[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_constructed-area_non-residential[Mm2]",
                    "bld_renovated-area_non-residential[Mm2]",
                    "bld_renovated-surface-area_non-residential_wall[Mm2]",
                    "bld_constructed-area_residential[Mm2]",
                    "bld_renovated-area_residential[Mm2]",
                    "bld_renovated-surface-area_residential_wall[Mm2]"
                ]
            }
        },
        "string-input-0:1592:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "single-selection-0:1014:645":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:1592:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "column-filter-0:1393:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:3621:3601:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:2063:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "single-selection-0:441:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3158:2009:1245":{
            "type":"string",
            "default":"factor_technology",
            "description":"Enter Description",
            "example":"factor_technology"
        },
        "string-input-0:3158:2009:1246":{
            "type":"string",
            "default":"TWhperGWh",
            "description":"Enter Description",
            "example":"TWhperGWh"
        },
        "single-selection-0:3106:3218:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3532:349":{
            "type":"string",
            "default":"bld_emissions_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_appliances"
        },
        "boolean-input-0:1393:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-4620:693:446":{
            "type":"string",
            "default":"lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_fwaste_(.*)\\[kcal]"
        },
        "string-input-4620:693:445":{
            "type":"string",
            "default":"cal_lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_lfs_fwaste_(.*)\\[kcal]"
        },
        "column-filter-0:3862:3688:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "lfs_appliance-own_comp[num]",
                    "lfs_appliance-own_dishwasher[num]",
                    "lfs_appliance-own_dryer[num]",
                    "lfs_appliance-own_freezer[num]",
                    "lfs_appliance-own_fridge[num]",
                    "lfs_appliance-own_phone[num]",
                    "lfs_appliance-own_tv[num]",
                    "lfs_appliance-own_wmachine[num]"
                ]
            }
        },
        "string-input-503:555:561":{
            "type":"string",
            "default":"lever_floor-intensity",
            "description":"Enter Description",
            "example":"lever_floor-intensity"
        },
        "string-input-503:555:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3430:2955:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+Sum(cal_rate_[%])",
                    "cooking+Sum(cal_rate_[%])",
                    "hot-water+Sum(cal_rate_[%])",
                    "lighting+Sum(cal_rate_[%])",
                    "space-cooling+Sum(cal_rate_[%])"
                ]
            }
        },
        "string-input-0:2941:2895:843":{
            "type":"string",
            "default":"After joining cal data and main data",
            "description":"Enter Description",
            "example":"After joining cal data and main data"
        },
        "boolean-input-0:3872:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3078:357":{
            "type":"string",
            "default":".*energy.*(solid-bio)-.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy.*(solid-bio)-.*"
        },
        "single-selection-4620:653:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:1014:658":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3436:349":{
            "type":"string",
            "default":"fed_calibrated",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"fed_calibrated"
        },
        "column-filter-0:2942:2914:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "string-input-4620:693:444":{
            "type":"string",
            "default":"lfs_fwaste",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs_fwaste"
        },
        "column-filter-0:3431:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"appliances+energy-demand_calibrated[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "appliances+energy-demand_calibrated[TWh]",
                    "cooking+energy-demand_calibrated[TWh]",
                    "hot-water+energy-demand_calibrated[TWh]",
                    "lighting+energy-demand_calibrated[TWh]",
                    "space-cooling+energy-demand_calibrated[TWh]"
                ]
            }
        },
        "single-selection-0:2420:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-0:1116:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"appliance-new_fridge[num]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "appliance-new_fridge[num]",
                    "appliance-new_freezer[num]",
                    "appliance-new_wmachine[num]",
                    "appliance-new_dishwasher[num]",
                    "appliance-new_dryer[num]",
                    "appliance-new_tv[num]",
                    "appliance-new_comp[num]",
                    "appliance-new_phone[num]"
                ]
            }
        },
        "single-selection-0:3464:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3174:349":{
            "type":"string",
            "default":"bld_energy-demand_heat",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_heat"
        },
        "string-input-0:2540:1245":{
            "type":"string",
            "default":"bld_energy-need_district.*",
            "description":"Enter Description",
            "example":"bld_energy-need_district.*"
        },
        "string-input-0:2540:1246":{
            "type":"string",
            "default":"GWh",
            "description":"Enter Description",
            "example":"GWh"
        },
        "boolean-input-0:3757:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-0:3506:357":{
            "type":"string",
            "default":"energy-demand-calibrated_(.*tial_.*)_e.*_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"energy-demand-calibrated_(.*tial_.*)_e.*_.*\\[.*"
        },
        "string-input-0:1393:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-0:1393:1146:446":{
            "type":"string",
            "default":"bld_(emissions_.*residential_...)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"bld_(emissions_.*residential_...)\\[.*"
        },
        "boolean-input-0:3106:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1393:1146:444":{
            "type":"string",
            "default":"cal_bld_factor",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_bld_factor"
        },
        "string-input-0:3506:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-503:557:561":{
            "type":"string",
            "default":"lever_kcal-req",
            "description":"Enter Description",
            "example":"lever_kcal-req"
        },
        "string-input-503:557:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3154:446":{
            "type":"string",
            "default":"heatcool-eff.*\\+.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"heatcool-eff.*\\+.*"
        },
        "string-input-0:3154:445":{
            "type":"string",
            "default":"heatcool-tech.*_(.*)\\+.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"heatcool-tech.*_(.*)\\+.*"
        },
        "string-input-0:3154:444":{
            "type":"string",
            "default":"technology-factor",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"technology-factor"
        },
        "column-filter-0:3101:3084:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_heat_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_heat_electricity[TWh]",
                    "bld_energy-demand_heat_gas-bio[TWh]",
                    "bld_energy-demand_heat_gas-ff-natural[TWh]",
                    "bld_energy-demand_heat_heat-ambient[TWh]",
                    "bld_energy-demand_heat_heat-geothermal[TWh]",
                    "bld_energy-demand_heat_heat-solar[TWh]",
                    "bld_energy-demand_heat_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_heat_liquid-bio-gasoline[TWh]",
                    "bld_energy-demand_heat_liquid-ff-heatingoil[TWh]",
                    "bld_energy-demand_heat_solid-bio[TWh]",
                    "bld_energy-demand_heat_solid-ff-coal[TWh]",
                    "bld_energy-demand_heat_solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:3174:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "agg-method-0:3099:4544":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-4620:653:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3174:357":{
            "type":"string",
            "default":".*energy.*_.*(liquid-bio)-.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy.*_.*(liquid-bio)-.*"
        },
        "string-input-444:538:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3534:357":{
            "type":"string",
            "default":"bld_emissions.(..._.*)_.*space.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"bld_emissions.(..._.*)_.*space.*\\[.*"
        },
        "single-selection-0:3057:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3534:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3871:349":{
            "type":"string",
            "default":"bld_energy-demand_non-elec",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_non-elec"
        },
        "column-filter-0:2939:2864:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "Years",
                    "Years_number",
                    "use",
                    "technology_cal",
                    "energycarrier_cal",
                    "energy-demand[GWh]",
                    "gas",
                    "cal_rate_[%]"
                ]
            }
        },
        "string-input-444:538:561":{
            "type":"string",
            "default":"lever_heatcool-technology-fuel",
            "description":"Enter Description",
            "example":"lever_heatcool-technology-fuel"
        },
        "single-selection-0:3506:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-4620:680:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-0:3841:3496:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3506:349":{
            "type":"string",
            "default":"bld_energy-demand_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_electricity"
        },
        "single-selection-0:1393:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-4620:680:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-selection-0:3147:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "boolean-input-0:3528:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-0:3101:3083:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:2942:2906:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "string-input-0:3099:3103:349":{
            "type":"string",
            "default":"1990-1995",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"1990-1995"
        },
        "boolean-input-0:3450:2667:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:3099:2953:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "subsector",
                    "buildingtype",
                    "period-duration",
                    "constructed-area[Mm2]",
                    "renovated-area[Mm2]"
                ]
            }
        },
        "column-filter-0:2941:2874:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "buildingtype",
                    "Years",
                    "renovationcategory",
                    "renovated-area-acc[Mm2]",
                    "constructed-area-acc[Mm2]",
                    "demolished-area-acc[Mm2]",
                    "floor-area-increase-acc[Mm2]",
                    "Years_number",
                    "unrenovated-area-acc[Mm2]",
                    "use",
                    "energy-need_renovated[GWh]",
                    "energy-need_constructed[GWh]",
                    "energy-need_unrenovated[GWh]",
                    "energy-need[GWh]",
                    "energy-need_decentral_renovated[GWh]",
                    "energy-need_decentral_constructed[GWh]",
                    "energy-need_decentral_unrenovated[GWh]",
                    "energy-need_decentral_[GWh]",
                    "technology-factor",
                    "technology",
                    "energycarrier",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]",
                    "energy-demand_decentral_[GWh]",
                    "Years_number (#1)",
                    "energy-demand[GWh]",
                    "cal_rate_[%]"
                ]
            }
        },
        "single-selection-4620:680:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3871:357":{
            "type":"string",
            "default":".*energy-demand_(.*)_[s,l,g,h].*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_(.*)_[s,l,g,h].*\\[.*"
        },
        "string-input-0:3623:1245":{
            "type":"string",
            "default":".*\\[GWh\\]",
            "description":"Enter Description",
            "example":".*\\[GWh\\]"
        },
        "string-input-0:3871:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-0:2127:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "single-selection-0:3619:2990:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-selection-0:1684:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3099:3104:357":{
            "type":"string",
            "default":"199[1-6].*ren.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"199[1-6].*ren.*"
        },
        "single-selection-0:3213:2232:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "country-list-0:3099:4543":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"EU28+1"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"EU28+1"
            }
        },
        "string-input-0:2086:1596":{
            "type":"string",
            "default":"(.*)-(.*)_(.*)_(.*)\\[.*",
            "description":"Enter Description",
            "example":"(.*)-(.*)_(.*)_(.*)\\[.*"
        },
        "string-input-0:2086:1597":{
            "type":"string",
            "default":"$4",
            "description":"Enter Description",
            "example":"$4"
        },
        "string-input-503:562:561":{
            "type":"string",
            "default":"lever_appliance-own",
            "description":"Enter Description",
            "example":"lever_appliance-own"
        },
        "single-selection-0:1533:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-503:562:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-selection-0:3836:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "single-selection-0:2942:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:2789:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-0:3436:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3099:3104:354":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm2"
        },
        "column-filter-0:2942:2934:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_constructed[TWh])"
                ]
            }
        },
        "column-filter-0:3431:2923:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+cal_rate_[%]",
                    "cooking+cal_rate_[%]",
                    "hot-water+cal_rate_[%]",
                    "lighting+cal_rate_[%]",
                    "space-cooling+cal_rate_[%]"
                ]
            }
        },
        "string-input-0:3623:1246":{
            "type":"string",
            "default":"TWh",
            "description":"Enter Description",
            "example":"TWh"
        },
        "single-selection-0:1533:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2086:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "single-selection-0:3430:2951:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-832:767":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"1.1 Lifestyle"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"1.1 Lifestyle"
            }
        },
        "column-filter-0:1393:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:3634:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:3626:2961:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "string-input-444:537:555":{
            "type":"string",
            "default":"lever_heatcool-efficiency",
            "description":"Enter Description",
            "example":"lever_heatcool-efficiency"
        },
        "column-selection-0:2081:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"energycarrier"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"energycarrier"
            }
        },
        "string-input-444:537:553":{
            "type":"string",
            "default":"fts_bld_heatcool-efficiency",
            "description":"Enter Description",
            "example":"fts_bld_heatcool-efficiency"
        },
        "column-filter-0:3174:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_heat_liquid-bio-diesel[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_heat_liquid-bio-diesel[TWh]",
                    "bld_energy-demand_heat_liquid-bio-gasoline[TWh]"
                ]
            }
        },
        "single-selection-832:768":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"2.1 Buildings"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"2.1 Buildings"
            }
        },
        "string-input-0:2942:2952:843":{
            "type":"string",
            "default":"EU uncalibrated",
            "description":"Enter Description",
            "example":"EU uncalibrated"
        },
        "string-input-503:562:553":{
            "type":"string",
            "default":"fts_lfs_appliance-own",
            "description":"Enter Description",
            "example":"fts_lfs_appliance-own"
        },
        "string-input-503:562:555":{
            "type":"string",
            "default":"lever_appliance-own",
            "description":"Enter Description",
            "example":"lever_appliance-own"
        },
        "single-selection-0:3757:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-0:3871:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-503:564:555":{
            "type":"string",
            "default":"lever_heatcool-behaviour",
            "description":"Enter Description",
            "example":"lever_heatcool-behaviour"
        },
        "string-input-0:3106:349":{
            "type":"string",
            "default":"Sum",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"Sum"
        },
        "single-selection-0:652:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3372:1596":{
            "type":"string",
            "default":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)"
        },
        "single-selection-0:3757:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-503:556:555":{
            "type":"string",
            "default":"lever_fwaste",
            "description":"Enter Description",
            "example":"lever_fwaste"
        },
        "string-input-503:564:553":{
            "type":"string",
            "default":"fts_lfs_heatcool-behaviour",
            "description":"Enter Description",
            "example":"fts_lfs_heatcool-behaviour"
        },
        "single-selection-0:3564:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-4620:680:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "boolean-input-0:3865:3510:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:3841:3840:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_capex_comp[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_capex_comp[MEUR]",
                    "bld_capex_dishwasher[MEUR]",
                    "bld_capex_dryer[MEUR]",
                    "bld_capex_freezer[MEUR]",
                    "bld_capex_fridge[MEUR]",
                    "bld_capex_phone[MEUR]",
                    "bld_capex_tv[MEUR]",
                    "bld_capex_wmachine[MEUR]"
                ]
            }
        },
        "string-input-0:3372:1597":{
            "type":"string",
            "default":"$4",
            "description":"Enter Description",
            "example":"$4"
        },
        "single-selection-0:1393:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-0:3372:1599":{
            "type":"string",
            "default":"subsector",
            "description":"Enter Description",
            "example":"subsector"
        },
        "column-filter-0:3213:2232:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:3158:1601:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "string-input-0:3158:1601:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-503:556:553":{
            "type":"string",
            "default":"fts_lfs_fwaste",
            "description":"Enter Description",
            "example":"fts_lfs_fwaste"
        },
        "column-selection-0:1603:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-503:558:561":{
            "type":"string",
            "default":"lever_paperpack",
            "description":"Enter Description",
            "example":"lever_paperpack"
        },
        "string-input-0:3158:1601:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "string-input-503:558:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:2939:2859:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "Years",
                    "Years_number",
                    "use",
                    "technology_cal",
                    "energycarrier_cal",
                    "energy-demand[GWh]",
                    "gas",
                    "cal_rate_[%]"
                ]
            }
        },
        "string-input-0:3099:3104:349":{
            "type":"string",
            "default":"1991-1996",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"1991-1996"
        },
        "single-selection-0:1393:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3106:357":{
            "type":"string",
            "default":"stand.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"stand.*"
        },
        "string-input-503:564:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-503:564:561":{
            "type":"string",
            "default":"lever_heatcool-behaviour",
            "description":"Enter Description",
            "example":"lever_heatcool-behaviour"
        },
        "boolean-input-0:3106:3219:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-0:2938:2913:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[GWh]",
                    "gas-bio[GWh]",
                    "gas-ff-natural[GWh]",
                    "heat-ambient[GWh]",
                    "heat-geothermal[GWh]",
                    "heat-solar[GWh]",
                    "liquid-bio-diesel[GWh]",
                    "liquid-bio-gasoline[GWh]",
                    "liquid-ff-heatingoil[GWh]",
                    "solid-bio[GWh]",
                    "solid-ff-coal[GWh]",
                    "solid-waste[GWh]"
                ]
            }
        },
        "column-filter-0:3101:3085:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_education[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_education[TWh]",
                    "bld_energy-demand_non-residential_health[TWh]",
                    "bld_energy-demand_non-residential_hotels[TWh]",
                    "bld_energy-demand_non-residential_offices[TWh]",
                    "bld_energy-demand_non-residential_other[TWh]",
                    "bld_energy-demand_non-residential_trade[TWh]",
                    "bld_energy-demand_residential_mfh[TWh]",
                    "bld_energy-demand_residential_sfh[TWh]"
                ]
            }
        },
        "string-input-0:2058:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "column-selection-0:3158:1601:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"technology"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"technology"
            }
        },
        "string-input-0:2058:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)(\\[.*)"
        },
        "string-input-0:3106:354":{
            "type":"string",
            "default":"TWhstd",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWhstd"
        },
        "string-input-0:2058:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-0:1832:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-0:1832:1596":{
            "type":"string",
            "default":"bld_(.*)_(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"bld_(.*)_(.*)_(.*)(\\[.*)"
        },
        "string-input-0:1832:1599":{
            "type":"string",
            "default":"buildingpart",
            "description":"Enter Description",
            "example":"buildingpart"
        },
        "column-selection-0:1596:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-444:545:553":{
            "type":"string",
            "default":"fts_bld_climate",
            "description":"Enter Description",
            "example":"fts_bld_climate"
        },
        "string-input-444:545:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-0:3099:3104:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:1014:653":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_building-mix_sfh_1800-2010[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_building-mix_sfh_1800-2010[%]",
                    "bld_building-mix_mfh_1800-2010[%]"
                ]
            }
        },
        "string-input-444:538:553":{
            "type":"string",
            "default":"fts_bld_heatcool-technology-fuel",
            "description":"Enter Description",
            "example":"fts_bld_heatcool-technology-fuel"
        },
        "single-selection-0:1393:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:2783:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2942:2910:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "string-input-0:3534:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "string-input-0:2941:2893:843":{
            "type":"string",
            "default":"After joining cal data and main data",
            "description":"Enter Description",
            "example":"After joining cal data and main data"
        },
        "single-selection-0:3843:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:3099:3105:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:2834:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:1393:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-0:3213:2232:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-503:563:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:3836:1599":{
            "type":"string",
            "default":"technology_code",
            "description":"Enter Description",
            "example":"technology_code"
        },
        "string-input-4620:693:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-503:563:561":{
            "type":"string",
            "default":"lever_appliance-use",
            "description":"Enter Description",
            "example":"lever_appliance-use"
        },
        "string-input-444:538:555":{
            "type":"string",
            "default":"lever_heatcool-technology-fuel",
            "description":"Enter Description",
            "example":"lever_heatcool-technology-fuel"
        },
        "single-selection-4620:695:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3836:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-0:3836:1596":{
            "type":"string",
            "default":".*(reno-...-..._.*)_.*",
            "description":"Enter Description",
            "example":".*(reno-...-..._.*)_.*"
        },
        "string-input-4620:693:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-4620:693:1146:446":{
            "type":"string",
            "default":"lfs_fwaste_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_fwaste_(.*)\\[kcal]"
        },
        "string-input-4620:693:1146:444":{
            "type":"string",
            "default":"lfs_fwaste",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs_fwaste"
        },
        "boolean-input-0:3833:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:3506:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-demand-calibrated_residential_appliances_electricity_comp[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-demand-calibrated_residential_appliances_electricity_comp[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_dishwasher[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_dryer[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_freezer[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_fridge[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_phone[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_tv[TWh]",
                    "energy-demand-calibrated_residential_appliances_electricity_wmachine[TWh]",
                    "energy-demand-calibrated_residential_cooking_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_hot-water_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_residential_hot-water_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_lighting_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_residential_lighting_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_space-cooling_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_residential_space-cooling_electricity_all-tech[TWh]",
                    "energy-demand-calibrated_non-residential_appliances_electricity_comp[TWh]"
                ]
            }
        },
        "string-input-0:3099:3105:354":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm2"
        },
        "string-input-503:557:553":{
            "type":"string",
            "default":"fts_lfs_kcal-req",
            "description":"Enter Description",
            "example":"fts_lfs_kcal-req"
        },
        "string-input-0:3154:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "column-filter-0:2789:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-need_renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-need_renovated[GWh]",
                    "energy-need_constructed[GWh]",
                    "energy-need_unrenovated[GWh]",
                    "energy-need[GWh]"
                ]
            }
        },
        "column-filter-0:2942:2933:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])"
                ]
            }
        },
        "column-filter-4625:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "bld_energy-need-per-m2_residential_sfh_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_residential_mfh_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_trade_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_education_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_hotels_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_health_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_offices_1800-2010[kWh/m2 year]",
                    "bld_energy-need-per-m2_non-residential_other_1800-2010[kWh/m2 year]"
                ]
            }
        },
        "string-input-503:563:555":{
            "type":"string",
            "default":"lever_appliance-use",
            "description":"Enter Description",
            "example":"lever_appliance-use"
        },
        "string-input-503:557:555":{
            "type":"string",
            "default":"lever_kcal-req",
            "description":"Enter Description",
            "example":"lever_kcal-req"
        },
        "single-selection-4620:680:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-503:563:553":{
            "type":"string",
            "default":"fts_lfs_appliance-use",
            "description":"Enter Description",
            "example":"fts_lfs_appliance-use"
        },
        "string-input-0:2942:2947:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "boolean-input-0:1593:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "string-input-0:3099:3105:357":{
            "type":"string",
            "default":"199[2-7].*ren.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"199[2-7].*ren.*"
        },
        "column-filter-0:2942:2927:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_renovated[TWh])"
                ]
            }
        },
        "column-filter-4620:679:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:3106:3218:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-0:2006:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:3008:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:1393:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "single-selection-0:3101:2808:528":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"area graph"
                }
            },
            "description":"Choose the graph type",
            "example":{
                "variable_value":"area graph"
            }
        },
        "column-filter-4620:679:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-0:1116:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "single-selection-0:3101:2808:523":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"No"
                }
            },
            "description":"Display a unique variable for all individual country",
            "example":{
                "variable_value":"No"
            }
        },
        "column-filter-0:3008:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_hot-water_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_heat_residential_electricity[TWh]",
                    "bld_energy-demand_heat_non-residential_electricity[TWh]"
                ]
            }
        },
        "single-selection-0:3482:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-0:3436:2906:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking+ColumnValues",
                    "hot-water+ColumnValues",
                    "lighting+ColumnValues",
                    "space-cooling+ColumnValues"
                ]
            }
        },
        "column-filter-0:3482:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-non-elec_non-sh_CH4_non-residential_hot-water[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-non-elec_non-sh_CH4_non-residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_CH4_non-residential_space-cooling[Mt]",
                    "bld_emissions-non-elec_non-sh_CH4_residential_cooking[Mt]",
                    "bld_emissions-non-elec_non-sh_CH4_residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_non-residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_non-residential_space-cooling[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_residential_cooking[Mt]",
                    "bld_emissions-non-elec_non-sh_CO2_residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_N2O_non-residential_hot-water[Mt]",
                    "bld_emissions-non-elec_non-sh_N2O_non-residential_space-cooling[Mt]",
                    "bld_emissions-non-elec_non-sh_N2O_residential_cooking[Mt]",
                    "bld_emissions-non-elec_non-sh_N2O_residential_hot-water[Mt]"
                ]
            }
        },
        "boolean-input-0:3158:3144:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "boolean-input-0:3147:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:2421:446":{
            "type":"string",
            "default":"cal_rate_\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"cal_rate_\\[.*\\]"
        },
        "single-selection-0:837:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:3628:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2421:445":{
            "type":"string",
            "default":"energy-demand(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand(.*)\\[.*"
        },
        "single-selection-4620:679:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-503:567:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-selection-0:3833:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "single-selection-0:3620:3036:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:2421:444":{
            "type":"string",
            "default":"energy-demand_calibrated",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_calibrated"
        },
        "string-input-503:567:561":{
            "type":"string",
            "default":"lever_product-substitution-rate",
            "description":"Enter Description",
            "example":"lever_product-substitution-rate"
        },
        "single-selection-0:3865:3518:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-444:544:553":{
            "type":"string",
            "default":"ots_bld_climate",
            "description":"Enter Description",
            "example":"ots_bld_climate"
        },
        "string-input-4620:679:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-444:544:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:2940:2883:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "cal_rate_[%]"
                ]
            }
        },
        "column-filter-0:2792:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emission-factor_CO2[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emission-factor_CO2[Mt/TWh]"
                ]
            }
        },
        "string-input-503:567:555":{
            "type":"string",
            "default":"lever_product-substitution-rate",
            "description":"Enter Description",
            "example":"lever_product-substitution-rate"
        },
        "single-selection-4620:693:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "boolean-input-0:3078:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3524:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:1116:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "string-input-807:553":{
            "type":"string",
            "default":"ots_tec_ccus",
            "description":"Enter Description",
            "example":"ots_tec_ccus"
        },
        "string-input-0:837:444":{
            "type":"string",
            "default":"constructed-surface-area",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"constructed-surface-area"
        },
        "string-input-807:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "column-filter-0:3574:3559:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_floor-area-constructed_dep[million_m2]",
                    "bld_floor-area-constructed_med[million_m2]",
                    "bld_floor-area-constructed_shl[million_m2]",
                    "bld_floor-area-renovated_dep[million_m2]",
                    "bld_floor-area-renovated_med[million_m2]",
                    "bld_floor-area-renovated_shl[million_m2]",
                    "bld_floor-area-unrenovated_exi[million_m2]"
                ]
            }
        },
        "string-input-0:837:445":{
            "type":"string",
            "default":"surface-ratio_(.*)",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"surface-ratio_(.*)"
        },
        "string-input-0:837:446":{
            "type":"string",
            "default":".*constructed-area.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":".*constructed-area.*"
        },
        "string-input-0:3217:1245":{
            "type":"string",
            "default":".*\\[GWh\\]",
            "description":"Enter Description",
            "example":".*\\[GWh\\]"
        },
        "string-input-503:567:553":{
            "type":"string",
            "default":"fts_lfs_product-substitution-rate",
            "description":"Enter Description",
            "example":"fts_lfs_product-substitution-rate"
        },
        "string-input-0:3217:1246":{
            "type":"string",
            "default":"TWh",
            "description":"Enter Description",
            "example":"TWh"
        },
        "single-selection-0:3619:2987:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:2081:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "single-selection-0:3101:3085:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-0:2127:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3862:3688:843":{
            "type":"string",
            "default":"Appliances number",
            "description":"Enter Description",
            "example":"Appliances number"
        },
        "column-filter-0:2938:2902:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]"
                ]
            }
        },
        "boolean-input-0:441:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-4620:695:1146:444":{
            "type":"string",
            "default":"lfs_diet",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs_diet"
        },
        "string-input-0:3099:3100:3809:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:2640:2380:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3527:349":{
            "type":"string",
            "default":"bld_emissions_space-heating",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_space-heating"
        },
        "string-input-0:3520:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-0:3520:357":{
            "type":"string",
            "default":".*energy-demand_.*tial_(.*)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*energy-demand_.*tial_(.*)_.*\\[.*"
        },
        "column-filter-0:2939:2869:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "Years",
                    "Years_number",
                    "use",
                    "technology_cal",
                    "energycarrier_cal",
                    "energy-demand[GWh]",
                    "gas",
                    "cal_rate_[%]"
                ]
            }
        },
        "column-filter-0:3431:2914:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances[TWh]",
                    "cooking[TWh]",
                    "hot-water[TWh]",
                    "lighting[TWh]",
                    "space-cooling[TWh]"
                ]
            }
        },
        "column-filter-0:3078:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:2941:2893:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "cal_rate_[%]"
                ]
            }
        },
        "string-input-0:2640:2231:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "column-filter-4620:679:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-0:2640:2380:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-0:2793:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3099:3100:3993:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3527:357":{
            "type":"string",
            "default":".*emissions.(.*_.*)_.*ial_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions.(.*_.*)_.*ial_.*\\[.*"
        },
        "single-selection-0:722:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-0:3213:2232:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3527:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "disabled-4620:695:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "string-input-0:3099:3991:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "boolean-input-0:1819:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-4620:695:1164":{
            "type":"string",
            "default":"2013",
            "description":"Enter Description",
            "example":"2013"
        },
        "string-input-4620:695:1163":{
            "type":"string",
            "default":"2000",
            "description":"Enter Description",
            "example":"2000"
        },
        "column-filter-0:3524:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions_CO2_non-residential_education_gas-bio[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions_CO2_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_education_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_health_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_offices_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_other_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_N2O_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_CH4_non-residential_trade_gas-bio[Mt]",
                    "bld_emissions_CO2_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_N2O_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_CH4_residential_mfh_gas-bio[Mt]",
                    "bld_emissions_CO2_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_N2O_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_CH4_residential_sfh_gas-bio[Mt]",
                    "bld_emissions_CO2_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_education_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_health_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_offices_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_other_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_non-residential_trade_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_residential_mfh_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_N2O_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_CH4_residential_sfh_gas-ff-natural[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-ambient[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-ambient[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-ambient[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-geothermal[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-geothermal[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-geothermal[Mt]",
                    "bld_emissions_CO2_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_education_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_health_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_offices_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_other_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_N2O_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_CH4_non-residential_trade_heat-solar[Mt]",
                    "bld_emissions_CO2_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_N2O_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_CH4_residential_mfh_heat-solar[Mt]",
                    "bld_emissions_CO2_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_N2O_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_CH4_residential_sfh_heat-solar[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-bio-diesel[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-bio-gasoline[Mt]",
                    "bld_emissions_CO2_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_education_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_health_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_offices_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_other_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_non-residential_trade_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_residential_mfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_N2O_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CH4_residential_sfh_liquid-ff-heatingoil[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-bio[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-bio[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-bio[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-ff-coal[Mt]",
                    "bld_emissions_CO2_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_education_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_health_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_hotels_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_offices_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_other_solid-waste[Mt]",
                    "bld_emissions_CO2_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_N2O_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_CH4_non-residential_trade_solid-waste[Mt]",
                    "bld_emissions_CO2_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_N2O_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_CH4_residential_mfh_solid-waste[Mt]",
                    "bld_emissions_CO2_residential_sfh_solid-waste[Mt]",
                    "bld_emissions_N2O_residential_sfh_solid-waste[Mt]",
                    "bld_emissions_CH4_residential_sfh_solid-waste[Mt]"
                ]
            }
        },
        "string-input-0:3520:349":{
            "type":"string",
            "default":"bld_energy-demand_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_energy-demand_electricity"
        },
        "string-input-0:837:460":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mm2"
        },
        "column-filter-0:2942:2913:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity[TWh]",
                    "gas-bio[TWh]",
                    "gas-ff-natural[TWh]",
                    "heat-ambient[TWh]",
                    "heat-geothermal[TWh]",
                    "heat-solar[TWh]",
                    "liquid-bio-diesel[TWh]",
                    "liquid-bio-gasoline[TWh]",
                    "liquid-ff-heatingoil[TWh]",
                    "solid-bio[TWh]",
                    "solid-ff-coal[TWh]",
                    "solid-waste[TWh]"
                ]
            }
        },
        "single-selection-4620:679:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:3158:1600:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "boolean-input-0:3464:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-selection-0:3373:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "string-input-0:3158:1600:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-0:3158:1600:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "string-input-0:2942:2933:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "string-input-4620:695:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:3106:3219:349":{
            "type":"string",
            "default":"Sum",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"Sum"
        },
        "string-input-444:543:553":{
            "type":"string",
            "default":"dhg_fixed-assumptions",
            "description":"Enter Description",
            "example":"dhg_fixed-assumptions"
        },
        "string-input-0:1603:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-444:543:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:1603:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "column-selection-0:1595:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"ColumnNames"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"ColumnNames"
            }
        },
        "column-filter-0:3106:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"standardized_subsector_Austria[TWhstd]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "standardized_subsector_Austria[TWhstd]",
                    "standardized_subsector_Belgium[TWhstd]",
                    "standardized_subsector_Bulgaria[TWhstd]",
                    "standardized_subsector_Croatia[TWhstd]",
                    "standardized_subsector_Cyprus[TWhstd]",
                    "standardized_subsector_Czech Republic[TWhstd]",
                    "standardized_subsector_Denmark[TWhstd]",
                    "standardized_subsector_Estonia[TWhstd]",
                    "standardized_subsector_Finland[TWhstd]",
                    "standardized_subsector_France[TWhstd]",
                    "standardized_subsector_Germany[TWhstd]",
                    "standardized_subsector_Greece[TWhstd]",
                    "standardized_subsector_Hungary[TWhstd]",
                    "standardized_subsector_Ireland[TWhstd]",
                    "standardized_subsector_Italy[TWhstd]",
                    "standardized_subsector_Latvia[TWhstd]",
                    "standardized_subsector_Lithuania[TWhstd]",
                    "standardized_subsector_Luxembourg[TWhstd]",
                    "standardized_subsector_Malta[TWhstd]",
                    "standardized_subsector_Netherlands[TWhstd]",
                    "standardized_subsector_Poland[TWhstd]",
                    "standardized_subsector_Portugal[TWhstd]",
                    "standardized_subsector_Romania[TWhstd]",
                    "standardized_subsector_Slovakia[TWhstd]",
                    "standardized_subsector_Slovenia[TWhstd]",
                    "standardized_subsector_Spain[TWhstd]",
                    "standardized_subsector_Sweden[TWhstd]",
                    "standardized_subsector_Switzerland[TWhstd]",
                    "standardized_subsector_United Kingdom[TWhstd]"
                ]
            }
        },
        "string-input-0:1603:1599":{
            "type":"string",
            "default":"",
            "description":"Enter Description",
            "example":""
        },
        "single-selection-0:3078:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:3008:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "boolean-input-0:1595:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "boolean-input-0:1533:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-0:3106:3219:357":{
            "type":"string",
            "default":".*\\+.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*\\+.*"
        },
        "string-input-0:3106:3219:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-0:837:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"constructed-area[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "constructed-area[Mm2]"
                ]
            }
        },
        "boolean-input-0:3482:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-0:3564:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"non-residential_energy-need_constructed_dep[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "non-residential_energy-need_constructed_dep[TWh]",
                    "non-residential_energy-need_constructed_med[TWh]",
                    "non-residential_energy-need_constructed_shl[TWh]",
                    "residential_energy-need_constructed_dep[TWh]",
                    "residential_energy-need_constructed_med[TWh]",
                    "residential_energy-need_constructed_shl[TWh]",
                    "non-residential_energy-need_renovated_dep[TWh]",
                    "non-residential_energy-need_renovated_med[TWh]",
                    "non-residential_energy-need_renovated_shl[TWh]",
                    "residential_energy-need_renovated_dep[TWh]",
                    "residential_energy-need_renovated_med[TWh]",
                    "residential_energy-need_renovated_shl[TWh]",
                    "non-residential_energy-need_unrenovated_exi[TWh]",
                    "residential_energy-need_unrenovated_exi[TWh]",
                    "non-residential_energy-need_constructed_dep[GWh]",
                    "non-residential_energy-need_constructed_med[GWh]",
                    "non-residential_energy-need_constructed_shl[GWh]",
                    "residential_energy-need_constructed_dep[GWh]",
                    "residential_energy-need_constructed_med[GWh]",
                    "residential_energy-need_constructed_shl[GWh]",
                    "non-residential_energy-need_renovated_dep[GWh]",
                    "non-residential_energy-need_renovated_med[GWh]",
                    "non-residential_energy-need_renovated_shl[GWh]",
                    "residential_energy-need_renovated_dep[GWh]",
                    "residential_energy-need_renovated_med[GWh]",
                    "residential_energy-need_renovated_shl[GWh]",
                    "non-residential_energy-need_unrenovated_exi[GWh]",
                    "residential_energy-need_unrenovated_exi[GWh]"
                ]
            }
        },
        "boolean-input-0:3212:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-4620:695:1146:446":{
            "type":"string",
            "default":"lfs_diet_(.*)\\[kcal]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_diet_(.*)\\[kcal]"
        },
        "string-input-4620:695:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "boolean-input-4620:693:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-selection-0:2058:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"buildingtype"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"buildingtype"
            }
        },
        "string-input-0:2715:2505:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        },
        "string-input-0:2715:2505:1599":{
            "type":"string",
            "default":"unit",
            "description":"Enter Description",
            "example":"unit"
        },
        "string-input-0:3099:3103:354":{
            "type":"string",
            "default":"Mm2",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mm2"
        },
        "column-filter-0:3436:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:2715:2505:1596":{
            "type":"string",
            "default":"(.*)\\[(.*)\\]",
            "description":"Enter Description",
            "example":"(.*)\\[(.*)\\]"
        },
        "column-filter-0:2127:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emissions-CH4_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-solar_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-ff-heatingoil_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-ff-natural_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CO2_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-N2O_non-residential_space-cooling_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_heat-ambient_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_cooking_gas-bio_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_gas-bio_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_solid-ff-coal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-diesel_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_liquid-bio-gasoline_all-tech[Mt]",
                    "emissions-CH4_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CO2_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-N2O_non-residential_hot-water_heat-geothermal_all-tech[Mt]",
                    "emissions-CH4_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-CO2_residential_hot-water_solid-waste_all-tech[Mt]",
                    "emissions-N2O_residential_hot-water_solid-waste_all-tech[Mt]"
                ]
            }
        },
        "double-input-0:3623:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-0:3099:3103:357":{
            "type":"string",
            "default":"199[0-5].*ren.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"199[0-5].*ren.*"
        },
        "boolean-input-4620:680:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-4620:679:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-0:2942:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"electricity+Sum(energy-demand_calibrated_decentral_renovated[TWh])"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "electricity+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "electricity+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "electricity+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "gas-bio+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-ambient+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "heat-solar+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-bio+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_calibrated_decentral_constructed[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_renovated[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_unrenovated[TWh])",
                    "solid-waste+Sum(energy-demand_calibrated_decentral_constructed[TWh])"
                ]
            }
        },
        "boolean-input-0:1684:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "column-filter-0:2942:2929:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_decentral_constructed[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_constructed[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_constructed[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_constructed[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_constructed[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_constructed[TWh])"
                ]
            }
        },
        "single-selection-833:767":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"1.3 Technology"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"1.3 Technology"
            }
        },
        "single-selection-833:768":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"2.1 Buildings"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"2.1 Buildings"
            }
        },
        "string-input-4620:679:1146:444":{
            "type":"string",
            "default":"lfs",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"lfs"
        },
        "single-selection-0:1130:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "string-input-4620:679:1146:446":{
            "type":"string",
            "default":"lfs_(.*)\\[pkm]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_(.*)\\[pkm]"
        },
        "column-filter-0:2793:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emission-factor_CO2[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emission-factor_CO2[Mt/TWh]"
                ]
            }
        },
        "string-input-4620:679:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "single-selection-0:1819:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "boolean-input-0:1596:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "boolean-input-0:3841:3496:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:3106:3218:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Austria_Sum"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "Austria_Sum",
                    "Belgium_Sum",
                    "Bulgaria_Sum",
                    "Croatia_Sum",
                    "Cyprus_Sum",
                    "Czech Republic_Sum",
                    "Denmark_Sum",
                    "Estonia_Sum",
                    "Finland_Sum",
                    "France_Sum",
                    "Germany_Sum",
                    "Greece_Sum",
                    "Hungary_Sum",
                    "Ireland_Sum",
                    "Italy_Sum",
                    "Latvia_Sum",
                    "Lithuania_Sum",
                    "Luxembourg_Sum",
                    "Malta_Sum",
                    "Netherlands_Sum",
                    "Poland_Sum",
                    "Portugal_Sum",
                    "Romania_Sum",
                    "Slovakia_Sum",
                    "Slovenia_Sum",
                    "Spain_Sum",
                    "Sweden_Sum",
                    "Switzerland_Sum",
                    "United Kingdom_Sum"
                ]
            }
        },
        "string-input-0:2942:2934:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "boolean-input-4620:695:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-0:837:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-4620:679:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-0:3099:3100:3994:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-0:3436:2927:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "string-input-444:542:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-0:3501:3495:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-0:3833:1599":{
            "type":"string",
            "default":"name_short",
            "description":"Enter Description",
            "example":"name_short"
        },
        "string-input-0:3099:3993:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "double-input-0:2540:1247":{
            "type":"number",
            "default":1.0,
            "description":"Enter Description",
            "example":1.0
        },
        "string-input-0:2792:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-444:542:553":{
            "type":"string",
            "default":"bld_fixed-assumptions",
            "description":"Enter Description",
            "example":"bld_fixed-assumptions"
        },
        "single-selection-0:2640:2380:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3099:3100:3809:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "column-filter-0:2939:2868:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "subsector",
                    "Years",
                    "Years_number",
                    "use",
                    "technology_cal",
                    "energycarrier_cal",
                    "energy-demand[GWh]",
                    "gas",
                    "cal_rate_[%]"
                ]
            }
        },
        "single-selection-4620:680:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-4620:695:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "column-filter-0:3099:3100:3993:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "Austria",
                    "Belgium",
                    "Bulgaria",
                    "Croatia",
                    "Cyprus",
                    "Czech Republic",
                    "Denmark",
                    "Estonia",
                    "Finland",
                    "France",
                    "Germany",
                    "Greece",
                    "Hungary",
                    "Ireland",
                    "Italy",
                    "Latvia",
                    "Lithuania",
                    "Luxembourg",
                    "Malta",
                    "Netherlands",
                    "Poland",
                    "Portugal",
                    "Romania",
                    "Slovakia",
                    "Slovenia",
                    "Spain",
                    "Sweden",
                    "Switzerland",
                    "United Kingdom"
                ]
            }
        },
        "string-input-0:3099:3809:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-0:3101:3086:535":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Select the columns for data selection",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "bld_energy-demand_non-residential_education[TWh]"
                ]
            }
        },
        "string-input-0:3833:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "boolean-input-0:1611:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "string-input-0:3833:1596":{
            "type":"string",
            "default":".*(reno-...-...)_.*",
            "description":"Enter Description",
            "example":".*(reno-...-...)_.*"
        },
        "column-filter-0:2942:2930:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "electricity+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "gas-bio+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "gas-ff-natural+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-ambient+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-geothermal+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "heat-solar+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-bio-diesel+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-bio-gasoline+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "liquid-ff-heatingoil+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-bio+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-ff-coal+Sum(energy-demand_decentral_unrenovated[TWh])",
                    "solid-waste+Sum(energy-demand_decentral_unrenovated[TWh])"
                ]
            }
        },
        "single-selection-0:2792:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-0:3436:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking+ColumnValues",
                    "hot-water+ColumnValues",
                    "lighting+ColumnValues",
                    "space-cooling+ColumnValues"
                ]
            }
        },
        "column-filter-4620:693:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-503:553:553":{
            "type":"string",
            "default":"cal_lfs_calibration",
            "description":"Enter Description",
            "example":"cal_lfs_calibration"
        },
        "string-input-503:553:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "string-input-0:2792:445":{
            "type":"string",
            "default":"energy-demand_calibrated_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand_calibrated_(.*)\\[.*"
        },
        "string-input-0:2792:446":{
            "type":"string",
            "default":"emission-factor_CH4\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"emission-factor_CH4\\[.*"
        },
        "string-input-0:2640:2232:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "string-input-0:2792:444":{
            "type":"string",
            "default":"emissions_CH4",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions_CH4"
        },
        "string-input-0:2640:2232:445":{
            "type":"string",
            "default":"cal(.*)",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal(.*)"
        },
        "string-input-0:2640:2232:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "single-selection-0:3154:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:3430:2952:843":{
            "type":"string",
            "default":"EU uncalibrated",
            "description":"Enter Description",
            "example":"EU uncalibrated"
        },
        "string-input-0:3431:2906:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "string-input-0:1854:1246":{
            "type":"string",
            "default":"m2",
            "description":"Enter Description",
            "example":"m2"
        },
        "string-input-0:1854:1245":{
            "type":"string",
            "default":".*Mm2.*",
            "description":"Enter Description",
            "example":".*Mm2.*"
        },
        "column-filter-0:2006:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"energy-need_decentral__renovated[GWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "energy-need_decentral__renovated[GWh]",
                    "energy-need_decentral__constructed[GWh]",
                    "energy-need_decentral__unrenovated[GWh]",
                    "energy-need_decentral_[GWh]"
                ]
            }
        },
        "column-filter-0:1638:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_nonres-floor-area_non-residential_offices[1000m2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_nonres-floor-area_non-residential_offices[1000m2]",
                    "bld_nonres-floor-area_non-residential_hotels[1000m2]",
                    "bld_nonres-floor-area_non-residential_trade[1000m2]",
                    "bld_nonres-floor-area_non-residential_education[1000m2]",
                    "bld_nonres-floor-area_non-residential_health[1000m2]",
                    "bld_nonres-floor-area_non-residential_other[1000m2]",
                    "bld_floor-area_residential_sfh[1000m2]",
                    "bld_floor-area_residential_mfh[1000m2]"
                ]
            }
        },
        "string-input-503:554:561":{
            "type":"string",
            "default":"lever_diet",
            "description":"Enter Description",
            "example":"lever_diet"
        },
        "string-input-503:554:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "boolean-input-0:3841:3840:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:3757:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"renovated-area-acc-prev[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "renovated-area-acc-prev[Mm2]",
                    "constructed-area-acc-prev[Mm2]",
                    "demolished-area-acc-prev[Mm2]",
                    "unrenovated-area-acc-prev[Mm2]"
                ]
            }
        },
        "column-selection-0:1592:1595":{
            "type":"object",
            "properties":{
                "column":{
                    "type":"string",
                    "default":"buildingtype"
                }
            },
            "description":"Enter Description",
            "example":{
                "column":"buildingtype"
            }
        },
        "string-input-0:3620:3042:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "boolean-input-0:3620:3042:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-0:3065:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3620:3042:357":{
            "type":"string",
            "default":".*emissions.(...)_.*liquid-bio-.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions.(...)_.*liquid-bio-.*"
        },
        "single-selection-4620:679:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "column-filter-0:3431:2927:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+Sum(energy-demand_calibrated[TWh])",
                    "cooking+Sum(energy-demand_calibrated[TWh])",
                    "hot-water+Sum(energy-demand_calibrated[TWh])",
                    "lighting+Sum(energy-demand_calibrated[TWh])",
                    "space-cooling+Sum(energy-demand_calibrated[TWh])"
                ]
            }
        },
        "string-input-0:2942:2935:843":{
            "type":"string",
            "default":"Romania calibration rate",
            "description":"Enter Description",
            "example":"Romania calibration rate"
        },
        "country-list-0:3101:2808:4543":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"EU28+1"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"EU28+1"
            }
        },
        "single-selection-0:2337:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-0:2006:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3065:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_emissions-CH4_non-residential_non-elec_appliances_non-sh[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_emissions-CH4_non-residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-CH4_residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-CO2_non-residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-CO2_residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-N2O_non-residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-N2O_residential_non-elec_appliances_non-sh[Mt]",
                    "bld_emissions-CH4_non-residential_space-heating[Mt]",
                    "bld_emissions-CH4_residential_space-heating[Mt]",
                    "bld_emissions-CO2_non-residential_space-heating[Mt]",
                    "bld_emissions-CO2_residential_space-heating[Mt]",
                    "bld_emissions-N2O_non-residential_space-heating[Mt]",
                    "bld_emissions-N2O_residential_space-heating[Mt]"
                ]
            }
        },
        "column-filter-0:3619:2990:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:2337:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "string-input-0:2337:445":{
            "type":"string",
            "default":"emission-factor_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"emission-factor_(.*)\\[.*"
        },
        "string-input-0:2337:444":{
            "type":"string",
            "default":"emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions"
        },
        "string-input-0:2420:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "boolean-input-0:3148:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "column-filter-0:2938:2904:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]"
                ]
            }
        },
        "string-input-0:3620:3042:349":{
            "type":"string",
            "default":"bld_emissions_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions_liquid-bio"
        },
        "column-filter-0:724:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-0:3431:2955:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "appliances+Sum(energy-demand_calibrated[TWh])",
                    "cooking+Sum(energy-demand_calibrated[TWh])",
                    "hot-water+Sum(energy-demand_calibrated[TWh])",
                    "lighting+Sum(energy-demand_calibrated[TWh])",
                    "space-cooling+Sum(energy-demand_calibrated[TWh])"
                ]
            }
        },
        "single-selection-4620:695:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-0:3158:1600:1598":{
            "type":"boolean",
            "default":"false",
            "description":"Enter Description",
            "example":false
        },
        "agg-method-0:3099:3100:4544":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"Sum"
            }
        },
        "disabled-4620:679:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "column-filter-0:3700:3698:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "ColumnValues"
                ]
            }
        },
        "single-selection-0:3620:3037:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:1595:1597":{
            "type":"string",
            "default":"$3",
            "description":"Enter Description",
            "example":"$3"
        },
        "string-input-0:1595:1596":{
            "type":"string",
            "default":"(.*)_(.*)_(.*)-(.*)_(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)_(.*)-(.*)_(.*)-(.*)(\\[.*)"
        },
        "string-input-0:1595:1599":{
            "type":"string",
            "default":"buildingtype",
            "description":"Enter Description",
            "example":"buildingtype"
        },
        "string-input-0:3626:2959:843":{
            "type":"string",
            "default":"EU calibrated",
            "description":"Enter Description",
            "example":"EU calibrated"
        },
        "column-filter-4620:693:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-0:2420:444":{
            "type":"string",
            "default":"energy-demand_calibrated",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy-demand_calibrated"
        },
        "string-input-0:2420:446":{
            "type":"string",
            "default":"cal_rate_.*\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"cal_rate_.*\\[.*\\]"
        },
        "string-input-0:2420:445":{
            "type":"string",
            "default":"energy-demand_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand_(.*)\\[.*"
        },
        "string-input-4625:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-0:3099:3100:3994:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "test_value1[unit]",
                    "test_value2[unit]"
                ]
            }
        },
        "boolean-input-0:2845:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-0:3430:2923:843":{
            "type":"string",
            "default":"EU calibration rate",
            "description":"Enter Description",
            "example":"EU calibration rate"
        },
        "single-selection-0:2792:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-0:2640:2231:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-0:2640:2231:446":{
            "type":"string",
            "default":"energy-demand.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"energy-demand.*"
        },
        "string-input-0:2337:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "column-filter-0:2938:2889:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energy-demand_decentral_renovated[GWh]",
                    "energy-demand_decentral_constructed[GWh]",
                    "energy-demand_decentral_unrenovated[GWh]",
                    "energy-demand_decentral_[GWh]"
                ]
            }
        },
        "string-input-0:2640:2231:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "boolean-input-0:3065:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-0:2942:2909:843":{
            "type":"string",
            "default":"EU after calibration",
            "description":"Enter Description",
            "example":"EU after calibration"
        },
        "boolean-input-0:1592:1598":{
            "type":"boolean",
            "default":"true",
            "description":"Enter Description",
            "example":true
        },
        "single-selection-0:2792:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-0:3865:3518:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_energy-demand_non-residential_appliances_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_non-residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-residential_lighting_electricity[TWh]",
                    "bld_energy-demand_non-residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_cooking_electricity[TWh]",
                    "bld_energy-demand_residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_residential_lighting_electricity[TWh]",
                    "bld_energy-demand_residential_space-cooling_electricity[TWh]"
                ]
            }
        },
        "boolean-input-0:3868:3866:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-0:3436:2933:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "cooking+ColumnValues",
                    "hot-water+ColumnValues",
                    "lighting+ColumnValues",
                    "space-cooling+ColumnValues"
                ]
            }
        },
        "single-selection-0:2793:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-0:2793:444":{
            "type":"string",
            "default":"emissions_N2O",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions_N2O"
        },
        "string-input-0:2793:445":{
            "type":"string",
            "default":"energy-demand_calibrated_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"energy-demand_calibrated_(.*)\\[.*"
        },
        "string-input-0:2793:446":{
            "type":"string",
            "default":"emission-factor_N2O\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"emission-factor_N2O\\[.*"
        },
        "single-selection-0:2337:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-503:568:553":{
            "type":"string",
            "default":"fts_lfs_cooled-floor-fraction",
            "description":"Enter Description",
            "example":"fts_lfs_cooled-floor-fraction"
        },
        "string-input-0:3065:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-0:3065:349":{
            "type":"string",
            "default":"bld_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"bld_emissions"
        },
        "string-input-0:3700:3689:843":{
            "type":"string",
            "default":"Lighting",
            "description":"Enter Description",
            "example":"Lighting"
        },
        "single-selection-0:2942:2951:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-0:3524:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-503:568:555":{
            "type":"string",
            "default":"lever_floor-area-fraction",
            "description":"Enter Description",
            "example":"lever_floor-area-fraction"
        },
        "column-filter-0:2721:1017:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_floor-area_residential_sfh[Mm2]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_floor-area_residential_sfh[Mm2]",
                    "bld_floor-area_residential_mfh[Mm2]"
                ]
            }
        },
        "string-input-503:552:553":{
            "type":"string",
            "default":"ots_lfs.*",
            "description":"Enter Description",
            "example":"ots_lfs.*"
        },
        "string-input-503:552:554":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-0:2421:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-0:2721:1015:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-0:3431:2933:843":{
            "type":"string",
            "default":"Romania after calibration",
            "description":"Enter Description",
            "example":"Romania after calibration"
        },
        "string-input-0:3158:3144:1599":{
            "type":"string",
            "default":"new_name",
            "description":"Enter Description",
            "example":"new_name"
        },
        "string-input-0:2421:460":{
            "type":"string",
            "default":"GWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"GWh"
        },
        "column-filter-0:3433:2947:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "bld_energy-demand_non-residential_appliances_electricity[TWh]",
                    "bld_energy-demand_non-residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_non-residential_lighting_electricity[TWh]",
                    "bld_energy-demand_non-residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand_residential_appliances_electricity[TWh]",
                    "bld_energy-demand_residential_cooking_electricity[TWh]",
                    "bld_energy-demand_residential_hot-water_electricity[TWh]",
                    "bld_energy-demand_residential_lighting_electricity[TWh]",
                    "bld_energy-demand_residential_space-cooling_electricity[TWh]",
                    "bld_energy-demand-non-elec_non-residential_hot-water[TWh]",
                    "bld_energy-demand-non-elec_non-residential_space-cooling[TWh]",
                    "bld_energy-demand-non-elec_residential_cooking[TWh]",
                    "bld_energy-demand-non-elec_residential_hot-water[TWh]"
                ]
            }
        },
        "string-input-503:568:562":{
            "type":"string",
            "default":"_interactions/data",
            "description":"Enter Description",
            "example":"_interactions/data"
        },
        "single-selection-4620:695:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-503:568:561":{
            "type":"string",
            "default":"lever_floor-area-fraction",
            "description":"Enter Description",
            "example":"lever_floor-area-fraction"
        },
        "single-selection-0:3757:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-1209:553":{
            "type":"string",
            "default":"fts_clm_temp",
            "description":"Enter Description",
            "example":"fts_clm_temp"
        },
        "single-selection-0:2421:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-1209:555":{
            "type":"string",
            "default":"lever_temp",
            "description":"Enter Description",
            "example":"lever_temp"
        },
        "column-filter-0:2078:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"emission-factor[g/kWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "emission-factor[g/kWh]"
                ]
            }
        },
        "single-selection-0:3101:3086:528":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"area graph"
                }
            },
            "description":"Choose the graph type",
            "example":{
                "variable_value":"area graph"
            }
        },
        "string-input-0:3373:1599":{
            "type":"string",
            "default":"renotype",
            "description":"Enter Description",
            "example":"renotype"
        },
        "string-input-0:3065:357":{
            "type":"string",
            "default":".*emissions.(...)_.*\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":".*emissions.(...)_.*\\[.*"
        },
        "single-selection-0:3101:3086:523":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Yes"
                }
            },
            "description":"Display a unique variable for all individual country",
            "example":{
                "variable_value":"Yes"
            }
        },
        "string-input-0:3106:3222:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-1209:561":{
            "type":"string",
            "default":"lever_temp",
            "description":"Enter Description",
            "example":"lever_temp"
        },
        "column-filter-0:3700:3697:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Years"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Years",
                    "ColumnValues"
                ]
            }
        },
        "string-input-0:3212:1599":{
            "type":"string",
            "default":"Years_number",
            "description":"Enter Description",
            "example":"Years_number"
        },
        "string-input-0:3373:1596":{
            "type":"string",
            "default":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.)\\+(.*)_(.*)_(.*)-(.*)-(.*)(\\[.*)"
        },
        "string-input-0:3212:1596":{
            "type":"string",
            "default":"(.*)",
            "description":"Enter Description",
            "example":"(.*)"
        },
        "string-input-0:2793:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-0:2640:2232:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-0:3373:1597":{
            "type":"string",
            "default":"$6",
            "description":"Enter Description",
            "example":"$6"
        },
        "string-input-0:3212:1597":{
            "type":"string",
            "default":"$1",
            "description":"Enter Description",
            "example":"$1"
        },
        "string-input-0:3158:3144:1596":{
            "type":"string",
            "default":"(.*)_(.*)(\\[.*)",
            "description":"Enter Description",
            "example":"(.*)_(.*)(\\[.*)"
        },
        "string-input-0:3158:3144:1597":{
            "type":"string",
            "default":"$2",
            "description":"Enter Description",
            "example":"$2"
        }
    }
}