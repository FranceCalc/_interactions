
{
    "type":"object",
    "properties":{
        "single-selection-490:926:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-490:1292:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "column-filter-490:1270:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CO2_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CO2_aluminium_prim[Mt]",
                    "ind_emissions_CO2_aluminium_sec[Mt]",
                    "ind_emissions_CO2_cement_dry-kiln[Mt]",
                    "ind_emissions_CO2_cement_geopolym[Mt]",
                    "ind_emissions_CO2_cement_wet-kiln[Mt]",
                    "ind_emissions_CO2_chem_chem-tech[Mt]",
                    "ind_emissions_CO2_copper_tech[Mt]",
                    "ind_emissions_CO2_fbt_tech[Mt]",
                    "ind_emissions_CO2_glass_glass[Mt]",
                    "ind_emissions_CO2_lime_lime[Mt]",
                    "ind_emissions_CO2_mae_tech[Mt]",
                    "ind_emissions_CO2_ois_tech[Mt]",
                    "ind_emissions_CO2_paper_recycled[Mt]",
                    "ind_emissions_CO2_paper_woodpulp[Mt]",
                    "ind_emissions_CO2_steel_BF-BOF[Mt]",
                    "ind_emissions_CO2_steel_hisarna[Mt]",
                    "ind_emissions_CO2_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CO2_steel_scrap-EAF[Mt]",
                    "ind_emissions_CO2_textiles_tech[Mt]",
                    "ind_emissions_CO2_tra-equip_tech[Mt]",
                    "ind_emissions_CO2_wwp_tech[Mt]"
                ]
            }
        },
        "string-input-490:1306:1273:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_liquid-ff-oil"
        },
        "column-filter-875:1347:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "single-selection-875:1233:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "single-selection-490:1224:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1306:1226:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1259:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-490:1224:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "boolean-input-490:1306:1242:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1232:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:926:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-490:1306:1323:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1262:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1495:349":{
            "type":"string",
            "default":"ind_emissions-CH4",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_emissions-CH4"
        },
        "string-input-490:1306:1257:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1657:349":{
            "type":"string",
            "default":"ind_energy,gas-ff-natural_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,gas-ff-natural_added"
        },
        "boolean-input-490:1714:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1257:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_solid-waste"
        },
        "single-selection-875:1646:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-875:1233:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1306:1278:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1240:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1273:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_liquid-ff.*"
        },
        "string-input-490:1306:1273:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1649:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-875:1493:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1641:446":{
            "type":"string",
            "default":"tec_emission-factor-process_CH4_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor-process_CH4_(.*)\\[.*"
        },
        "string-input-490:1641:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-490:1641:444":{
            "type":"string",
            "default":"ind_CH4-emissions_process",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CH4-emissions_process"
        },
        "single-selection-875:1671:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1495:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "boolean-input-875:1309:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1654:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1657:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_gas-ff-natural\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_gas-ff-natural\\[.*\\]"
        },
        "single-selection-490:1306:1208:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1690:1664:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1495:357":{
            "type":"string",
            "default":"ind_emissions_CH4_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_emissions_CH4_.*_.*\\[.*]"
        },
        "single-selection-490:1483:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-875:1648:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_electricity_added[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1321:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1203:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_solid-bio"
        },
        "string-input-490:1657:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1257:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_solid-waste.*"
        },
        "string-input-490:1513:349":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy-demand"
        },
        "column-filter-490:1306:1313:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1648:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1544:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1289:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1306:1279:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1223:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1312:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1697:1682:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-490:1306:1289:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1282:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_gas-ff.*"
        },
        "string-input-490:1306:1203:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1203:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_solid-bio.*"
        },
        "string-input-875:1690:1666:349":{
            "type":"string",
            "default":"ind_energy,gas-synfuel",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,gas-synfuel"
        },
        "string-input-490:1306:1282:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1672:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-490:1642:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1306:1287:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1231:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1641:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "boolean-input-490:1306:1235:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1697:1682:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1306:1282:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_gas-ff-natural"
        },
        "single-selection-490:933:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1306:1304:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1207:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-875:1669:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_ammonia_amm-tech_to-biomass[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_ammonia_amm-tech_to-biomass[%]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]"
                ]
            }
        },
        "string-input-490:1706:460":{
            "type":"string",
            "default":"TWh/Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh/Mt"
        },
        "string-input-490:1513:357":{
            "type":"string",
            "default":"ind_energy_.*_.*_(.*)\\[TWh\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_.*_.*_(.*)\\[TWh\\]"
        },
        "boolean-input-490:1306:1298:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1263:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_electricity_aluminium_prim[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_electricity_aluminium_prim[TWh]",
                    "ind_energy_electricity_aluminium_sec[TWh]",
                    "ind_energy_electricity_cement_dry-kiln[TWh]",
                    "ind_energy_electricity_cement_geopolym[TWh]",
                    "ind_energy_electricity_cement_wet-kiln[TWh]",
                    "ind_energy_electricity_chem_chem-tech[TWh]",
                    "ind_energy_electricity_copper_tech[TWh]",
                    "ind_energy_electricity_fbt_tech[TWh]",
                    "ind_energy_electricity_glass_glass[TWh]",
                    "ind_energy_electricity_lime_lime[TWh]",
                    "ind_energy_electricity_mae_tech[TWh]",
                    "ind_energy_electricity_ois_tech[TWh]",
                    "ind_energy_electricity_paper_recycled[TWh]",
                    "ind_energy_electricity_paper_woodpulp[TWh]",
                    "ind_energy_electricity_steel_BF-BOF[TWh]",
                    "ind_energy_electricity_steel_hisarna[TWh]",
                    "ind_energy_electricity_steel_hydrog-DRI[TWh]",
                    "ind_energy_electricity_steel_scrap-EAF[TWh]",
                    "ind_energy_electricity_textiles_tech[TWh]",
                    "ind_energy_electricity_tra-equip_tech[TWh]",
                    "ind_energy_electricity_wwp_tech[TWh]",
                    "ind_energy_hydrogen_aluminium_prim[TWh]",
                    "ind_energy_hydrogen_aluminium_sec[TWh]",
                    "ind_energy_hydrogen_cement_dry-kiln[TWh]",
                    "ind_energy_hydrogen_cement_geopolym[TWh]",
                    "ind_energy_hydrogen_cement_wet-kiln[TWh]",
                    "ind_energy_hydrogen_chem_chem-tech[TWh]",
                    "ind_energy_hydrogen_copper_tech[TWh]",
                    "ind_energy_hydrogen_fbt_tech[TWh]",
                    "ind_energy_hydrogen_glass_glass[TWh]",
                    "ind_energy_hydrogen_lime_lime[TWh]",
                    "ind_energy_hydrogen_mae_tech[TWh]",
                    "ind_energy_hydrogen_ois_tech[TWh]",
                    "ind_energy_hydrogen_paper_recycled[TWh]",
                    "ind_energy_hydrogen_paper_woodpulp[TWh]",
                    "ind_energy_hydrogen_steel_BF-BOF[TWh]",
                    "ind_energy_hydrogen_steel_hisarna[TWh]",
                    "ind_energy_hydrogen_steel_hydrog-DRI[TWh]",
                    "ind_energy_hydrogen_steel_scrap-EAF[TWh]",
                    "ind_energy_hydrogen_textiles_tech[TWh]",
                    "ind_energy_hydrogen_tra-equip_tech[TWh]",
                    "ind_energy_hydrogen_wwp_tech[TWh]",
                    "ind_energy_solid-waste_fbt_tech[TWh]",
                    "ind_energy_solid-waste_tra-equip_tech[TWh]",
                    "ind_energy_solid-waste_textiles_tech[TWh]",
                    "ind_energy_solid-waste_mae_tech[TWh]",
                    "ind_energy_solid-waste_wwp_tech[TWh]",
                    "ind_energy_solid-waste_ois_tech[TWh]",
                    "ind_energy_solid-waste_aluminium_prim[TWh]",
                    "ind_energy_solid-waste_aluminium_sec[TWh]",
                    "ind_energy_solid-waste_cement_dry-kiln[TWh]",
                    "ind_energy_solid-waste_cement_wet-kiln[TWh]",
                    "ind_energy_solid-waste_cement_geopolym[TWh]",
                    "ind_energy_solid-waste_chem_chem-tech[TWh]",
                    "ind_energy_solid-waste_copper_tech[TWh]",
                    "ind_energy_solid-waste_glass_glass[TWh]",
                    "ind_energy_solid-waste_lime_lime[TWh]",
                    "ind_energy_solid-waste_paper_woodpulp[TWh]",
                    "ind_energy_solid-waste_paper_recycled[TWh]",
                    "ind_energy_solid-waste_steel_BF-BOF[TWh]",
                    "ind_energy_solid-waste_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-waste_steel_hisarna[TWh]",
                    "ind_energy_solid-waste_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-bio_aluminium_prim[TWh]",
                    "ind_energy_liquid-bio_aluminium_prim[TWh]",
                    "ind_energy_solid-bio_aluminium_prim[TWh]",
                    "ind_energy_gas-bio_aluminium_sec[TWh]",
                    "ind_energy_liquid-bio_aluminium_sec[TWh]",
                    "ind_energy_solid-bio_aluminium_sec[TWh]",
                    "ind_energy_gas-bio_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-bio_cement_dry-kiln[TWh]",
                    "ind_energy_solid-bio_cement_dry-kiln[TWh]",
                    "ind_energy_gas-bio_cement_geopolym[TWh]",
                    "ind_energy_liquid-bio_cement_geopolym[TWh]",
                    "ind_energy_solid-bio_cement_geopolym[TWh]",
                    "ind_energy_gas-bio_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-bio_cement_wet-kiln[TWh]",
                    "ind_energy_solid-bio_cement_wet-kiln[TWh]",
                    "ind_energy_gas-bio_chem_chem-tech[TWh]",
                    "ind_energy_liquid-bio_chem_chem-tech[TWh]",
                    "ind_energy_solid-bio_chem_chem-tech[TWh]",
                    "ind_energy_gas-bio_copper_tech[TWh]",
                    "ind_energy_liquid-bio_copper_tech[TWh]",
                    "ind_energy_solid-bio_copper_tech[TWh]",
                    "ind_energy_gas-bio_fbt_tech[TWh]",
                    "ind_energy_liquid-bio_fbt_tech[TWh]",
                    "ind_energy_solid-bio_fbt_tech[TWh]",
                    "ind_energy_gas-bio_glass_glass[TWh]",
                    "ind_energy_liquid-bio_glass_glass[TWh]",
                    "ind_energy_solid-bio_glass_glass[TWh]",
                    "ind_energy_gas-bio_lime_lime[TWh]",
                    "ind_energy_liquid-bio_lime_lime[TWh]",
                    "ind_energy_solid-bio_lime_lime[TWh]",
                    "ind_energy_gas-bio_mae_tech[TWh]",
                    "ind_energy_liquid-bio_mae_tech[TWh]",
                    "ind_energy_solid-bio_mae_tech[TWh]",
                    "ind_energy_gas-bio_ois_tech[TWh]",
                    "ind_energy_liquid-bio_ois_tech[TWh]",
                    "ind_energy_solid-bio_ois_tech[TWh]",
                    "ind_energy_gas-bio_paper_recycled[TWh]",
                    "ind_energy_liquid-bio_paper_recycled[TWh]",
                    "ind_energy_solid-bio_paper_recycled[TWh]",
                    "ind_energy_gas-bio_paper_woodpulp[TWh]",
                    "ind_energy_liquid-bio_paper_woodpulp[TWh]",
                    "ind_energy_solid-bio_paper_woodpulp[TWh]",
                    "ind_energy_gas-bio_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-bio_steel_BF-BOF[TWh]",
                    "ind_energy_solid-bio_steel_BF-BOF[TWh]",
                    "ind_energy_gas-bio_steel_hisarna[TWh]",
                    "ind_energy_liquid-bio_steel_hisarna[TWh]",
                    "ind_energy_solid-bio_steel_hisarna[TWh]",
                    "ind_energy_gas-bio_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-bio_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-bio_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-bio_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-bio_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-bio_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-bio_textiles_tech[TWh]",
                    "ind_energy_liquid-bio_textiles_tech[TWh]",
                    "ind_energy_solid-bio_textiles_tech[TWh]",
                    "ind_energy_gas-bio_tra-equip_tech[TWh]",
                    "ind_energy_liquid-bio_tra-equip_tech[TWh]",
                    "ind_energy_solid-bio_tra-equip_tech[TWh]",
                    "ind_energy_gas-bio_wwp_tech[TWh]",
                    "ind_energy_liquid-bio_wwp_tech[TWh]",
                    "ind_energy_solid-bio_wwp_tech[TWh]",
                    "ind_energy_gas-ff-natural_aluminium_prim[TWh]",
                    "ind_energy_gas-ff-natural_aluminium_sec[TWh]",
                    "ind_energy_gas-ff-natural_cement_dry-kiln[TWh]",
                    "ind_energy_gas-ff-natural_cement_geopolym[TWh]",
                    "ind_energy_gas-ff-natural_cement_wet-kiln[TWh]",
                    "ind_energy_gas-ff-natural_chem_chem-tech[TWh]",
                    "ind_energy_gas-ff-natural_copper_tech[TWh]",
                    "ind_energy_gas-ff-natural_fbt_tech[TWh]",
                    "ind_energy_gas-ff-natural_glass_glass[TWh]",
                    "ind_energy_gas-ff-natural_lime_lime[TWh]",
                    "ind_energy_gas-ff-natural_mae_tech[TWh]",
                    "ind_energy_gas-ff-natural_ois_tech[TWh]",
                    "ind_energy_gas-ff-natural_paper_recycled[TWh]",
                    "ind_energy_gas-ff-natural_paper_woodpulp[TWh]",
                    "ind_energy_gas-ff-natural_steel_BF-BOF[TWh]",
                    "ind_energy_gas-ff-natural_steel_hisarna[TWh]",
                    "ind_energy_gas-ff-natural_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-ff-natural_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-ff-natural_textiles_tech[TWh]",
                    "ind_energy_gas-ff-natural_tra-equip_tech[TWh]",
                    "ind_energy_gas-ff-natural_wwp_tech[TWh]",
                    "ind_energy_liquid-ff-oil_fbt_tech[TWh]",
                    "ind_energy_liquid-ff-oil_tra-equip_tech[TWh]",
                    "ind_energy_liquid-ff-oil_textiles_tech[TWh]",
                    "ind_energy_liquid-ff-oil_mae_tech[TWh]",
                    "ind_energy_liquid-ff-oil_wwp_tech[TWh]",
                    "ind_energy_liquid-ff-oil_ois_tech[TWh]",
                    "ind_energy_liquid-ff-oil_aluminium_prim[TWh]",
                    "ind_energy_liquid-ff-oil_aluminium_sec[TWh]",
                    "ind_energy_liquid-ff-oil_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_cement_geopolym[TWh]",
                    "ind_energy_liquid-ff-oil_chem_chem-tech[TWh]",
                    "ind_energy_liquid-ff-oil_copper_tech[TWh]",
                    "ind_energy_liquid-ff-oil_glass_glass[TWh]",
                    "ind_energy_liquid-ff-oil_lime_lime[TWh]",
                    "ind_energy_liquid-ff-oil_paper_woodpulp[TWh]",
                    "ind_energy_liquid-ff-oil_paper_recycled[TWh]",
                    "ind_energy_liquid-ff-oil_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-ff-oil_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-ff-oil_steel_hisarna[TWh]",
                    "ind_energy_liquid-ff-oil_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-ff-coal_fbt_tech[TWh]",
                    "ind_energy_solid-ff-coal_tra-equip_tech[TWh]",
                    "ind_energy_solid-ff-coal_textiles_tech[TWh]",
                    "ind_energy_solid-ff-coal_mae_tech[TWh]",
                    "ind_energy_solid-ff-coal_wwp_tech[TWh]",
                    "ind_energy_solid-ff-coal_ois_tech[TWh]",
                    "ind_energy_solid-ff-coal_aluminium_prim[TWh]",
                    "ind_energy_solid-ff-coal_aluminium_sec[TWh]",
                    "ind_energy_solid-ff-coal_cement_dry-kiln[TWh]",
                    "ind_energy_solid-ff-coal_cement_wet-kiln[TWh]",
                    "ind_energy_solid-ff-coal_cement_geopolym[TWh]",
                    "ind_energy_solid-ff-coal_chem_chem-tech[TWh]",
                    "ind_energy_solid-ff-coal_copper_tech[TWh]",
                    "ind_energy_solid-ff-coal_glass_glass[TWh]",
                    "ind_energy_solid-ff-coal_lime_lime[TWh]",
                    "ind_energy_solid-ff-coal_paper_woodpulp[TWh]",
                    "ind_energy_solid-ff-coal_paper_recycled[TWh]",
                    "ind_energy_solid-ff-coal_steel_BF-BOF[TWh]",
                    "ind_energy_solid-ff-coal_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-ff-coal_steel_hisarna[TWh]",
                    "ind_energy_solid-ff-coal_steel_hydrog-DRI[TWh]"
                ]
            }
        },
        "string-input-490:1697:1682:446":{
            "type":"string",
            "default":"ind_CC_(.*_.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_CC_(.*_.*)\\[.*_1minus"
        },
        "string-input-490:1513:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1697:1682:445":{
            "type":"string",
            "default":"ind_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_emissions_CO2_(.*)\\[.*"
        },
        "string-input-490:1697:1682:444":{
            "type":"string",
            "default":"ind_CO2-emissions-after-CC_biogenic",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CO2-emissions-after-CC_biogenic"
        },
        "single-selection-490:1575:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1612:357":{
            "type":"string",
            "default":"ind_energy_feedstock_.*_.*_(solid.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_feedstock_.*_.*_(solid.*)\\[.*"
        },
        "string-input-490:1612:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-875:1507:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_CO2-emissions-CC_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_CO2-emissions-CC_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "string-input-490:1306:1212:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_electricity.*"
        },
        "string-input-490:1306:1212:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1671:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1269:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1612:349":{
            "type":"string",
            "default":"ind_biomaterial",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_biomaterial"
        },
        "column-filter-875:1493:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1540:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_fbt_tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_fbt_tech[Mt]",
                    "ind_material-production_tra-equip_tech[Mt]",
                    "ind_material-production_textiles_tech[Mt]",
                    "ind_material-production_mae_tech[Mt]",
                    "ind_material-production_wwp_tech[Mt]",
                    "ind_material-production_ois_tech[Mt]",
                    "ind_material-production_aluminium_prim[Mt]",
                    "ind_material-production_aluminium_sec[Mt]",
                    "ind_material-production_cement_dry-kiln[Mt]",
                    "ind_material-production_cement_wet-kiln[Mt]",
                    "ind_material-production_cement_geopolym[Mt]",
                    "ind_material-production_chem_chem-tech[Mt]",
                    "ind_material-production_copper_tech[Mt]",
                    "ind_material-production_glass_glass[Mt]",
                    "ind_material-production_lime_lime[Mt]",
                    "ind_material-production_paper_woodpulp[Mt]",
                    "ind_material-production_paper_recycled[Mt]",
                    "ind_material-production_steel_BF-BOF[Mt]",
                    "ind_material-production_steel_scrap-EAF[Mt]",
                    "ind_material-production_steel_hisarna[Mt]",
                    "ind_material-production_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "single-selection-490:1306:1305:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1212:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_electricity"
        },
        "string-input-490:1306:1266:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_solid-ff.*"
        },
        "column-filter-490:1306:1241:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1266:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1518:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "boolean-input-490:1306:1217:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1654:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-490:1544:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_capex_CC_cement_dry-kiln[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_capex_CC_cement_dry-kiln[MEUR]",
                    "ind_capex_CC_cement_geopolym[MEUR]",
                    "ind_capex_CC_cement_wet-kiln[MEUR]",
                    "ind_capex_CC_chem_chem-tech[MEUR]",
                    "ind_capex_CC_paper_woodpulp[MEUR]",
                    "ind_capex_CC_steel_BF-BOF[MEUR]",
                    "ind_capex_CC_steel_hisarna[MEUR]",
                    "ind_capex_CC_steel_scrap-EAF[MEUR]",
                    "ind_capex_aluminium_prim[MEUR]",
                    "ind_capex_aluminium_sec[MEUR]",
                    "ind_capex_cement_dry-kiln[MEUR]",
                    "ind_capex_cement_geopolym[MEUR]",
                    "ind_capex_cement_wet-kiln[MEUR]",
                    "ind_capex_chem_chem-tech[MEUR]",
                    "ind_capex_glass_glass[MEUR]",
                    "ind_capex_lime_lime[MEUR]",
                    "ind_capex_paper_recycled[MEUR]",
                    "ind_capex_paper_woodpulp[MEUR]",
                    "ind_capex_steel_BF-BOF[MEUR]",
                    "ind_capex_steel_hisarna[MEUR]",
                    "ind_capex_steel_scrap-EAF[MEUR]"
                ]
            }
        },
        "column-filter-875:1691:1684:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_emissions_CO2_gas-bio_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_emissions_CO2_gas-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_liquid-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_solid-bio_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "column-filter-490:1306:1320:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1292:446":{
            "type":"string",
            "default":"ind_emissions-(.*)\\[.*",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_emissions-(.*)\\[.*"
        },
        "string-input-875:761:460":{
            "type":"string",
            "default":"kt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"kt"
        },
        "single-selection-490:1306:1215:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1307:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1292:445":{
            "type":"string",
            "default":"cal_ind_emissions_(.*)\\[.*",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_emissions_(.*)\\[.*"
        },
        "boolean-input-490:1306:1251:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1292:444":{
            "type":"string",
            "default":"ind_emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_emissions"
        },
        "column-filter-490:1306:1295:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1706:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "boolean-input-875:1648:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1706:444":{
            "type":"string",
            "default":"specific_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"specific_energy"
        },
        "string-input-490:1706:446":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-demand_(.*)\\[.*"
        },
        "string-input-490:1306:1266:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_solid-ff-coal"
        },
        "column-filter-490:1292:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-875:1599:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_energy-demand_liquid-ff-oil[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_energy-demand_liquid-ff-oil[TWh]",
                    "amm_liquid-ff-oil_diesel[%]",
                    "amm_liquid-ff-oil_fuel-oil[%]"
                ]
            }
        },
        "boolean-input-490:1306:1228:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1275:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_gas-ff-natural"
        },
        "boolean-input-490:1306:1309:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1263:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-875:1649:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-490:1306:1287:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1244:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1275:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1275:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_gas-ff.*"
        },
        "column-filter-490:1306:1288:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:761:444":{
            "type":"string",
            "default":"ind_dem",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_dem"
        },
        "string-input-490:1306:1239:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_solid-ff-coal"
        },
        "single-selection-875:1518:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"OPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"OPEX"
            }
        },
        "string-input-875:761:445":{
            "type":"string",
            "default":"ind_dem_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_dem_(.*)\\[.*"
        },
        "string-input-875:761:446":{
            "type":"string",
            "default":"ind_material-efficiency_(.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_material-efficiency_(.*)\\[.*_1minus"
        },
        "string-input-875:1691:1686:445":{
            "type":"string",
            "default":"amm_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"amm_emissions_CO2_(.*)\\[.*"
        },
        "string-input-875:1691:1686:446":{
            "type":"string",
            "default":"ind_CC_(.*_.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_CC_(.*_.*)\\[.*_1minus"
        },
        "single-selection-490:1306:1303:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-875:1657:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-875:1691:1686:444":{
            "type":"string",
            "default":"amm_CO2-emissions-after-CC_biogenic",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_CO2-emissions-after-CC_biogenic"
        },
        "single-selection-875:1495:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1214:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1484:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "column-filter-490:1306:1230:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1222:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1321:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1296:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1648:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_electricity).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_electricity).*\\[.*\\]"
        },
        "string-input-490:1306:1280:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1315:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1209:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1323:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-875:1262:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1280:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_hydrogen.*"
        },
        "string-input-490:1306:1248:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_liquid-bio.*"
        },
        "string-input-490:1306:1248:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1661:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1205:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1205:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_gas-bio.*"
        },
        "boolean-input-490:1306:1208:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1652:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1671:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid_bio[TWh]"
                ]
            }
        },
        "string-input-875:1646:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1648:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1719:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "energy_demand_cement[TWh]",
                    "energy_demand_steel[TWh]"
                ]
            }
        },
        "string-input-490:1697:1678:349":{
            "type":"string",
            "default":"ind_emissions_CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_emissions_CO2"
        },
        "boolean-input-490:1289:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-875:1507:1420":{
            "type":"string",
            "default":".*emissions-(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*emissions-(.+)\\[.*"
        },
        "string-input-490:1648:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "string-input-490:1306:1248:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_liquid-bio"
        },
        "boolean-input-490:1306:1314:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1491:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1233:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1691:1686:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "column-filter-490:1306:1302:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1205:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_gas-bio"
        },
        "string-input-490:1511:349":{
            "type":"string",
            "default":"ind_material-demand_transport",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_material-demand_transport"
        },
        "string-input-490:1511:354":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"t"
        },
        "column-filter-490:1306:1221:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1656:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1511:357":{
            "type":"string",
            "default":"ind_dem_.*_(.*)\\[t\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_dem_.*_(.*)\\[t\\]"
        },
        "string-input-490:1306:1268:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1691:1686:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1316:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1270:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1672:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "boolean-input-490:1707:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1306:1289:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1268:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_gas-ff-natural"
        },
        "column-filter-875:1690:1664:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_ammonia_amm-tech_to-synfuels[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_ammonia_amm-tech_to-synfuels[%]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]"
                ]
            }
        },
        "string-input-875:1646:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-(electricity).*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-(electricity).*"
        },
        "string-input-875:1646:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "string-input-875:1646:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]"
        },
        "column-filter-490:1696:1666:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_gas-ff-natural_synfuel[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_synfuel[TWh]"
                ]
            }
        },
        "string-input-490:1306:1280:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_hydrogen"
        },
        "single-selection-875:1300:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1306:1237:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1544:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1267:446":{
            "type":"string",
            "default":"ind_CO2-emissions-after-CC_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_CO2-emissions-after-CC_(.*)\\[.*"
        },
        "string-input-490:1224:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "single-selection-490:1559:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1268:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_gas-ff.*"
        },
        "string-input-490:1224:445":{
            "type":"string",
            "default":"cal_ind_production-calibration_(.*)\\[.*",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_production-calibration_(.*)\\[.*"
        },
        "string-input-490:1531:354":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"t"
        },
        "string-input-490:1224:444":{
            "type":"string",
            "default":"ind_prod_checked",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod_checked"
        },
        "string-input-490:1267:445":{
            "type":"string",
            "default":"ind_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_emissions_CO2_(.*)\\[.*"
        },
        "string-input-490:1531:357":{
            "type":"string",
            "default":"ind_dem_.*_(.*)\\[t\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_dem_.*_(.*)\\[t\\]"
        },
        "string-input-490:1267:444":{
            "type":"string",
            "default":"ind_CO2-emissions-CC",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CO2-emissions-CC"
        },
        "single-selection-490:1306:1217:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1215:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1210:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_solid-bio"
        },
        "column-filter-490:1306:1286:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1493:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1670:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_gas-ff-natural_bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_gas-ff-natural_bio[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_bio[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_bio[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_bio[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_bio[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_bio[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_bio[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_bio[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_bio[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_bio[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1224:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1267:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1301:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-875:1483:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1306:1322:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1311:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_electricity.*"
        },
        "column-filter-490:1306:1259:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1251:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1531:349":{
            "type":"string",
            "default":"ind_dem",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_dem"
        },
        "single-selection-490:1306:1294:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1293:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1210:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1250:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1210:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_solid-bio.*"
        },
        "column-filter-875:1311:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CC_ammonia_amm-tech[%]_1minus"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CC_ammonia_amm-tech[%]_1minus"
                ]
            }
        },
        "column-filter-875:1657:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_liquid-ff-oil_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_gas-ff-natural[TWh]"
                ]
            }
        },
        "column-filter-490:1306:1216:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1262:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1267:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "boolean-input-875:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1697:1682:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:933:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-875:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1262:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1212:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_cement_dry-kiln_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1204:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:926:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:1306:1220:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1540:1420":{
            "type":"string",
            "default":".*material-production_(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*material-production_(.+)\\[.*"
        },
        "string-input-490:1306:1181:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_electricity.*"
        },
        "string-input-875:1659:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_gas-ff-natural\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_gas-ff-natural\\[.*]"
        },
        "string-input-875:1659:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "column-filter-875:1653:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_hydrogen_added[TWh]"
                ]
            }
        },
        "string-input-875:1659:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "single-selection-490:1642:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1230:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_electricity"
        },
        "string-input-490:1306:1311:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1219:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1181:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1311:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_electricity"
        },
        "boolean-input-875:1233:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1306:1324:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1300:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-490:1306:1235:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1230:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:931:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1230:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_electricity.*"
        },
        "column-filter-875:1491:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_emissions_CO2_electricity_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_emissions_CO2_electricity_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_hydrogen_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_solid-waste_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_gas-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_liquid-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_solid-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_gas-ff-natural_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_liquid-ff-oil_ammonia_amm-tech[Mt]",
                    "amm_emissions_CO2_solid-ff-coal_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "column-filter-490:1492:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CH4-emissions_electricity_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CH4-emissions_electricity_aluminium_prim[Mt]",
                    "ind_CH4-emissions_electricity_aluminium_sec[Mt]",
                    "ind_CH4-emissions_electricity_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_electricity_cement_geopolym[Mt]",
                    "ind_CH4-emissions_electricity_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_electricity_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_electricity_copper_tech[Mt]",
                    "ind_CH4-emissions_electricity_fbt_tech[Mt]",
                    "ind_CH4-emissions_electricity_glass_glass[Mt]",
                    "ind_CH4-emissions_electricity_lime_lime[Mt]",
                    "ind_CH4-emissions_electricity_mae_tech[Mt]",
                    "ind_CH4-emissions_electricity_ois_tech[Mt]",
                    "ind_CH4-emissions_electricity_paper_recycled[Mt]",
                    "ind_CH4-emissions_electricity_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_electricity_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_electricity_steel_hisarna[Mt]",
                    "ind_CH4-emissions_electricity_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_electricity_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_electricity_textiles_tech[Mt]",
                    "ind_CH4-emissions_electricity_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_electricity_wwp_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_aluminium_prim[Mt]",
                    "ind_CH4-emissions_hydrogen_aluminium_sec[Mt]",
                    "ind_CH4-emissions_hydrogen_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_hydrogen_cement_geopolym[Mt]",
                    "ind_CH4-emissions_hydrogen_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_hydrogen_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_hydrogen_copper_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_fbt_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_glass_glass[Mt]",
                    "ind_CH4-emissions_hydrogen_lime_lime[Mt]",
                    "ind_CH4-emissions_hydrogen_mae_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_ois_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_paper_recycled[Mt]",
                    "ind_CH4-emissions_hydrogen_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_hydrogen_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_hydrogen_steel_hisarna[Mt]",
                    "ind_CH4-emissions_hydrogen_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_hydrogen_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_hydrogen_textiles_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_hydrogen_wwp_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_fbt_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_textiles_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_mae_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_wwp_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_ois_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_aluminium_prim[Mt]",
                    "ind_CH4-emissions_solid-waste_aluminium_sec[Mt]",
                    "ind_CH4-emissions_solid-waste_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_solid-waste_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_solid-waste_cement_geopolym[Mt]",
                    "ind_CH4-emissions_solid-waste_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_solid-waste_copper_tech[Mt]",
                    "ind_CH4-emissions_solid-waste_glass_glass[Mt]",
                    "ind_CH4-emissions_solid-waste_lime_lime[Mt]",
                    "ind_CH4-emissions_solid-waste_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_solid-waste_paper_recycled[Mt]",
                    "ind_CH4-emissions_solid-waste_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_solid-waste_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_solid-waste_steel_hisarna[Mt]",
                    "ind_CH4-emissions_solid-waste_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_gas-bio_aluminium_prim[Mt]",
                    "ind_CH4-emissions_liquid-bio_aluminium_prim[Mt]",
                    "ind_CH4-emissions_solid-bio_aluminium_prim[Mt]",
                    "ind_CH4-emissions_gas-bio_aluminium_sec[Mt]",
                    "ind_CH4-emissions_liquid-bio_aluminium_sec[Mt]",
                    "ind_CH4-emissions_solid-bio_aluminium_sec[Mt]",
                    "ind_CH4-emissions_gas-bio_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_liquid-bio_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_solid-bio_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_gas-bio_cement_geopolym[Mt]",
                    "ind_CH4-emissions_liquid-bio_cement_geopolym[Mt]",
                    "ind_CH4-emissions_solid-bio_cement_geopolym[Mt]",
                    "ind_CH4-emissions_gas-bio_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_liquid-bio_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_solid-bio_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_gas-bio_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_solid-bio_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_gas-bio_copper_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_copper_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_copper_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_fbt_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_fbt_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_fbt_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_glass_glass[Mt]",
                    "ind_CH4-emissions_liquid-bio_glass_glass[Mt]",
                    "ind_CH4-emissions_solid-bio_glass_glass[Mt]",
                    "ind_CH4-emissions_gas-bio_lime_lime[Mt]",
                    "ind_CH4-emissions_liquid-bio_lime_lime[Mt]",
                    "ind_CH4-emissions_solid-bio_lime_lime[Mt]",
                    "ind_CH4-emissions_gas-bio_mae_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_mae_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_mae_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_ois_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_ois_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_ois_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_paper_recycled[Mt]",
                    "ind_CH4-emissions_liquid-bio_paper_recycled[Mt]",
                    "ind_CH4-emissions_solid-bio_paper_recycled[Mt]",
                    "ind_CH4-emissions_gas-bio_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_liquid-bio_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_solid-bio_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_gas-bio_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_liquid-bio_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_solid-bio_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_gas-bio_steel_hisarna[Mt]",
                    "ind_CH4-emissions_liquid-bio_steel_hisarna[Mt]",
                    "ind_CH4-emissions_solid-bio_steel_hisarna[Mt]",
                    "ind_CH4-emissions_gas-bio_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_liquid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_solid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_gas-bio_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_liquid-bio_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_solid-bio_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_gas-bio_textiles_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_textiles_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_textiles_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_gas-bio_wwp_tech[Mt]",
                    "ind_CH4-emissions_liquid-bio_wwp_tech[Mt]",
                    "ind_CH4-emissions_solid-bio_wwp_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_aluminium_prim[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_aluminium_sec[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_cement_geopolym[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_copper_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_fbt_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_glass_glass[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_lime_lime[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_mae_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_ois_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_paper_recycled[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_steel_hisarna[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_textiles_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_gas-ff-natural_wwp_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_fbt_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_textiles_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_mae_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_wwp_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_ois_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_aluminium_prim[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_aluminium_sec[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_cement_geopolym[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_copper_tech[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_glass_glass[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_lime_lime[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_paper_recycled[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_steel_hisarna[Mt]",
                    "ind_CH4-emissions_liquid-ff-oil_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_fbt_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_textiles_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_mae_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_wwp_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_ois_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_aluminium_prim[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_aluminium_sec[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_cement_geopolym[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_copper_tech[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_glass_glass[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_lime_lime[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_paper_recycled[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_steel_hisarna[Mt]",
                    "ind_CH4-emissions_solid-ff-coal_steel_hydrog-DRI[Mt]",
                    "ind_CH4-emissions_process_fbt_tech[Mt]",
                    "ind_CH4-emissions_process_tra-equip_tech[Mt]",
                    "ind_CH4-emissions_process_textiles_tech[Mt]",
                    "ind_CH4-emissions_process_mae_tech[Mt]",
                    "ind_CH4-emissions_process_wwp_tech[Mt]",
                    "ind_CH4-emissions_process_ois_tech[Mt]",
                    "ind_CH4-emissions_process_aluminium_prim[Mt]",
                    "ind_CH4-emissions_process_aluminium_sec[Mt]",
                    "ind_CH4-emissions_process_cement_dry-kiln[Mt]",
                    "ind_CH4-emissions_process_cement_wet-kiln[Mt]",
                    "ind_CH4-emissions_process_cement_geopolym[Mt]",
                    "ind_CH4-emissions_process_chem_chem-tech[Mt]",
                    "ind_CH4-emissions_process_copper_tech[Mt]",
                    "ind_CH4-emissions_process_glass_glass[Mt]",
                    "ind_CH4-emissions_process_lime_lime[Mt]",
                    "ind_CH4-emissions_process_paper_woodpulp[Mt]",
                    "ind_CH4-emissions_process_paper_recycled[Mt]",
                    "ind_CH4-emissions_process_steel_BF-BOF[Mt]",
                    "ind_CH4-emissions_process_steel_scrap-EAF[Mt]",
                    "ind_CH4-emissions_process_steel_hisarna[Mt]",
                    "ind_CH4-emissions_process_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "single-selection-490:1483:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1170:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "column-filter-490:1306:1243:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-875:1518:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_CO2-emissions-CC_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_CO2-emissions-CC_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "string-input-490:1306:1214:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_liquid-bio"
        },
        "string-input-490:1306:1181:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_electricity"
        },
        "column-filter-490:926:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_prod_percentage_steel[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_prod_percentage_steel[%]",
                    "ind_prod_percentage_cement[%]",
                    "ind_prod_percentage_chem[%]",
                    "ind_prod_percentage_paper[%]",
                    "ind_prod_percentage_timber[%]",
                    "ind_prod_percentage_aluminium[%]",
                    "ind_prod_percentage_glass[%]",
                    "ind_prod_percentage_lime[%]",
                    "ind_prod_percentage_copper[%]"
                ]
            }
        },
        "single-selection-490:1170:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-875:1347:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "boolean-input-490:1306:1231:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1654:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "boolean-input-490:1306:1303:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1246:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1234:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1224:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1224:1150:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_(.*)\\[.*"
        },
        "string-input-490:1306:1246:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_gas-ff-natural"
        },
        "string-input-490:1306:1214:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:926:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "single-selection-875:1233:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-490:1510:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:926:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "string-input-490:1306:1214:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_liquid-bio.*"
        },
        "string-input-490:926:445":{
            "type":"string",
            "default":"ind_dem_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_dem_(.*)\\[.*"
        },
        "string-input-490:1306:1318:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_gas-bio"
        },
        "single-selection-875:751:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1492:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1659:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:1306:1274:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1724:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "single-selection-875:1659:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "string-input-490:1224:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "column-filter-490:1306:1266:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1246:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_gas-ff.*"
        },
        "single-selection-490:931:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1483:444":{
            "type":"string",
            "default":"ind_energy_feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_feedstock"
        },
        "string-input-490:1483:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-490:1306:1284:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_liquid-ff-oil"
        },
        "boolean-input-490:1306:1246:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1507:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-490:1483:446":{
            "type":"string",
            "default":"tec_energy_specific-feedstock_(.*)_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_energy_specific-feedstock_(.*)_(.*)\\[.*]"
        },
        "string-input-490:1654:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "string-input-490:1654:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "string-input-490:1301:444":{
            "type":"string",
            "default":"ind_N2O-emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_N2O-emissions"
        },
        "string-input-490:1654:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_hydrogen\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_hydrogen\\[.*]"
        },
        "string-input-490:1301:446":{
            "type":"string",
            "default":"tec_emission-factor_N2O_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_N2O_(.*)\\[.*"
        },
        "string-input-490:1697:1678:357":{
            "type":"string",
            "default":"ind_CO2-emissions_.*-bio_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_CO2-emissions_.*-bio_(.*_.*)\\[.*]"
        },
        "column-filter-490:1306:1299:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1301:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "string-input-490:1697:1678:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "single-selection-490:1621:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1508:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1621:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1318:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:931:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-875:1233:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "boolean-input-490:1540:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-490:1306:1284:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1233:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-490:1306:1284:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_liquid-ff.*"
        },
        "single-selection-875:1301:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1233:1150:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_(.*)\\[.*"
        },
        "string-input-490:1717:444":{
            "type":"string",
            "default":"emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"emissions"
        },
        "string-input-490:1717:445":{
            "type":"string",
            "default":"material_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"material_(.*)\\[.*"
        },
        "string-input-490:1717:446":{
            "type":"string",
            "default":"specific_emissions_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"specific_emissions_(.*)\\[.*"
        },
        "single-selection-490:1306:1309:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1278:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1654:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "string-input-490:1493:357":{
            "type":"string",
            "default":"ind_N2O-emissions_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_N2O-emissions_.*_(.*_.*)\\[.*]"
        },
        "string-input-490:1493:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "boolean-input-490:1697:1678:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1483:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-490:1306:1318:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1484:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_excl-feedstock_fbt_tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_excl-feedstock_fbt_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_fbt_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_tra-equip_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_textiles_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_mae_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_wwp_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_ois_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_aluminium_prim_electricity[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_aluminium_sec_electricity[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_cement_geopolym_electricity[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_chem_chem-tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_copper_tech_electricity[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_glass_glass_electricity[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_lime_lime_electricity[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_paper_woodpulp_electricity[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_paper_recycled_electricity[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_steel_hisarna_electricity[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_steel_hydrog-DRI_electricity[TWh]"
                ]
            }
        },
        "string-input-490:1306:1255:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_solid-bio.*"
        },
        "single-selection-490:1669:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1318:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_gas-bio.*"
        },
        "string-input-490:1170:444":{
            "type":"string",
            "default":"ind_material-production",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_material-production"
        },
        "string-input-490:1717:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1170:446":{
            "type":"string",
            "default":"ind_technology-share_(.*)_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_technology-share_(.*)_(.*)\\[.*"
        },
        "string-input-490:1170:445":{
            "type":"string",
            "default":"ind_prod_checked_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_checked_(.*)\\[.*"
        },
        "string-input-490:1659:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "string-input-490:1306:1255:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1659:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "string-input-490:1659:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_gas-ff-natural\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_gas-ff-natural\\[.*]"
        },
        "boolean-input-490:1306:1206:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1498:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1228:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_solid-bio"
        },
        "string-input-490:1301:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1306:1302:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1512:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_floor-area_new_non-residential_aluminium[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_floor-area_new_non-residential_aluminium[t]",
                    "ind_dem_floor-area_new_non-residential_ammonia[t]",
                    "ind_dem_floor-area_new_non-residential_cement[t]",
                    "ind_dem_floor-area_new_non-residential_chem[t]",
                    "ind_dem_floor-area_new_non-residential_copper[t]",
                    "ind_dem_floor-area_new_non-residential_glass[t]",
                    "ind_dem_floor-area_new_non-residential_lime[t]",
                    "ind_dem_floor-area_new_non-residential_other[t]",
                    "ind_dem_floor-area_new_non-residential_paper[t]",
                    "ind_dem_floor-area_new_non-residential_steel[t]",
                    "ind_dem_floor-area_new_non-residential_timber[t]",
                    "ind_dem_floor-area_reno_non-residential_aluminium[t]",
                    "ind_dem_floor-area_reno_non-residential_ammonia[t]",
                    "ind_dem_floor-area_reno_non-residential_cement[t]",
                    "ind_dem_floor-area_reno_non-residential_chem[t]",
                    "ind_dem_floor-area_reno_non-residential_copper[t]",
                    "ind_dem_floor-area_reno_non-residential_glass[t]",
                    "ind_dem_floor-area_reno_non-residential_lime[t]",
                    "ind_dem_floor-area_reno_non-residential_other[t]",
                    "ind_dem_floor-area_reno_non-residential_paper[t]",
                    "ind_dem_floor-area_reno_non-residential_steel[t]",
                    "ind_dem_floor-area_reno_non-residential_timber[t]",
                    "ind_dem_floor-area_new_residential_aluminium[t]",
                    "ind_dem_floor-area_new_residential_ammonia[t]",
                    "ind_dem_floor-area_new_residential_cement[t]",
                    "ind_dem_floor-area_new_residential_chem[t]",
                    "ind_dem_floor-area_new_residential_copper[t]",
                    "ind_dem_floor-area_new_residential_glass[t]",
                    "ind_dem_floor-area_new_residential_lime[t]",
                    "ind_dem_floor-area_new_residential_other[t]",
                    "ind_dem_floor-area_new_residential_paper[t]",
                    "ind_dem_floor-area_new_residential_steel[t]",
                    "ind_dem_floor-area_new_residential_timber[t]",
                    "ind_dem_floor-area_reno_residential_aluminium[t]",
                    "ind_dem_floor-area_reno_residential_ammonia[t]",
                    "ind_dem_floor-area_reno_residential_cement[t]",
                    "ind_dem_floor-area_reno_residential_chem[t]",
                    "ind_dem_floor-area_reno_residential_copper[t]",
                    "ind_dem_floor-area_reno_residential_glass[t]",
                    "ind_dem_floor-area_reno_residential_lime[t]",
                    "ind_dem_floor-area_reno_residential_other[t]",
                    "ind_dem_floor-area_reno_residential_paper[t]",
                    "ind_dem_floor-area_reno_residential_steel[t]",
                    "ind_dem_floor-area_reno_residential_timber[t]",
                    "ind_dem_road_aluminium[t]",
                    "ind_dem_road_ammonia[t]",
                    "ind_dem_road_cement[t]",
                    "ind_dem_road_chem[t]",
                    "ind_dem_road_copper[t]",
                    "ind_dem_road_glass[t]",
                    "ind_dem_road_lime[t]",
                    "ind_dem_road_other[t]",
                    "ind_dem_road_paper[t]",
                    "ind_dem_road_steel[t]",
                    "ind_dem_road_timber[t]",
                    "ind_dem_rail_aluminium[t]",
                    "ind_dem_rail_ammonia[t]",
                    "ind_dem_rail_cement[t]",
                    "ind_dem_rail_chem[t]",
                    "ind_dem_rail_copper[t]",
                    "ind_dem_rail_glass[t]",
                    "ind_dem_rail_lime[t]",
                    "ind_dem_rail_other[t]",
                    "ind_dem_rail_paper[t]",
                    "ind_dem_rail_steel[t]",
                    "ind_dem_rail_timber[t]",
                    "ind_dem_trolley-cables_aluminium[t]",
                    "ind_dem_trolley-cables_ammonia[t]",
                    "ind_dem_trolley-cables_cement[t]",
                    "ind_dem_trolley-cables_chem[t]",
                    "ind_dem_trolley-cables_copper[t]",
                    "ind_dem_trolley-cables_glass[t]",
                    "ind_dem_trolley-cables_lime[t]",
                    "ind_dem_trolley-cables_other[t]",
                    "ind_dem_trolley-cables_paper[t]",
                    "ind_dem_trolley-cables_steel[t]",
                    "ind_dem_trolley-cables_timber[t]"
                ]
            }
        },
        "string-input-490:1493:349":{
            "type":"string",
            "default":"ind_emissions_N2O",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_emissions_N2O"
        },
        "string-input-490:1306:1302:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_electricity.*"
        },
        "single-selection-490:1306:1260:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1284:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1255:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_solid-bio"
        },
        "string-input-875:1233:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "single-selection-875:1491:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1669:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1228:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_solid-bio.*"
        },
        "string-input-490:1306:1228:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1599:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:934:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1302:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_electricity"
        },
        "column-filter-490:1306:1229:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1313:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1252:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1292:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1313:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_gas-ff.*"
        },
        "boolean-input-490:1492:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1289:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "column-filter-875:1300:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor_CH4_gas-synfuel[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor_CH4_gas-synfuel[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-synfuel[Mt/TWh]",
                    "tec_emission-factor_CH4_hydrogen[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-waste[Mt/TWh]",
                    "tec_emission-factor_CH4_gas-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_gas-ff-natural[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-ff-oil[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-ff-coal[Mt/TWh]",
                    "tec_emission-factor_CH4_electricity[Mt/TWh]"
                ]
            }
        },
        "single-selection-875:1311:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1540:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"OPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"OPEX"
            }
        },
        "string-input-875:1499:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1260:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1259:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_hydrogen"
        },
        "string-input-490:1306:1313:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_gas-ff-natural"
        },
        "string-input-490:1306:1244:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_electricity.*"
        },
        "string-input-490:1306:1201:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_liquid-ff.*"
        },
        "string-input-490:1419:1245":{
            "type":"string",
            "default":"ind_material-production.*",
            "description":"Enter Description",
            "example":"ind_material-production.*"
        },
        "double-input-490:1419:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1306:1216:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_solid-ff-coal"
        },
        "single-selection-875:1656:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-490:1659:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1419:1246":{
            "type":"string",
            "default":"Mt",
            "description":"Enter Description",
            "example":"Mt"
        },
        "single-selection-490:1306:1249:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1201:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1499:444":{
            "type":"string",
            "default":"ind_energy_excl-feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_excl-feedstock"
        },
        "string-input-875:1499:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "boolean-input-875:1495:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1499:446":{
            "type":"string",
            "default":"tec_energy_specific-excl-feedstock_(.*)_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_energy_specific-excl-feedstock_(.*)_(.*)\\[.*]"
        },
        "string-input-490:1306:1244:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1305:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1206:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1311:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1696:1666:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1289:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1244:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_electricity"
        },
        "string-input-875:1484:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-490:1289:1150:446":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-demand_(.*)\\[.*\\]"
        },
        "string-input-490:1306:1201:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_liquid-ff-oil"
        },
        "string-input-490:1289:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-490:1696:1666:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_gas-ff-natural_synfuel\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_gas-ff-natural_synfuel\\[.*\\]"
        },
        "single-selection-875:1483:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1289:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "single-selection-490:1267:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-875:1233:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1652:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_gas-bio_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_gas-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_gas-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_gas-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_gas-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_fbt_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_liquid-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_liquid-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-waste_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-waste_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-waste_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-waste_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste_hydrogen[TWh]"
                ]
            }
        },
        "column-filter-490:1419:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_fbt_tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_fbt_tech[Mt]",
                    "ind_material-production_tra-equip_tech[Mt]",
                    "ind_material-production_textiles_tech[Mt]",
                    "ind_material-production_mae_tech[Mt]",
                    "ind_material-production_wwp_tech[Mt]",
                    "ind_material-production_ois_tech[Mt]",
                    "ind_material-production_aluminium_prim[Mt]",
                    "ind_material-production_aluminium_sec[Mt]",
                    "ind_material-production_cement_dry-kiln[Mt]",
                    "ind_material-production_cement_wet-kiln[Mt]",
                    "ind_material-production_cement_geopolym[Mt]",
                    "ind_material-production_chem_chem-tech[Mt]",
                    "ind_material-production_copper_tech[Mt]",
                    "ind_material-production_glass_glass[Mt]",
                    "ind_material-production_lime_lime[Mt]",
                    "ind_material-production_paper_woodpulp[Mt]",
                    "ind_material-production_paper_recycled[Mt]",
                    "ind_material-production_steel_BF-BOF[Mt]",
                    "ind_material-production_steel_scrap-EAF[Mt]",
                    "ind_material-production_steel_hisarna[Mt]",
                    "ind_material-production_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "column-filter-490:1646:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_steel_BF-BOF_to-electricity[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_steel_BF-BOF_to-electricity[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_to-electricity[%]",
                    "ind_energy-carrier-mix_steel_hisarna_to-electricity[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_to-electricity[%]",
                    "ind_energy-carrier-mix_aluminium_prim_to-electricity[%]",
                    "ind_energy-carrier-mix_aluminium_sec_to-electricity[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_to-electricity[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_to-electricity[%]",
                    "ind_energy-carrier-mix_cement_geopolym_to-electricity[%]",
                    "ind_energy-carrier-mix_lime_lime_to-electricity[%]",
                    "ind_energy-carrier-mix_glass_glass_to-electricity[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_to-electricity[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_to-electricity[%]",
                    "ind_energy-carrier-mix_paper_recycled_to-electricity[%]",
                    "ind_energy-carrier-mix_ois_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_wwp_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_mae_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_copper_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_textiles_tech_to-electricity[%]",
                    "ind_energy-carrier-mix_fbt_tech_to-electricity[%]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]"
                ]
            }
        },
        "string-input-875:1599:445":{
            "type":"string",
            "default":"amm_energy-demand_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"amm_energy-demand_(.*)\\[.*"
        },
        "column-filter-490:1306:1268:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1599:446":{
            "type":"string",
            "default":"amm_(.*)_(.*)\\[%]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"amm_(.*)_(.*)\\[%]"
        },
        "column-filter-490:1306:1225:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1599:444":{
            "type":"string",
            "default":"amm_energy-demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_energy-demand"
        },
        "string-input-490:1306:1271:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_electricity.*"
        },
        "boolean-input-490:1306:1248:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1347:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "single-selection-490:1306:1276:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1696:1666:349":{
            "type":"string",
            "default":"ind_energy,gas-synfuel",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,gas-synfuel"
        },
        "single-selection-490:1306:1233:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1271:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1654:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "column-filter-490:1488:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_hydrogen_excl-feedstock_fbt_tech[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_hydrogen_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_fbt_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_textiles_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_mae_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_wwp_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_ois_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_electricity_excl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_electricity_excl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_electricity_excl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_electricity_excl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_electricity_excl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_electricity_excl-feedstock_copper_tech[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_electricity_excl-feedstock_glass_glass[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_electricity_excl-feedstock_lime_lime[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_electricity_excl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_electricity_excl-feedstock_paper_recycled[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_electricity_excl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_electricity_excl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_electricity_excl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_hydrogen_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-waste_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-bio_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-bio_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-bio_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-ff-natural_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-ff-oil_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-ff-coal_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_electricity_excl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_hydrogen_feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_fbt_tech[TWh]",
                    "ind_energy_electricity_feedstock_fbt_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_electricity_feedstock_tra-equip_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_textiles_tech[TWh]",
                    "ind_energy_electricity_feedstock_textiles_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_mae_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_mae_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_mae_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_mae_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_mae_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_mae_tech[TWh]",
                    "ind_energy_electricity_feedstock_mae_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_wwp_tech[TWh]",
                    "ind_energy_electricity_feedstock_wwp_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_ois_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_ois_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_ois_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_ois_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_ois_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_ois_tech[TWh]",
                    "ind_energy_electricity_feedstock_ois_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-waste_feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-bio_feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-bio_feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-bio_feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_aluminium_prim[TWh]",
                    "ind_energy_electricity_feedstock_aluminium_prim[TWh]",
                    "ind_energy_hydrogen_feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-waste_feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-bio_feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-bio_feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-bio_feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_aluminium_sec[TWh]",
                    "ind_energy_electricity_feedstock_aluminium_sec[TWh]",
                    "ind_energy_hydrogen_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-waste_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-bio_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-bio_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-bio_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_electricity_feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_hydrogen_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-waste_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-bio_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-bio_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-bio_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_electricity_feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_hydrogen_feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-waste_feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-bio_feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-bio_feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-bio_feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_cement_geopolym[TWh]",
                    "ind_energy_electricity_feedstock_cement_geopolym[TWh]",
                    "ind_energy_hydrogen_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-waste_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-bio_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-bio_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_electricity_feedstock_chem_chem-tech[TWh]",
                    "ind_energy_hydrogen_feedstock_copper_tech[TWh]",
                    "ind_energy_solid-waste_feedstock_copper_tech[TWh]",
                    "ind_energy_gas-bio_feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-bio_feedstock_copper_tech[TWh]",
                    "ind_energy_solid-bio_feedstock_copper_tech[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_copper_tech[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_copper_tech[TWh]",
                    "ind_energy_electricity_feedstock_copper_tech[TWh]",
                    "ind_energy_hydrogen_feedstock_glass_glass[TWh]",
                    "ind_energy_solid-waste_feedstock_glass_glass[TWh]",
                    "ind_energy_gas-bio_feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-bio_feedstock_glass_glass[TWh]",
                    "ind_energy_solid-bio_feedstock_glass_glass[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_glass_glass[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_glass_glass[TWh]",
                    "ind_energy_electricity_feedstock_glass_glass[TWh]",
                    "ind_energy_hydrogen_feedstock_lime_lime[TWh]",
                    "ind_energy_solid-waste_feedstock_lime_lime[TWh]",
                    "ind_energy_gas-bio_feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-bio_feedstock_lime_lime[TWh]",
                    "ind_energy_solid-bio_feedstock_lime_lime[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_lime_lime[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_lime_lime[TWh]",
                    "ind_energy_electricity_feedstock_lime_lime[TWh]",
                    "ind_energy_hydrogen_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-waste_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-bio_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-bio_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-bio_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_electricity_feedstock_paper_woodpulp[TWh]",
                    "ind_energy_hydrogen_feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-waste_feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-bio_feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-bio_feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-bio_feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_paper_recycled[TWh]",
                    "ind_energy_electricity_feedstock_paper_recycled[TWh]",
                    "ind_energy_hydrogen_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-waste_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-bio_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-bio_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-bio_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_electricity_feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_hydrogen_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-waste_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-bio_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-bio_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-bio_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_electricity_feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_hydrogen_feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-waste_feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-bio_feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-bio_feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-bio_feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_steel_hisarna[TWh]",
                    "ind_energy_electricity_feedstock_steel_hisarna[TWh]",
                    "ind_energy_hydrogen_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-waste_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-bio_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-bio_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-bio_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-ff-natural_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-ff-oil_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-ff-coal_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_electricity_feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_fbt_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_tra-equip_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_textiles_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_mae_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_wwp_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_ois_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_electricity_incl-feedstock_aluminium_prim[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_electricity_incl-feedstock_aluminium_sec[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_electricity_incl-feedstock_cement_dry-kiln[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_electricity_incl-feedstock_cement_wet-kiln[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_electricity_incl-feedstock_cement_geopolym[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_chem_chem-tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_electricity_incl-feedstock_copper_tech[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_electricity_incl-feedstock_glass_glass[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_electricity_incl-feedstock_lime_lime[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_electricity_incl-feedstock_paper_woodpulp[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_electricity_incl-feedstock_paper_recycled[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_electricity_incl-feedstock_steel_BF-BOF[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_electricity_incl-feedstock_steel_scrap-EAF[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_electricity_incl-feedstock_steel_hisarna[TWh]",
                    "ind_energy_hydrogen_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-waste_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-bio_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-bio_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-bio_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_gas-ff-natural_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_liquid-ff-oil_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_solid-ff-coal_incl-feedstock_steel_hydrog-DRI[TWh]",
                    "ind_energy_electricity_incl-feedstock_steel_hydrog-DRI[TWh]"
                ]
            }
        },
        "column-filter-490:1306:1210:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1494:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CO2_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CO2_aluminium_prim[Mt]",
                    "ind_emissions_CO2_aluminium_sec[Mt]",
                    "ind_emissions_CO2_cement_dry-kiln[Mt]",
                    "ind_emissions_CO2_cement_geopolym[Mt]",
                    "ind_emissions_CO2_cement_wet-kiln[Mt]",
                    "ind_emissions_CO2_chem_chem-tech[Mt]",
                    "ind_emissions_CO2_copper_tech[Mt]",
                    "ind_emissions_CO2_fbt_tech[Mt]",
                    "ind_emissions_CO2_glass_glass[Mt]",
                    "ind_emissions_CO2_lime_lime[Mt]",
                    "ind_emissions_CO2_mae_tech[Mt]",
                    "ind_emissions_CO2_ois_tech[Mt]",
                    "ind_emissions_CO2_paper_recycled[Mt]",
                    "ind_emissions_CO2_paper_woodpulp[Mt]",
                    "ind_emissions_CO2_steel_BF-BOF[Mt]",
                    "ind_emissions_CO2_steel_hisarna[Mt]",
                    "ind_emissions_CO2_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CO2_steel_scrap-EAF[Mt]",
                    "ind_emissions_CO2_textiles_tech[Mt]",
                    "ind_emissions_CO2_tra-equip_tech[Mt]",
                    "ind_emissions_CO2_wwp_tech[Mt]"
                ]
            }
        },
        "single-selection-490:761:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-875:1499:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-875:1653:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1216:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_solid-ff.*"
        },
        "boolean-input-490:1306:1276:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1316:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_solid-bio"
        },
        "string-input-490:1306:1259:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1599:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1233:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1271:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_electricity"
        },
        "string-input-490:1306:1259:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_hydrogen.*"
        },
        "string-input-490:1306:1216:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1469:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"I_nrg_st_el"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "I_nrg_st_el",
                    "I_nrg_st_cl",
                    "I_nrg_st_ol",
                    "I_nrg_st_ga",
                    "I_nrg_st_sb",
                    "I_nrg_st_lb",
                    "I_nrg_st_gb",
                    "I_nrg_st_sw",
                    "I_nrg_st_hy",
                    "I_nrg_ce_el",
                    "I_nrg_ce_cl",
                    "I_nrg_ce_ol",
                    "I_nrg_ce_ga",
                    "I_nrg_ce_sb",
                    "I_nrg_ce_lb",
                    "I_nrg_ce_gb",
                    "I_nrg_ce_sw",
                    "I_nrg_ce_hy",
                    "I_nrg_ch_el",
                    "I_nrg_ch_cl",
                    "I_nrg_ch_ol",
                    "I_nrg_ch_ga",
                    "I_nrg_ch_sb",
                    "I_nrg_ch_lb",
                    "I_nrg_ch_gb",
                    "I_nrg_ch_sw",
                    "I_nrg_ch_hy",
                    "I_nrg_pa_el",
                    "I_nrg_pa_cl",
                    "I_nrg_pa_ol",
                    "I_nrg_pa_ga",
                    "I_nrg_pa_sb",
                    "I_nrg_pa_lb",
                    "I_nrg_pa_gb",
                    "I_nrg_pa_sw",
                    "I_nrg_pa_hy",
                    "I_nrg_al_el",
                    "I_nrg_al_cl",
                    "I_nrg_al_ol",
                    "I_nrg_al_ga",
                    "I_nrg_al_sb",
                    "I_nrg_al_lb",
                    "I_nrg_al_gb",
                    "I_nrg_al_sw",
                    "I_nrg_al_hy",
                    "I_nrg_gl_el",
                    "I_nrg_gl_cl",
                    "I_nrg_gl_ol",
                    "I_nrg_gl_ga",
                    "I_nrg_gl_sb",
                    "I_nrg_gl_lb",
                    "I_nrg_gl_gb",
                    "I_nrg_gl_sw",
                    "I_nrg_gl_hy",
                    "I_nrg_li_el",
                    "I_nrg_li_cl",
                    "I_nrg_li_ol",
                    "I_nrg_li_ga",
                    "I_nrg_li_sb",
                    "I_nrg_li_lb",
                    "I_nrg_li_gb",
                    "I_nrg_li_sw",
                    "I_nrg_li_hy",
                    "I_nrg_tr_el",
                    "I_nrg_tr_cl",
                    "I_nrg_tr_ol",
                    "I_nrg_tr_ga",
                    "I_nrg_tr_sb",
                    "I_nrg_tr_lb",
                    "I_nrg_tr_gb",
                    "I_nrg_tr_sw",
                    "I_nrg_tr_hy",
                    "I_nrg_fb_el",
                    "I_nrg_fb_cl",
                    "I_nrg_fb_ol",
                    "I_nrg_fb_ga",
                    "I_nrg_fb_sb",
                    "I_nrg_fb_lb",
                    "I_nrg_fb_gb",
                    "I_nrg_fb_sw",
                    "I_nrg_fb_hy",
                    "I_nrg_tx_el",
                    "I_nrg_tx_cl",
                    "I_nrg_tx_ol",
                    "I_nrg_tx_ga",
                    "I_nrg_tx_sb",
                    "I_nrg_tx_lb",
                    "I_nrg_tx_gb",
                    "I_nrg_tx_sw",
                    "I_nrg_tx_hy",
                    "I_nrg_me_el",
                    "I_nrg_me_cl",
                    "I_nrg_me_ol",
                    "I_nrg_me_ga",
                    "I_nrg_me_sb",
                    "I_nrg_me_lb",
                    "I_nrg_me_gb",
                    "I_nrg_me_sw",
                    "I_nrg_me_hy",
                    "I_nrg_ww_el",
                    "I_nrg_ww_cl",
                    "I_nrg_ww_ol",
                    "I_nrg_ww_ga",
                    "I_nrg_ww_sb",
                    "I_nrg_ww_lb",
                    "I_nrg_ww_gb",
                    "I_nrg_ww_sw",
                    "I_nrg_ww_hy",
                    "I_nrg_oi_el",
                    "I_nrg_oi_cl",
                    "I_nrg_oi_ol",
                    "I_nrg_oi_ga",
                    "I_nrg_oi_sb",
                    "I_nrg_oi_lb",
                    "I_nrg_oi_gb",
                    "I_nrg_oi_sw",
                    "I_nrg_oi_hy",
                    "I_nrg_co_el",
                    "I_nrg_co_cl",
                    "I_nrg_co_ol",
                    "I_nrg_co_ga",
                    "I_nrg_co_sb",
                    "I_nrg_co_lb",
                    "I_nrg_co_gb",
                    "I_nrg_co_sw",
                    "I_nrg_co_hy"
                ]
            }
        },
        "string-input-875:1514:1420":{
            "type":"string",
            "default":".*material-production_ammonia_(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*material-production_ammonia_(.+)\\[.*"
        },
        "single-selection-490:932:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1659:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_total[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_total[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_total[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_total[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_total[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_total[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_total[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_total[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_total[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_total[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_total[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_total[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_total[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_total[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_total[TWh]"
                ]
            }
        },
        "string-input-490:1491:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-875:1491:349":{
            "type":"string",
            "default":"amm_emissions_CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"amm_emissions_CO2"
        },
        "single-selection-490:1696:1664:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1491:357":{
            "type":"string",
            "default":"ind_CO2-emissions_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_CO2-emissions_.*_(.*_.*)\\[.*]"
        },
        "string-input-875:1690:1666:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1690:1666:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_gas-ff-natural_synfuel\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_gas-ff-natural_synfuel\\[.*\\]"
        },
        "boolean-input-490:1494:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "single-selection-490:1696:1664:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1290:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1316:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1297:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1316:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_solid-bio.*"
        },
        "column-filter-490:1306:1254:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1286:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_solid-ff-coal"
        },
        "column-filter-490:1510:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_fridge_aluminium[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_fridge_aluminium[t]",
                    "ind_dem_fridge_ammonia[t]",
                    "ind_dem_fridge_cement[t]",
                    "ind_dem_fridge_chem[t]",
                    "ind_dem_fridge_copper[t]",
                    "ind_dem_fridge_glass[t]",
                    "ind_dem_fridge_lime[t]",
                    "ind_dem_fridge_other[t]",
                    "ind_dem_fridge_paper[t]",
                    "ind_dem_fridge_steel[t]",
                    "ind_dem_fridge_timber[t]",
                    "ind_dem_freezer_aluminium[t]",
                    "ind_dem_freezer_ammonia[t]",
                    "ind_dem_freezer_cement[t]",
                    "ind_dem_freezer_chem[t]",
                    "ind_dem_freezer_copper[t]",
                    "ind_dem_freezer_glass[t]",
                    "ind_dem_freezer_lime[t]",
                    "ind_dem_freezer_other[t]",
                    "ind_dem_freezer_paper[t]",
                    "ind_dem_freezer_steel[t]",
                    "ind_dem_freezer_timber[t]",
                    "ind_dem_dishwasher_aluminium[t]",
                    "ind_dem_dishwasher_ammonia[t]",
                    "ind_dem_dishwasher_cement[t]",
                    "ind_dem_dishwasher_chem[t]",
                    "ind_dem_dishwasher_copper[t]",
                    "ind_dem_dishwasher_glass[t]",
                    "ind_dem_dishwasher_lime[t]",
                    "ind_dem_dishwasher_other[t]",
                    "ind_dem_dishwasher_paper[t]",
                    "ind_dem_dishwasher_steel[t]",
                    "ind_dem_dishwasher_timber[t]",
                    "ind_dem_dryer_aluminium[t]",
                    "ind_dem_dryer_ammonia[t]",
                    "ind_dem_dryer_cement[t]",
                    "ind_dem_dryer_chem[t]",
                    "ind_dem_dryer_copper[t]",
                    "ind_dem_dryer_glass[t]",
                    "ind_dem_dryer_lime[t]",
                    "ind_dem_dryer_other[t]",
                    "ind_dem_dryer_paper[t]",
                    "ind_dem_dryer_steel[t]",
                    "ind_dem_dryer_timber[t]",
                    "ind_dem_tv_aluminium[t]",
                    "ind_dem_tv_ammonia[t]",
                    "ind_dem_tv_cement[t]",
                    "ind_dem_tv_chem[t]",
                    "ind_dem_tv_copper[t]",
                    "ind_dem_tv_glass[t]",
                    "ind_dem_tv_lime[t]",
                    "ind_dem_tv_other[t]",
                    "ind_dem_tv_paper[t]",
                    "ind_dem_tv_steel[t]",
                    "ind_dem_tv_timber[t]",
                    "ind_dem_computer_aluminium[t]",
                    "ind_dem_computer_ammonia[t]",
                    "ind_dem_computer_cement[t]",
                    "ind_dem_computer_chem[t]",
                    "ind_dem_computer_copper[t]",
                    "ind_dem_computer_glass[t]",
                    "ind_dem_computer_lime[t]",
                    "ind_dem_computer_other[t]",
                    "ind_dem_computer_paper[t]",
                    "ind_dem_computer_steel[t]",
                    "ind_dem_computer_timber[t]"
                ]
            }
        },
        "column-filter-490:1301:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor_N2O_gas-synfuel[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor_N2O_gas-synfuel[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-synfuel[Mt/TWh]",
                    "tec_emission-factor_N2O_hydrogen[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-waste[Mt/TWh]",
                    "tec_emission-factor_N2O_gas-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_gas-ff-natural[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-ff-oil[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-ff-coal[Mt/TWh]",
                    "tec_emission-factor_N2O_electricity[Mt/TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1219:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1259:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_technology-development_ammonia_amm-tech[%]_1minus"
                ]
            }
        },
        "string-input-490:1306:1286:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_solid-ff.*"
        },
        "single-selection-490:1656:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1286:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1498:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-875:1691:1686:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-875:934:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_prod_percentage_ammonia[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_prod_percentage_ammonia[%]"
                ]
            }
        },
        "string-input-490:1508:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1621:357":{
            "type":"string",
            "default":"ind_energy-demand_.*_(gas.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy-demand_.*_(gas.*)\\[.*"
        },
        "string-input-490:1621:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1508:357":{
            "type":"string",
            "default":"ind_energy-demand_(.*)_.*\\[TWh\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy-demand_(.*)_.*\\[TWh\\]"
        },
        "string-input-490:1306:1300:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1469:1246":{
            "type":"string",
            "default":"GWh",
            "description":"Enter Description",
            "example":"GWh"
        },
        "column-filter-490:1306:1227:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1469:1245":{
            "type":"string",
            "default":".*nrg.*",
            "description":"Enter Description",
            "example":".*nrg.*"
        },
        "string-input-490:1306:1300:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_hydrogen"
        },
        "single-selection-875:1669:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-490:1508:349":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy-demand"
        },
        "string-input-875:1491:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "boolean-input-490:1306:1204:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1672:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas_bio_total[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid_bio_total[TWh]",
                    "ind_energy_ammonia_amm-tech_solid_bio_total[TWh]"
                ]
            }
        },
        "column-filter-875:761:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-efficiency_ammonia[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-efficiency_ammonia[%]",
                    "ind_material-efficiency_ammonia[%]_1minus"
                ]
            }
        },
        "string-input-490:1491:349":{
            "type":"string",
            "default":"ind_emissions_CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_emissions_CO2"
        },
        "string-input-875:1491:357":{
            "type":"string",
            "default":"amm_emissions_CO2_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_CO2_.*_(.*_.*)\\[.*]"
        },
        "string-input-875:1484:445":{
            "type":"string",
            "default":"ind_energy_feedstock_(.*)\\[TWh]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_feedstock_(.*)\\[TWh]"
        },
        "string-input-490:1306:1300:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_hydrogen.*"
        },
        "string-input-875:1484:444":{
            "type":"string",
            "default":"ind_energy_incl-feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_incl-feedstock"
        },
        "single-selection-490:1306:1307:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1514:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "string-input-875:1484:446":{
            "type":"string",
            "default":"ind_energy_excl-feedstock_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_excl-feedstock_(.*)\\[.*]"
        },
        "column-filter-490:1306:1282:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1652:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "single-selection-490:1306:1262:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1495:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1621:349":{
            "type":"string",
            "default":"ind_bioenergy",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_bioenergy"
        },
        "string-input-490:1720:1245":{
            "type":"string",
            "default":"specific_energy_.*\\[.*",
            "description":"Enter Description",
            "example":"specific_energy_.*\\[.*"
        },
        "double-input-490:1418:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1720:1246":{
            "type":"string",
            "default":"TWh/kt",
            "description":"Enter Description",
            "example":"TWh/kt"
        },
        "column-filter-490:1496:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_N2O_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_N2O_aluminium_prim[Mt]",
                    "ind_emissions_N2O_aluminium_sec[Mt]",
                    "ind_emissions_N2O_cement_dry-kiln[Mt]",
                    "ind_emissions_N2O_cement_geopolym[Mt]",
                    "ind_emissions_N2O_cement_wet-kiln[Mt]",
                    "ind_emissions_N2O_chem_chem-tech[Mt]",
                    "ind_emissions_N2O_copper_tech[Mt]",
                    "ind_emissions_N2O_fbt_tech[Mt]",
                    "ind_emissions_N2O_glass_glass[Mt]",
                    "ind_emissions_N2O_lime_lime[Mt]",
                    "ind_emissions_N2O_mae_tech[Mt]",
                    "ind_emissions_N2O_ois_tech[Mt]",
                    "ind_emissions_N2O_paper_recycled[Mt]",
                    "ind_emissions_N2O_paper_woodpulp[Mt]",
                    "ind_emissions_N2O_steel_BF-BOF[Mt]",
                    "ind_emissions_N2O_steel_hisarna[Mt]",
                    "ind_emissions_N2O_steel_hydrog-DRI[Mt]",
                    "ind_emissions_N2O_steel_scrap-EAF[Mt]",
                    "ind_emissions_N2O_textiles_tech[Mt]",
                    "ind_emissions_N2O_tra-equip_tech[Mt]",
                    "ind_emissions_N2O_wwp_tech[Mt]"
                ]
            }
        },
        "single-selection-490:1306:1263:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1247:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1239:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1646:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1250:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_liquid-ff.*"
        },
        "string-input-490:1306:1226:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1315:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_solid-bio.*"
        },
        "string-input-490:1545:354":{
            "type":"string",
            "default":"MEUR",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"MEUR"
        },
        "column-filter-490:1706:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_cement[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_cement[Mt]",
                    "ind_material-production_chem[Mt]",
                    "ind_material-production_paper[Mt]",
                    "ind_material-production_steel[Mt]",
                    "ind_energy-demand_cement[TWh]",
                    "ind_energy-demand_chem[TWh]",
                    "ind_energy-demand_paper[TWh]",
                    "ind_energy-demand_steel[TWh]"
                ]
            }
        },
        "string-input-490:1306:1250:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1649:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:1495:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1247:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1226:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_hydrogen.*"
        },
        "string-input-490:1306:1315:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1271:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1545:357":{
            "type":"string",
            "default":"ind_opex_(.*)_.*\\[MEUR\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_opex_(.*)_.*\\[MEUR\\]"
        },
        "string-input-490:1306:1307:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1218:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1271:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1218:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_gas-bio.*"
        },
        "string-input-490:1306:1307:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_solid-ff.*"
        },
        "column-filter-490:1714:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_cement[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_cement[Mt]",
                    "ind_material-production_chem[Mt]",
                    "ind_material-production_paper[Mt]",
                    "ind_material-production_steel[Mt]",
                    "ind_emissions_CO2_cement[Mt]",
                    "ind_emissions_CO2_chem[Mt]",
                    "ind_emissions_CO2_paper[Mt]",
                    "ind_emissions_CO2_steel[Mt]"
                ]
            }
        },
        "string-input-490:1289:1163":{
            "type":"string",
            "default":"2000",
            "description":"Enter Description",
            "example":"2000"
        },
        "single-selection-490:751:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1513:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1289:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "string-input-490:1306:1250:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_liquid-ff-oil"
        },
        "string-input-490:1306:1226:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_hydrogen"
        },
        "string-input-490:1545:349":{
            "type":"string",
            "default":"ind_operating-cost",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_operating-cost"
        },
        "single-selection-490:1706:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 2/1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 2/1"
            }
        },
        "boolean-input-490:1657:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-490:1306:1200:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_solid-ff-coal[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]"
                ]
            }
        },
        "single-selection-875:1690:1665:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1211:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1307:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_solid-ff-coal"
        },
        "column-filter-490:1687:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "ind_energy-demand_cement[TWh]",
                    "ind_energy-demand_chem[TWh]",
                    "ind_energy-demand_paper[TWh]",
                    "ind_energy-demand_steel[TWh]"
                ]
            }
        },
        "string-input-490:1306:1297:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_hydrogen"
        },
        "boolean-input-490:1649:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1289:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1170:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "boolean-input-490:1224:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1297:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1691:1684:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1306:1289:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_liquid-ff-oil"
        },
        "boolean-input-490:1306:1282:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1691:1684:357":{
            "type":"string",
            "default":"amm_emissions_CO2_.*-bio_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_CO2_.*-bio_(.*_.*)\\[.*]"
        },
        "string-input-490:1306:1297:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_hydrogen.*"
        },
        "single-selection-490:1641:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-490:1306:1265:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1690:1665:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_liquid-ff-oil_synfuel[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_synfuel[TWh]"
                ]
            }
        },
        "string-input-490:1575:444":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy-demand"
        },
        "string-input-490:1575:445":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy-demand_(.*)\\[.*"
        },
        "boolean-input-490:1696:1664:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1575:446":{
            "type":"string",
            "default":"ind_(.*)_(.*)\\[%]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_(.*)_(.*)\\[%]"
        },
        "string-input-490:1224:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1289:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_liquid-ff.*"
        },
        "boolean-input-490:1262:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-875:1691:1684:349":{
            "type":"string",
            "default":"amm_emissions_CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"amm_emissions_CO2"
        },
        "double-input-875:1365:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1306:1218:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_gas-bio"
        },
        "boolean-input-875:1311:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1488:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "column-filter-490:1642:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor-process_N2O_copper_tech[Mt/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor-process_N2O_copper_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_ois_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_wwp_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_mae_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_textiles_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_fbt_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_tra-equip_tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_lime_lime[Mt/Mt]",
                    "tec_emission-factor-process_N2O_glass_glass[Mt/Mt]",
                    "tec_emission-factor-process_N2O_aluminium_sec[Mt/Mt]",
                    "tec_emission-factor-process_N2O_aluminium_prim[Mt/Mt]",
                    "tec_emission-factor-process_N2O_paper_recycled[Mt/Mt]",
                    "tec_emission-factor-process_N2O_paper_woodpulp[Mt/Mt]",
                    "tec_emission-factor-process_N2O_chem_chem-tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_ammonia_amm-tech[Mt/Mt]",
                    "tec_emission-factor-process_N2O_cement_geopolym[Mt/Mt]",
                    "tec_emission-factor-process_N2O_cement_wet-kiln[Mt/Mt]",
                    "tec_emission-factor-process_N2O_cement_dry-kiln[Mt/Mt]",
                    "tec_emission-factor-process_N2O_steel_hydrog-DRI[Mt/Mt]",
                    "tec_emission-factor-process_N2O_steel_hisarna[Mt/Mt]",
                    "tec_emission-factor-process_N2O_steel_scrap-EAF[Mt/Mt]",
                    "tec_emission-factor-process_N2O_steel_BF-BOF[Mt/Mt]"
                ]
            }
        },
        "string-input-490:1292:1151:446":{
            "type":"string",
            "default":"ind_emissions-(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_emissions-(.*)\\[.*"
        },
        "string-input-490:1292:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "single-selection-875:931:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1306:1319:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1292:1151:445":{
            "type":"string",
            "default":"cal_ind_emissions_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_emissions_(.*)\\[.*"
        },
        "string-input-490:1306:1233:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1493:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1306:1241:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_liquid-bio"
        },
        "string-input-875:1493:357":{
            "type":"string",
            "default":"amm_emissions_N2O_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_N2O_.*_(.*_.*)\\[.*]"
        },
        "string-input-490:1306:1324:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_hydrogen.*"
        },
        "string-input-490:1306:1241:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_liquid-bio.*"
        },
        "single-selection-490:1306:1254:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1235:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_gas-ff.*"
        },
        "string-input-875:1233:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "string-input-490:1306:1324:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1233:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "string-input-490:1224:1146:444":{
            "type":"string",
            "default":"ind_prod_checked",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod_checked"
        },
        "string-input-490:1306:1241:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1224:1146:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "string-input-490:1306:1233:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_liquid-ff-oil"
        },
        "string-input-490:1224:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "single-selection-490:1714:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:932:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1690:1667:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "column-filter-875:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1262:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1690:1667:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_synfuel\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_synfuel\\[.*]"
        },
        "string-input-875:1690:1667:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "single-selection-490:1706:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1324:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_hydrogen"
        },
        "boolean-input-490:1496:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-490:1306:1319:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1256:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1262:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1289:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1669:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1292:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-490:1696:1667:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_aluminium_prim_liquid-synfuel[TWh]",
                    "ind_energy_aluminium_sec_liquid-synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-synfuel[TWh]",
                    "ind_energy_cement_geopolym_liquid-synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-synfuel[TWh]",
                    "ind_energy_chem_chem-tech_liquid-synfuel[TWh]",
                    "ind_energy_copper_tech_liquid-synfuel[TWh]",
                    "ind_energy_fbt_tech_liquid-synfuel[TWh]",
                    "ind_energy_glass_glass_liquid-synfuel[TWh]",
                    "ind_energy_lime_lime_liquid-synfuel[TWh]",
                    "ind_energy_mae_tech_liquid-synfuel[TWh]",
                    "ind_energy_ois_tech_liquid-synfuel[TWh]",
                    "ind_energy_paper_recycled_liquid-synfuel[TWh]",
                    "ind_energy_paper_woodpulp_liquid-synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-synfuel[TWh]",
                    "ind_energy_steel_hisarna_liquid-synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-synfuel[TWh]",
                    "ind_energy_textiles_tech_liquid-synfuel[TWh]",
                    "ind_energy_tra-equip_tech_liquid-synfuel[TWh]",
                    "ind_energy_wwp_tech_liquid-synfuel[TWh]",
                    "ind_energy_aluminium_prim_gas-synfuel[TWh]",
                    "ind_energy_aluminium_sec_gas-synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_gas-synfuel[TWh]",
                    "ind_energy_cement_geopolym_gas-synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_gas-synfuel[TWh]",
                    "ind_energy_chem_chem-tech_gas-synfuel[TWh]",
                    "ind_energy_copper_tech_gas-synfuel[TWh]",
                    "ind_energy_fbt_tech_gas-synfuel[TWh]",
                    "ind_energy_glass_glass_gas-synfuel[TWh]",
                    "ind_energy_lime_lime_gas-synfuel[TWh]",
                    "ind_energy_mae_tech_gas-synfuel[TWh]",
                    "ind_energy_ois_tech_gas-synfuel[TWh]",
                    "ind_energy_paper_recycled_gas-synfuel[TWh]",
                    "ind_energy_paper_woodpulp_gas-synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_gas-synfuel[TWh]",
                    "ind_energy_steel_hisarna_gas-synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-synfuel[TWh]",
                    "ind_energy_textiles_tech_gas-synfuel[TWh]",
                    "ind_energy_tra-equip_tech_gas-synfuel[TWh]",
                    "ind_energy_wwp_tech_gas-synfuel[TWh]"
                ]
            }
        },
        "string-input-490:1649:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "string-input-490:1649:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_electricity\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_electricity\\[.*]"
        },
        "string-input-490:1649:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "boolean-input-490:1306:1273:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1292:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-490:1306:1256:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1483:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-875:1690:1667:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "boolean-input-490:1575:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-490:1612:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_feedstock_fbt_tech_solid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_feedstock_fbt_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_textiles_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_mae_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_wwp_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_ois_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_feedstock_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_feedstock_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_feedstock_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_feedstock_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_feedstock_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_feedstock_copper_tech_solid-bio[TWh]",
                    "ind_energy_feedstock_glass_glass_solid-bio[TWh]",
                    "ind_energy_feedstock_lime_lime_solid-bio[TWh]",
                    "ind_energy_feedstock_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_feedstock_paper_recycled_solid-bio[TWh]",
                    "ind_energy_feedstock_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_feedstock_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_feedstock_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_feedstock_steel_hydrog-DRI_solid-bio[TWh]"
                ]
            }
        },
        "single-selection-875:1672:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1493:349":{
            "type":"string",
            "default":"amm_emissions_N2O",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"amm_emissions_N2O"
        },
        "string-input-875:1518:1420":{
            "type":"string",
            "default":".*emissions-(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*emissions-(.+)\\[.*"
        },
        "single-selection-490:1306:1200:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1719:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "single-selection-490:1658:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1202:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1648:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1507:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1273:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1224:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_liquid-ff-oil"
        },
        "boolean-input-490:1612:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:751:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1672:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-875:761:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1306:1273:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1262:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor-process_CO2_ammonia_amm-tech[Mt/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor-process_CO2_ammonia_amm-tech[Mt/Mt]"
                ]
            }
        },
        "string-input-490:1306:1224:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1647:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1237:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1483:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_energy_specific-feedstock_ammonia_amm-tech_hydrogen[TWh/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_energy_specific-feedstock_ammonia_amm-tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_ammonia_amm-tech_electricity[TWh/Mt]"
                ]
            }
        },
        "string-input-490:1652:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_hydrogen\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_hydrogen\\[.*\\]"
        },
        "single-selection-490:1696:1667:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "string-input-490:1652:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1305:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_liquid-ff-oil"
        },
        "boolean-input-490:1620:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1224:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "single-selection-490:1263:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1306:1245:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1202:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]"
                ]
            }
        },
        "single-selection-490:1671:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1493:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1224:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_liquid-ff.*"
        },
        "boolean-input-875:1499:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-875:934:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "string-input-490:1306:1305:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_liquid-ff.*"
        },
        "string-input-875:934:445":{
            "type":"string",
            "default":"ind_dem_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_dem_(.*)\\[.*"
        },
        "string-input-875:934:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "string-input-490:1306:1305:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1265:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1301:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1696:1667:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "double-input-490:1469:1247":{
            "type":"number",
            "default":1000.0,
            "description":"Enter Description",
            "example":1000.0
        },
        "string-input-490:1306:1295:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_liquid-bio"
        },
        "boolean-input-490:1306:1291:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1292:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1642:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1252:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_hydrogen"
        },
        "boolean-input-490:1512:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1295:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_liquid-bio.*"
        },
        "string-input-490:1306:1252:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_hydrogen.*"
        },
        "string-input-490:1306:1295:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1233:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_liquid-ff.*"
        },
        "string-input-490:1306:1252:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1486:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1220:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1652:349":{
            "type":"string",
            "default":"ind_energy,hydrogen_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,hydrogen_added"
        },
        "boolean-input-490:1306:1263:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1233:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1702:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1657:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_liquid-ff-oil_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_gas-ff-natural[TWh]"
                ]
            }
        },
        "column-filter-490:1306:1264:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1614:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_feedstock_fbt_tech_liquid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_feedstock_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_mae_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_ois_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_feedstock_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_feedstock_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_feedstock_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_feedstock_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_feedstock_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_copper_tech_liquid-bio[TWh]",
                    "ind_energy_feedstock_glass_glass_liquid-bio[TWh]",
                    "ind_energy_feedstock_lime_lime_liquid-bio[TWh]",
                    "ind_energy_feedstock_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_feedstock_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_feedstock_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_feedstock_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_feedstock_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_feedstock_steel_hydrog-DRI_liquid-bio[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1280:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1647:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1717:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1306:1300:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1647:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_electricity\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_electricity\\[.*\\]"
        },
        "single-selection-490:1306:1317:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1200:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1484:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1620:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_steel_solid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_steel_solid-bio[TWh]",
                    "ind_energy-demand_cement_solid-bio[TWh]",
                    "ind_energy-demand_chem_solid-bio[TWh]",
                    "ind_energy-demand_paper_solid-bio[TWh]",
                    "ind_energy-demand_aluminium_solid-bio[TWh]",
                    "ind_energy-demand_glass_solid-bio[TWh]",
                    "ind_energy-demand_lime_solid-bio[TWh]",
                    "ind_energy-demand_tra-equip_solid-bio[TWh]",
                    "ind_energy-demand_fbt_solid-bio[TWh]",
                    "ind_energy-demand_textiles_solid-bio[TWh]",
                    "ind_energy-demand_mae_solid-bio[TWh]",
                    "ind_energy-demand_wwp_solid-bio[TWh]",
                    "ind_energy-demand_ois_solid-bio[TWh]",
                    "ind_energy-demand_copper_solid-bio[TWh]"
                ]
            }
        },
        "column-filter-490:1306:1258:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1317:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1575:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "single-selection-875:1309:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-490:1306:1252:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1231:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_solid-waste.*"
        },
        "string-input-875:1495:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1306:1231:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1495:357":{
            "type":"string",
            "default":"amm_emissions_CH4_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_CH4_.*_.*\\[.*]"
        },
        "string-input-875:1495:349":{
            "type":"string",
            "default":"amm_emissions_CH4",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"amm_emissions_CH4"
        },
        "string-input-490:1619:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1488:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "column-filter-490:1306:1238:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_liquid-ff-oil[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]"
                ]
            }
        },
        "string-input-490:1488:446":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*_.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_(.*)_(.*_.*_.*)\\[.*]"
        },
        "single-selection-490:1289:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-490:1488:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[.*]"
        },
        "string-input-490:1306:1231:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_solid-waste"
        },
        "string-input-490:1619:357":{
            "type":"string",
            "default":"ind_.*_.*(waste).*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_.*_.*(waste).*"
        },
        "column-filter-490:1507:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CH4_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CH4_aluminium_prim[Mt]",
                    "ind_emissions_CH4_aluminium_sec[Mt]",
                    "ind_emissions_CH4_cement_dry-kiln[Mt]",
                    "ind_emissions_CH4_cement_geopolym[Mt]",
                    "ind_emissions_CH4_cement_wet-kiln[Mt]",
                    "ind_emissions_CH4_chem_chem-tech[Mt]",
                    "ind_emissions_CH4_copper_tech[Mt]",
                    "ind_emissions_CH4_fbt_tech[Mt]",
                    "ind_emissions_CH4_glass_glass[Mt]",
                    "ind_emissions_CH4_lime_lime[Mt]",
                    "ind_emissions_CH4_mae_tech[Mt]",
                    "ind_emissions_CH4_ois_tech[Mt]",
                    "ind_emissions_CH4_paper_recycled[Mt]",
                    "ind_emissions_CH4_paper_woodpulp[Mt]",
                    "ind_emissions_CH4_steel_BF-BOF[Mt]",
                    "ind_emissions_CH4_steel_hisarna[Mt]",
                    "ind_emissions_CH4_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CH4_steel_scrap-EAF[Mt]",
                    "ind_emissions_CH4_textiles_tech[Mt]",
                    "ind_emissions_CH4_tra-equip_tech[Mt]",
                    "ind_emissions_CH4_wwp_tech[Mt]",
                    "ind_emissions_N2O_aluminium_prim[Mt]",
                    "ind_emissions_N2O_aluminium_sec[Mt]",
                    "ind_emissions_N2O_cement_dry-kiln[Mt]",
                    "ind_emissions_N2O_cement_geopolym[Mt]",
                    "ind_emissions_N2O_cement_wet-kiln[Mt]",
                    "ind_emissions_N2O_chem_chem-tech[Mt]",
                    "ind_emissions_N2O_copper_tech[Mt]",
                    "ind_emissions_N2O_fbt_tech[Mt]",
                    "ind_emissions_N2O_glass_glass[Mt]",
                    "ind_emissions_N2O_lime_lime[Mt]",
                    "ind_emissions_N2O_mae_tech[Mt]",
                    "ind_emissions_N2O_ois_tech[Mt]",
                    "ind_emissions_N2O_paper_recycled[Mt]",
                    "ind_emissions_N2O_paper_woodpulp[Mt]",
                    "ind_emissions_N2O_steel_BF-BOF[Mt]",
                    "ind_emissions_N2O_steel_hisarna[Mt]",
                    "ind_emissions_N2O_steel_hydrog-DRI[Mt]",
                    "ind_emissions_N2O_steel_scrap-EAF[Mt]",
                    "ind_emissions_N2O_textiles_tech[Mt]",
                    "ind_emissions_N2O_tra-equip_tech[Mt]",
                    "ind_emissions_N2O_wwp_tech[Mt]",
                    "ind_emissions_CO2_aluminium_prim[Mt]",
                    "ind_emissions_CO2_aluminium_sec[Mt]",
                    "ind_emissions_CO2_cement_dry-kiln[Mt]",
                    "ind_emissions_CO2_cement_geopolym[Mt]",
                    "ind_emissions_CO2_cement_wet-kiln[Mt]",
                    "ind_emissions_CO2_chem_chem-tech[Mt]",
                    "ind_emissions_CO2_copper_tech[Mt]",
                    "ind_emissions_CO2_fbt_tech[Mt]",
                    "ind_emissions_CO2_glass_glass[Mt]",
                    "ind_emissions_CO2_lime_lime[Mt]",
                    "ind_emissions_CO2_mae_tech[Mt]",
                    "ind_emissions_CO2_ois_tech[Mt]",
                    "ind_emissions_CO2_paper_recycled[Mt]",
                    "ind_emissions_CO2_paper_woodpulp[Mt]",
                    "ind_emissions_CO2_steel_BF-BOF[Mt]",
                    "ind_emissions_CO2_steel_hisarna[Mt]",
                    "ind_emissions_CO2_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CO2_steel_scrap-EAF[Mt]",
                    "ind_emissions_CO2_textiles_tech[Mt]",
                    "ind_emissions_CO2_tra-equip_tech[Mt]",
                    "ind_emissions_CO2_wwp_tech[Mt]"
                ]
            }
        },
        "boolean-input-490:1306:1271:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1696:1665:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "single-selection-875:1311:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1258:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1690:1665:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1349:1420":{
            "type":"string",
            "default":".*material-production_(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*material-production_(.+)\\[.*"
        },
        "boolean-input-875:1599:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1619:349":{
            "type":"string",
            "default":"ind",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind"
        },
        "string-input-490:1224:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1224:1151:445":{
            "type":"string",
            "default":"cal_ind_production-calibration_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_production-calibration_(.*)\\[.*"
        },
        "string-input-490:1224:1151:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_(.*)\\[.*"
        },
        "single-selection-490:1306:1202:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1289:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1656:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1672:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1245:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1300:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1649:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_electricity_total[TWh]"
                ]
            }
        },
        "string-input-875:1647:349":{
            "type":"string",
            "default":"ind_energy,electricity_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,electricity_added"
        },
        "string-input-875:1365:1246":{
            "type":"string",
            "default":"kt",
            "description":"Enter Description",
            "example":"kt"
        },
        "string-input-875:1365:1245":{
            "type":"string",
            "default":"ind_dem.*",
            "description":"Enter Description",
            "example":"ind_dem.*"
        },
        "string-input-490:1418:1246":{
            "type":"string",
            "default":"kt",
            "description":"Enter Description",
            "example":"kt"
        },
        "string-input-490:1418:1245":{
            "type":"string",
            "default":"ind_dem.*\\[t\\]",
            "description":"Enter Description",
            "example":"ind_dem.*\\[t\\]"
        },
        "column-filter-490:1306:1204:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_liquid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]"
                ]
            }
        },
        "single-selection-490:1541:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-490:1306:1293:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "double-input-490:1720:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1306:1293:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_solid-waste.*"
        },
        "single-selection-875:1233:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-875:1669:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1269:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1300:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-875:1652:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1224:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1696:1665:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1275:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1696:1667:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1293:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_solid-waste"
        },
        "single-selection-490:1659:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1614:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1234:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_energy_specific-excl-feedstock_copper_tech_hydrogen[TWh/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_energy_specific-excl-feedstock_copper_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_copper_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ois_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_wwp_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_mae_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_textiles_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_fbt_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_tra-equip_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_lime_lime_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_glass_glass_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_sec_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_aluminium_prim_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_recycled_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_paper_woodpulp_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_chem_chem-tech_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_geopolym_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_dry-kiln_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_cement_wet-kiln_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hydrog-DRI_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_hisarna_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_scrap-EAF_electricity[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_steel_BF-BOF_electricity[TWh/Mt]"
                ]
            }
        },
        "boolean-input-490:1306:1254:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:751:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1234:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1237:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_solid-waste"
        },
        "string-input-490:1306:1222:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_solid-waste.*"
        },
        "boolean-input-490:1306:1222:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1219:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1670:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1320:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_gas-ff.*"
        },
        "single-selection-875:1305:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1320:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1236:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1690:1664:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1222:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1690:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-490:1306:1222:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_solid-waste"
        },
        "string-input-490:1306:1320:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_gas-ff-natural"
        },
        "boolean-input-490:1306:1293:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1207:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_hydrogen"
        },
        "string-input-490:1306:1278:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_liquid-bio.*"
        },
        "column-filter-490:1306:1290:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1276:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1276:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_gas-bio.*"
        },
        "single-selection-490:1306:1297:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1276:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_gas-bio"
        },
        "single-selection-490:1306:1211:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1300:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1170:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1282:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1207:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1697:1682:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CO2_cement_dry-kiln[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CO2_cement_dry-kiln[Mt]",
                    "ind_emissions_CO2_cement_geopolym[Mt]",
                    "ind_emissions_CO2_cement_wet-kiln[Mt]",
                    "ind_emissions_CO2_lime_lime[Mt]",
                    "ind_emissions_CO2_paper_recycled[Mt]",
                    "ind_emissions_CO2_paper_woodpulp[Mt]",
                    "ind_emissions_CO2_steel_BF-BOF[Mt]",
                    "ind_emissions_CO2_steel_hisarna[Mt]",
                    "ind_emissions_CO2_steel_scrap-EAF[Mt]",
                    "ind_CC_steel_BF-BOF[%]_1minus",
                    "ind_CC_steel_scrap-EAF[%]_1minus",
                    "ind_CC_steel_hisarna[%]_1minus",
                    "ind_CC_steel_hydrog-DRI[%]_1minus",
                    "ind_CC_cement_dry-kiln[%]_1minus",
                    "ind_CC_cement_wet-kiln[%]_1minus",
                    "ind_CC_cement_geopolym[%]_1minus",
                    "ind_CC_chem_chem-tech[%]_1minus",
                    "ind_CC_paper_woodpulp[%]_1minus",
                    "ind_CC_paper_recycled[%]_1minus",
                    "ind_CC_aluminium_prim[%]_1minus",
                    "ind_CC_aluminium_sec[%]_1minus",
                    "ind_CC_glass_glass[%]_1minus",
                    "ind_CC_lime_lime[%]_1minus",
                    "ind_CC_tra-equip_tech[%]_1minus",
                    "ind_CC_fbt_tech[%]_1minus",
                    "ind_CC_textiles_tech[%]_1minus",
                    "ind_CC_mae_tech[%]_1minus",
                    "ind_CC_wwp_tech[%]_1minus",
                    "ind_CC_ois_tech[%]_1minus",
                    "ind_CC_copper_tech[%]_1minus"
                ]
            }
        },
        "string-input-490:1306:1207:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_hydrogen.*"
        },
        "string-input-490:1306:1261:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_solid-ff.*"
        },
        "string-input-490:1306:1261:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-875:1366:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "single-selection-490:1224:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-490:751:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1306:1315:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1284:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1613:349":{
            "type":"string",
            "default":"ind_biomaterial",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_biomaterial"
        },
        "string-input-490:1613:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1702:357":{
            "type":"string",
            "default":"ind_dem_.*_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_dem_.*_.*_(.*)\\[.*"
        },
        "string-input-490:1306:1261:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_solid-ff-coal"
        },
        "string-input-490:1306:1239:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1239:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_solid-ff.*"
        },
        "column-filter-490:1724:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "ind_prod_checked_fbt[kt]",
                    "ind_prod_checked_tra-equip[kt]",
                    "ind_prod_checked_textiles[kt]",
                    "ind_prod_checked_mae[kt]",
                    "ind_prod_checked_wwp[kt]",
                    "ind_prod_checked_ois[kt]",
                    "ind_prod_checked_aluminium[kt]",
                    "ind_prod_checked_cement[kt]",
                    "ind_prod_checked_chem[kt]",
                    "ind_prod_checked_copper[kt]",
                    "ind_prod_checked_glass[kt]",
                    "ind_prod_checked_lime[kt]",
                    "ind_prod_checked_paper[kt]",
                    "ind_prod_checked_steel[kt]",
                    "ind_prod_checked_timber[kt]"
                ]
            }
        },
        "boolean-input-490:1306:1213:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1613:357":{
            "type":"string",
            "default":"ind_energy_feedstock_.*_.*_(gas.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_feedstock_.*_.*_(gas.*)\\[.*"
        },
        "string-input-490:1702:354":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"t"
        },
        "column-filter-490:1306:1308:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1306:1239:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1702:349":{
            "type":"string",
            "default":"material",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"material"
        },
        "string-input-490:1696:1667:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_synfuel\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_synfuel\\[.*]"
        },
        "string-input-490:1696:1667:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "single-selection-490:1306:1258:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1696:1667:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "single-selection-490:1306:1243:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1658:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1313:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1226:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1649:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_electricity\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_electricity\\[.*]"
        },
        "boolean-input-875:931:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-875:1649:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "single-selection-875:1649:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "column-filter-490:1648:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_aluminium_prim_electricity_added[TWh]",
                    "ind_energy_aluminium_sec_electricity_added[TWh]",
                    "ind_energy_cement_dry-kiln_electricity_added[TWh]",
                    "ind_energy_cement_geopolym_electricity_added[TWh]",
                    "ind_energy_cement_wet-kiln_electricity_added[TWh]",
                    "ind_energy_chem_chem-tech_electricity_added[TWh]",
                    "ind_energy_copper_tech_electricity_added[TWh]",
                    "ind_energy_fbt_tech_electricity_added[TWh]",
                    "ind_energy_glass_glass_electricity_added[TWh]",
                    "ind_energy_lime_lime_electricity_added[TWh]",
                    "ind_energy_mae_tech_electricity_added[TWh]",
                    "ind_energy_ois_tech_electricity_added[TWh]",
                    "ind_energy_paper_recycled_electricity_added[TWh]",
                    "ind_energy_paper_woodpulp_electricity_added[TWh]",
                    "ind_energy_steel_BF-BOF_electricity_added[TWh]",
                    "ind_energy_steel_hisarna_electricity_added[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity_added[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity_added[TWh]",
                    "ind_energy_textiles_tech_electricity_added[TWh]",
                    "ind_energy_tra-equip_tech_electricity_added[TWh]",
                    "ind_energy_wwp_tech_electricity_added[TWh]"
                ]
            }
        },
        "string-input-875:1649:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "single-selection-490:1707:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1291:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_electricity"
        },
        "string-input-490:932:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "boolean-input-490:1531:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1295:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1249:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1206:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1306:1252:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1656:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1646:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1291:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-875:1691:1686:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_emissions_CO2_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_emissions_CO2_ammonia_amm-tech[Mt]",
                    "ind_CC_ammonia_amm-tech[%]_1minus"
                ]
            }
        },
        "string-input-490:1306:1291:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_electricity.*"
        },
        "boolean-input-490:1306:1267:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1234:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1224:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1277:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1671:349":{
            "type":"string",
            "default":"ind_energy,bio_total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,bio_total"
        },
        "single-selection-490:1511:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1234:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1263:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1220:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_gas-ff.*"
        },
        "single-selection-490:1669:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1721:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"specific_emissions_cement[Mt/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "specific_emissions_cement[Mt/Mt]",
                    "specific_emissions_chem[Mt/Mt]",
                    "specific_emissions_paper[Mt/Mt]",
                    "specific_emissions_steel[Mt/Mt]"
                ]
            }
        },
        "disabled-490:1224:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "string-input-490:1306:1263:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_hydrogen.*"
        },
        "string-input-490:1306:1220:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1486:349":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy-demand"
        },
        "string-input-490:1306:1263:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_hydrogen"
        },
        "single-selection-875:1499:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1220:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_gas-ff-natural"
        },
        "boolean-input-875:1300:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:932:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "string-input-490:1306:1278:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_liquid-bio"
        },
        "string-input-490:932:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "string-input-490:932:445":{
            "type":"string",
            "default":"tra_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"tra_(.*)\\[.*"
        },
        "single-selection-490:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-490:1306:1235:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1278:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1235:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_gas-ff-natural"
        },
        "string-input-490:1486:357":{
            "type":"string",
            "default":"ind_energy_incl-feedstock_.*_.*_(.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_incl-feedstock_.*_.*_(.*)\\[.*"
        },
        "string-input-490:1486:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1280:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1671:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1717:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1209:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_gas-bio.*"
        },
        "string-input-875:1671:357":{
            "type":"string",
            "default":"ind_energy_(.*_.*_solid|.*_.*_liquid|.*_.*_gas).bio\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_(.*_.*_solid|.*_.*_liquid|.*_.*_gas).bio\\[.*\\]"
        },
        "string-input-490:1234:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-490:1306:1322:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1256:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1209:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:934:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-875:1262:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "single-selection-490:1306:1299:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1233:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "string-input-490:1658:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "string-input-490:1306:1322:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_liquid-bio"
        },
        "string-input-875:1233:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:1661:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1292:1150:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1671:349":{
            "type":"string",
            "default":"ind_energy,bio_total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,bio_total"
        },
        "single-selection-490:1613:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:934:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-875:1661:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1671:357":{
            "type":"string",
            "default":"ind_energy_(.*_.*_solid|.*_.*_liquid|.*_.*_gas).bio\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_(.*_.*_solid|.*_.*_liquid|.*_.*_gas).bio\\[.*\\]"
        },
        "string-input-490:1306:1209:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_gas-bio"
        },
        "column-filter-490:1224:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1237:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_solid-waste.*"
        },
        "string-input-490:1671:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1237:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:761:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1656:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1306:1260:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1322:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_liquid-bio.*"
        },
        "column-filter-490:1306:1306:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1262:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-490:1234:446":{
            "type":"string",
            "default":"tec_energy_specific-excl-feedstock_(.*)_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_energy_specific-excl-feedstock_(.*)_(.*)\\[.*]"
        },
        "string-input-875:1262:444":{
            "type":"string",
            "default":"amm_CO2-emissions_process",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_CO2-emissions_process"
        },
        "single-selection-490:1575:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1234:444":{
            "type":"string",
            "default":"ind_energy_excl-feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_excl-feedstock"
        },
        "string-input-875:1262:446":{
            "type":"string",
            "default":"tec_emission-factor-process_CO2_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor-process_CO2_(.*)\\[.*"
        },
        "single-selection-490:1292:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1234:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-875:1233:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-875:1233:1146:444":{
            "type":"string",
            "default":"ind_prod_checked",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod_checked"
        },
        "single-selection-490:1306:1241:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1233:1146:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "single-selection-490:1306:1284:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1262:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "single-selection-490:1306:1313:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1349:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "single-selection-490:1649:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "string-input-875:349":{
            "type":"string",
            "default":"ind_dem_ammonia",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_dem_ammonia"
        },
        "boolean-input-490:1306:1311:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1488:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-875:1658:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "single-selection-875:1170:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1309:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_hydrogen"
        },
        "column-filter-490:1292:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions-CO2[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions-CO2[Mt]",
                    "ind_emissions-CH4[Mt]",
                    "ind_emissions-N2O[Mt]"
                ]
            }
        },
        "single-selection-490:1349:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "column-filter-490:1531:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_new_dhg_pipe_aluminium[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_new_dhg_pipe_aluminium[t]",
                    "ind_dem_new_dhg_pipe_cement[t]",
                    "ind_dem_new_dhg_pipe_chem[t]",
                    "ind_dem_new_dhg_pipe_copper[t]",
                    "ind_dem_new_dhg_pipe_glass[t]",
                    "ind_dem_new_dhg_pipe_lime[t]",
                    "ind_dem_new_dhg_pipe_paper[t]",
                    "ind_dem_new_dhg_pipe_steel[t]",
                    "ind_dem_new_dhg_pipe_timber[t]",
                    "ind_dem_floor-area_new_non-residential_aluminium[t]",
                    "ind_dem_floor-area_new_non-residential_cement[t]",
                    "ind_dem_floor-area_new_non-residential_chem[t]",
                    "ind_dem_floor-area_new_non-residential_copper[t]",
                    "ind_dem_floor-area_new_non-residential_glass[t]",
                    "ind_dem_floor-area_new_non-residential_lime[t]",
                    "ind_dem_floor-area_new_non-residential_paper[t]",
                    "ind_dem_floor-area_new_non-residential_steel[t]",
                    "ind_dem_floor-area_new_non-residential_timber[t]",
                    "ind_dem_floor-area_reno_non-residential_aluminium[t]",
                    "ind_dem_floor-area_reno_non-residential_cement[t]",
                    "ind_dem_floor-area_reno_non-residential_chem[t]",
                    "ind_dem_floor-area_reno_non-residential_copper[t]",
                    "ind_dem_floor-area_reno_non-residential_glass[t]",
                    "ind_dem_floor-area_reno_non-residential_lime[t]",
                    "ind_dem_floor-area_reno_non-residential_paper[t]",
                    "ind_dem_floor-area_reno_non-residential_steel[t]",
                    "ind_dem_floor-area_reno_non-residential_timber[t]",
                    "ind_dem_floor-area_new_residential_aluminium[t]",
                    "ind_dem_floor-area_new_residential_cement[t]",
                    "ind_dem_floor-area_new_residential_chem[t]",
                    "ind_dem_floor-area_new_residential_copper[t]",
                    "ind_dem_floor-area_new_residential_glass[t]",
                    "ind_dem_floor-area_new_residential_lime[t]",
                    "ind_dem_floor-area_new_residential_paper[t]",
                    "ind_dem_floor-area_new_residential_steel[t]",
                    "ind_dem_floor-area_new_residential_timber[t]",
                    "ind_dem_floor-area_reno_residential_aluminium[t]",
                    "ind_dem_floor-area_reno_residential_cement[t]",
                    "ind_dem_floor-area_reno_residential_chem[t]",
                    "ind_dem_floor-area_reno_residential_copper[t]",
                    "ind_dem_floor-area_reno_residential_glass[t]",
                    "ind_dem_floor-area_reno_residential_lime[t]",
                    "ind_dem_floor-area_reno_residential_paper[t]",
                    "ind_dem_floor-area_reno_residential_steel[t]",
                    "ind_dem_floor-area_reno_residential_timber[t]",
                    "ind_dem_fridge_aluminium[t]",
                    "ind_dem_fridge_cement[t]",
                    "ind_dem_fridge_chem[t]",
                    "ind_dem_fridge_copper[t]",
                    "ind_dem_fridge_glass[t]",
                    "ind_dem_fridge_lime[t]",
                    "ind_dem_fridge_paper[t]",
                    "ind_dem_fridge_steel[t]",
                    "ind_dem_fridge_timber[t]",
                    "ind_dem_freezer_aluminium[t]",
                    "ind_dem_freezer_cement[t]",
                    "ind_dem_freezer_chem[t]",
                    "ind_dem_freezer_copper[t]",
                    "ind_dem_freezer_glass[t]",
                    "ind_dem_freezer_lime[t]",
                    "ind_dem_freezer_paper[t]",
                    "ind_dem_freezer_steel[t]",
                    "ind_dem_freezer_timber[t]",
                    "ind_dem_wmachine_aluminium[t]",
                    "ind_dem_wmachine_cement[t]",
                    "ind_dem_wmachine_chem[t]",
                    "ind_dem_wmachine_copper[t]",
                    "ind_dem_wmachine_glass[t]",
                    "ind_dem_wmachine_lime[t]",
                    "ind_dem_wmachine_paper[t]",
                    "ind_dem_wmachine_steel[t]",
                    "ind_dem_wmachine_timber[t]",
                    "ind_dem_dishwasher_aluminium[t]",
                    "ind_dem_dishwasher_cement[t]",
                    "ind_dem_dishwasher_chem[t]",
                    "ind_dem_dishwasher_copper[t]",
                    "ind_dem_dishwasher_glass[t]",
                    "ind_dem_dishwasher_lime[t]",
                    "ind_dem_dishwasher_paper[t]",
                    "ind_dem_dishwasher_steel[t]",
                    "ind_dem_dishwasher_timber[t]",
                    "ind_dem_dryer_aluminium[t]",
                    "ind_dem_dryer_cement[t]",
                    "ind_dem_dryer_chem[t]",
                    "ind_dem_dryer_copper[t]",
                    "ind_dem_dryer_glass[t]",
                    "ind_dem_dryer_lime[t]",
                    "ind_dem_dryer_paper[t]",
                    "ind_dem_dryer_steel[t]",
                    "ind_dem_dryer_timber[t]",
                    "ind_dem_tv_aluminium[t]",
                    "ind_dem_tv_cement[t]",
                    "ind_dem_tv_chem[t]",
                    "ind_dem_tv_copper[t]",
                    "ind_dem_tv_glass[t]",
                    "ind_dem_tv_lime[t]",
                    "ind_dem_tv_paper[t]",
                    "ind_dem_tv_steel[t]",
                    "ind_dem_tv_timber[t]",
                    "ind_dem_computer_aluminium[t]",
                    "ind_dem_computer_cement[t]",
                    "ind_dem_computer_chem[t]",
                    "ind_dem_computer_copper[t]",
                    "ind_dem_computer_glass[t]",
                    "ind_dem_computer_lime[t]",
                    "ind_dem_computer_paper[t]",
                    "ind_dem_computer_steel[t]",
                    "ind_dem_computer_timber[t]",
                    "ind_dem_phone_aluminium[t]",
                    "ind_dem_phone_cement[t]",
                    "ind_dem_phone_chem[t]",
                    "ind_dem_phone_copper[t]",
                    "ind_dem_phone_glass[t]",
                    "ind_dem_phone_lime[t]",
                    "ind_dem_phone_paper[t]",
                    "ind_dem_phone_steel[t]",
                    "ind_dem_phone_timber[t]",
                    "ind_dem_cars-EV_aluminium[t]",
                    "ind_dem_cars-EV_cement[t]",
                    "ind_dem_cars-EV_chem[t]",
                    "ind_dem_cars-EV_copper[t]",
                    "ind_dem_cars-EV_glass[t]",
                    "ind_dem_cars-EV_lime[t]",
                    "ind_dem_cars-EV_paper[t]",
                    "ind_dem_cars-EV_steel[t]",
                    "ind_dem_cars-EV_timber[t]",
                    "ind_dem_cars-FCV_aluminium[t]",
                    "ind_dem_cars-FCV_cement[t]",
                    "ind_dem_cars-FCV_chem[t]",
                    "ind_dem_cars-FCV_copper[t]",
                    "ind_dem_cars-FCV_glass[t]",
                    "ind_dem_cars-FCV_lime[t]",
                    "ind_dem_cars-FCV_paper[t]",
                    "ind_dem_cars-FCV_steel[t]",
                    "ind_dem_cars-FCV_timber[t]",
                    "ind_dem_cars-ICE_aluminium[t]",
                    "ind_dem_cars-ICE_cement[t]",
                    "ind_dem_cars-ICE_chem[t]",
                    "ind_dem_cars-ICE_copper[t]",
                    "ind_dem_cars-ICE_glass[t]",
                    "ind_dem_cars-ICE_lime[t]",
                    "ind_dem_cars-ICE_paper[t]",
                    "ind_dem_cars-ICE_steel[t]",
                    "ind_dem_cars-ICE_timber[t]",
                    "ind_dem_trucks-ICE_aluminium[t]",
                    "ind_dem_trucks-ICE_cement[t]",
                    "ind_dem_trucks-ICE_chem[t]",
                    "ind_dem_trucks-ICE_copper[t]",
                    "ind_dem_trucks-ICE_glass[t]",
                    "ind_dem_trucks-ICE_lime[t]",
                    "ind_dem_trucks-ICE_paper[t]",
                    "ind_dem_trucks-ICE_steel[t]",
                    "ind_dem_trucks-ICE_timber[t]",
                    "ind_dem_trucks-FCV_aluminium[t]",
                    "ind_dem_trucks-FCV_cement[t]",
                    "ind_dem_trucks-FCV_chem[t]",
                    "ind_dem_trucks-FCV_copper[t]",
                    "ind_dem_trucks-FCV_glass[t]",
                    "ind_dem_trucks-FCV_lime[t]",
                    "ind_dem_trucks-FCV_paper[t]",
                    "ind_dem_trucks-FCV_steel[t]",
                    "ind_dem_trucks-FCV_timber[t]",
                    "ind_dem_trucks-EV_aluminium[t]",
                    "ind_dem_trucks-EV_cement[t]",
                    "ind_dem_trucks-EV_chem[t]",
                    "ind_dem_trucks-EV_copper[t]",
                    "ind_dem_trucks-EV_glass[t]",
                    "ind_dem_trucks-EV_lime[t]",
                    "ind_dem_trucks-EV_paper[t]",
                    "ind_dem_trucks-EV_steel[t]",
                    "ind_dem_trucks-EV_timber[t]",
                    "ind_dem_ships_aluminium[t]",
                    "ind_dem_ships_cement[t]",
                    "ind_dem_ships_chem[t]",
                    "ind_dem_ships_copper[t]",
                    "ind_dem_ships_glass[t]",
                    "ind_dem_ships_lime[t]",
                    "ind_dem_ships_paper[t]",
                    "ind_dem_ships_steel[t]",
                    "ind_dem_ships_timber[t]",
                    "ind_dem_trains_aluminium[t]",
                    "ind_dem_trains_cement[t]",
                    "ind_dem_trains_chem[t]",
                    "ind_dem_trains_copper[t]",
                    "ind_dem_trains_glass[t]",
                    "ind_dem_trains_lime[t]",
                    "ind_dem_trains_paper[t]",
                    "ind_dem_trains_steel[t]",
                    "ind_dem_trains_timber[t]",
                    "ind_dem_planes_aluminium[t]",
                    "ind_dem_planes_cement[t]",
                    "ind_dem_planes_chem[t]",
                    "ind_dem_planes_copper[t]",
                    "ind_dem_planes_glass[t]",
                    "ind_dem_planes_lime[t]",
                    "ind_dem_planes_paper[t]",
                    "ind_dem_planes_steel[t]",
                    "ind_dem_planes_timber[t]",
                    "ind_dem_road_aluminium[t]",
                    "ind_dem_road_cement[t]",
                    "ind_dem_road_chem[t]",
                    "ind_dem_road_copper[t]",
                    "ind_dem_road_glass[t]",
                    "ind_dem_road_lime[t]",
                    "ind_dem_road_paper[t]",
                    "ind_dem_road_steel[t]",
                    "ind_dem_road_timber[t]",
                    "ind_dem_rail_aluminium[t]",
                    "ind_dem_rail_cement[t]",
                    "ind_dem_rail_chem[t]",
                    "ind_dem_rail_copper[t]",
                    "ind_dem_rail_glass[t]",
                    "ind_dem_rail_lime[t]",
                    "ind_dem_rail_paper[t]",
                    "ind_dem_rail_steel[t]",
                    "ind_dem_rail_timber[t]",
                    "ind_dem_trolley-cables_aluminium[t]",
                    "ind_dem_trolley-cables_cement[t]",
                    "ind_dem_trolley-cables_chem[t]",
                    "ind_dem_trolley-cables_copper[t]",
                    "ind_dem_trolley-cables_glass[t]",
                    "ind_dem_trolley-cables_lime[t]",
                    "ind_dem_trolley-cables_paper[t]",
                    "ind_dem_trolley-cables_steel[t]",
                    "ind_dem_trolley-cables_timber[t]",
                    "ind_dem_paper-san_aluminium[t]",
                    "ind_dem_paper-san_cement[t]",
                    "ind_dem_paper-san_chem[t]",
                    "ind_dem_paper-san_copper[t]",
                    "ind_dem_paper-san_glass[t]",
                    "ind_dem_paper-san_lime[t]",
                    "ind_dem_paper-san_paper[t]",
                    "ind_dem_paper-san_steel[t]",
                    "ind_dem_paper-san_timber[t]",
                    "ind_dem_paper-print_aluminium[t]",
                    "ind_dem_paper-print_cement[t]",
                    "ind_dem_paper-print_chem[t]",
                    "ind_dem_paper-print_copper[t]",
                    "ind_dem_paper-print_glass[t]",
                    "ind_dem_paper-print_lime[t]",
                    "ind_dem_paper-print_paper[t]",
                    "ind_dem_paper-print_steel[t]",
                    "ind_dem_paper-print_timber[t]",
                    "ind_dem_plast-pack_aluminium[t]",
                    "ind_dem_plast-pack_cement[t]",
                    "ind_dem_plast-pack_chem[t]",
                    "ind_dem_plast-pack_copper[t]",
                    "ind_dem_plast-pack_glass[t]",
                    "ind_dem_plast-pack_lime[t]",
                    "ind_dem_plast-pack_paper[t]",
                    "ind_dem_plast-pack_steel[t]",
                    "ind_dem_plast-pack_timber[t]",
                    "ind_dem_paper-pack_aluminium[t]",
                    "ind_dem_paper-pack_cement[t]",
                    "ind_dem_paper-pack_chem[t]",
                    "ind_dem_paper-pack_copper[t]",
                    "ind_dem_paper-pack_glass[t]",
                    "ind_dem_paper-pack_lime[t]",
                    "ind_dem_paper-pack_paper[t]",
                    "ind_dem_paper-pack_steel[t]",
                    "ind_dem_paper-pack_timber[t]",
                    "ind_dem_glass-pack_aluminium[t]",
                    "ind_dem_glass-pack_ammonia[t]",
                    "ind_dem_glass-pack_cement[t]",
                    "ind_dem_glass-pack_chem[t]",
                    "ind_dem_glass-pack_copper[t]",
                    "ind_dem_glass-pack_glass[t]",
                    "ind_dem_glass-pack_lime[t]",
                    "ind_dem_glass-pack_other[t]",
                    "ind_dem_glass-pack_paper[t]",
                    "ind_dem_glass-pack_steel[t]",
                    "ind_dem_glass-pack_timber[t]",
                    "ind_dem_floor-area_reno_residential_natfibers[t]",
                    "ind_dem_floor-area_reno_non-residential_natfibers[t]"
                ]
            }
        },
        "single-selection-490:1707:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1228:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1262:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-490:1658:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1262:446":{
            "type":"string",
            "default":"tec_emission-factor-process_CO2_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor-process_CO2_(.*)\\[.*"
        },
        "string-input-490:1262:444":{
            "type":"string",
            "default":"ind_CO2-emissions_process",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CO2-emissions_process"
        },
        "string-input-875:354":{
            "type":"string",
            "default":"kt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"kt"
        },
        "string-input-875:1658:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:357":{
            "type":"string",
            "default":"ind_.*ammonia\\[t]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_.*ammonia\\[t]"
        },
        "string-input-875:1658:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_gas-ff-natural).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_gas-ff-natural).*\\[.*\\]"
        },
        "single-selection-490:1306:1213:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1658:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_gas-ff-natural).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_gas-ff-natural).*\\[.*\\]"
        },
        "string-input-490:1306:1309:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1309:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_hydrogen.*"
        },
        "single-selection-490:1292:1151:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "string-input-875:751:445":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "string-input-490:1642:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-875:751:444":{
            "type":"string",
            "default":"ind_dem",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_dem"
        },
        "boolean-input-490:1306:1315:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1281:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_solid-waste"
        },
        "column-filter-490:1262:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor-process_CO2_copper_tech[Mt/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor-process_CO2_copper_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_ois_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_wwp_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_mae_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_textiles_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_fbt_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_tra-equip_tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_lime_lime[Mt/Mt]",
                    "tec_emission-factor-process_CO2_glass_glass[Mt/Mt]",
                    "tec_emission-factor-process_CO2_aluminium_sec[Mt/Mt]",
                    "tec_emission-factor-process_CO2_aluminium_prim[Mt/Mt]",
                    "tec_emission-factor-process_CO2_paper_recycled[Mt/Mt]",
                    "tec_emission-factor-process_CO2_paper_woodpulp[Mt/Mt]",
                    "tec_emission-factor-process_CO2_chem_chem-tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_ammonia_amm-tech[Mt/Mt]",
                    "tec_emission-factor-process_CO2_cement_geopolym[Mt/Mt]",
                    "tec_emission-factor-process_CO2_cement_wet-kiln[Mt/Mt]",
                    "tec_emission-factor-process_CO2_cement_dry-kiln[Mt/Mt]",
                    "tec_emission-factor-process_CO2_steel_hydrog-DRI[Mt/Mt]",
                    "tec_emission-factor-process_CO2_steel_hisarna[Mt/Mt]",
                    "tec_emission-factor-process_CO2_steel_scrap-EAF[Mt/Mt]",
                    "tec_emission-factor-process_CO2_steel_BF-BOF[Mt/Mt]"
                ]
            }
        },
        "single-selection-490:1559:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:751:446":{
            "type":"string",
            "default":"tec_(.*)_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_(.*)_(.*)\\[.*"
        },
        "boolean-input-490:1306:1218:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1211:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_gas-ff.*"
        },
        "string-input-490:1714:444":{
            "type":"string",
            "default":"specific_emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"specific_emissions"
        },
        "column-filter-490:1418:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_aluminium[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_aluminium[t]",
                    "ind_dem_ammonia[t]",
                    "ind_dem_cement[t]",
                    "ind_dem_chem[t]",
                    "ind_dem_copper[t]",
                    "ind_dem_glass[t]",
                    "ind_dem_lime[t]",
                    "ind_dem_natfibers[t]",
                    "ind_dem_other[t]",
                    "ind_dem_paper[t]",
                    "ind_dem_steel[t]",
                    "ind_dem_timber[t]"
                ]
            }
        },
        "single-selection-875:1301:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1306:1305:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1714:446":{
            "type":"string",
            "default":"ind_emissions_.*_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_emissions_.*_(.*)\\[.*"
        },
        "string-input-490:1714:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "column-filter-490:1224:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1306:1297:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1208:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1707:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "column-filter-490:1306:1294:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-875:1365:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_ammonia[kt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_ammonia[kt]"
                ]
            }
        },
        "column-filter-875:1494:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_emissions_CO2_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_emissions_CO2_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "string-input-875:1656:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1211:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_gas-ff-natural"
        },
        "single-selection-875:931:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1211:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1304:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:751:460":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"t"
        },
        "column-filter-490:1656:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_steel_BF-BOF_solid-to-gas[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_steel_BF-BOF_solid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_BF-BOF_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_solid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_hisarna_solid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_hisarna_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_solid-to-gas[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_aluminium_prim_solid-to-gas[%]",
                    "ind_energy-carrier-mix_aluminium_prim_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_aluminium_sec_solid-to-gas[%]",
                    "ind_energy-carrier-mix_aluminium_sec_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_solid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_solid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_geopolym_solid-to-gas[%]",
                    "ind_energy-carrier-mix_cement_geopolym_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_lime_lime_solid-to-gas[%]",
                    "ind_energy-carrier-mix_lime_lime_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_glass_glass_solid-to-gas[%]",
                    "ind_energy-carrier-mix_glass_glass_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_solid-to-gas[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_paper_recycled_solid-to-gas[%]",
                    "ind_energy-carrier-mix_paper_recycled_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_ois_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_ois_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_wwp_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_wwp_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_mae_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_mae_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_copper_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_copper_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_textiles_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_textiles_tech_liquid-to-gas[%]",
                    "ind_energy-carrier-mix_fbt_tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_fbt_tech_liquid-to-gas[%]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]"
                ]
            }
        },
        "column-filter-490:1575:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_liquid-ff-oil[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_liquid-ff-oil[TWh]",
                    "ind_liquid-ff-oil_diesel[%]",
                    "ind_liquid-ff-oil_fuel-oil[%]"
                ]
            }
        },
        "single-selection-490:1559:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "column-filter-490:1306:1321:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1216:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1707:446":{
            "type":"string",
            "default":"specific_energy_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"specific_energy_(.*)\\[.*"
        },
        "column-filter-490:1306:1240:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1707:445":{
            "type":"string",
            "default":"material_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"material_(.*)\\[.*"
        },
        "single-selection-490:1270:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1707:444":{
            "type":"string",
            "default":"energy_demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"energy_demand"
        },
        "boolean-input-490:1706:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1714:460":{
            "type":"string",
            "default":"Mt/Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt/Mt"
        },
        "string-input-490:1306:1265:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_solid-waste"
        },
        "boolean-input-875:1647:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1265:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_solid-waste.*"
        },
        "string-input-875:1656:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*_liquid|.*_.*_solid)-to-gas.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*_liquid|.*_.*_solid)-to-gas.*"
        },
        "string-input-490:1306:1265:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1656:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*_liquid|.*_.*_solid)-(ff.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*_liquid|.*_.*_solid)-(ff.*)\\[.*\\]"
        },
        "single-selection-490:1672:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1656:444":{
            "type":"string",
            "default":"ind_energy,gas-ff-natural",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,gas-ff-natural"
        },
        "column-filter-490:1545:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_opex_aluminium_prim[MEUR]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_opex_aluminium_prim[MEUR]",
                    "ind_opex_aluminium_sec[MEUR]",
                    "ind_opex_cement_dry-kiln[MEUR]",
                    "ind_opex_cement_geopolym[MEUR]",
                    "ind_opex_cement_wet-kiln[MEUR]",
                    "ind_opex_chem_chem-tech[MEUR]",
                    "ind_opex_glass_glass[MEUR]",
                    "ind_opex_lime_lime[MEUR]",
                    "ind_opex_paper_recycled[MEUR]",
                    "ind_opex_paper_woodpulp[MEUR]",
                    "ind_opex_steel_BF-BOF[MEUR]",
                    "ind_opex_steel_hisarna[MEUR]",
                    "ind_opex_steel_scrap-EAF[MEUR]",
                    "ind_opex_CC_cement_dry-kiln[MEUR]",
                    "ind_opex_CC_cement_geopolym[MEUR]",
                    "ind_opex_CC_cement_wet-kiln[MEUR]",
                    "ind_opex_CC_chem_chem-tech[MEUR]",
                    "ind_opex_CC_paper_woodpulp[MEUR]",
                    "ind_opex_CC_steel_BF-BOF[MEUR]",
                    "ind_opex_CC_steel_hisarna[MEUR]",
                    "ind_opex_CC_steel_scrap-EAF[MEUR]"
                ]
            }
        },
        "boolean-input-490:1306:1250:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1308:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1270:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1288:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1262:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1309:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1289:1151:446":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-demand_(.*)\\[.*\\]"
        },
        "string-input-490:1289:1151:445":{
            "type":"string",
            "default":"cal_ind_energy_(.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_energy_(.*)\\[.*\\]"
        },
        "string-input-490:1289:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "boolean-input-490:1306:1227:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1224:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1306:1324:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1672:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "boolean-input-875:1691:1684:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1672:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)_bio\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*_.*)_bio\\[.*\\]"
        },
        "string-input-875:1672:446":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_(.*_.*_.*)\\[.*\\]"
        },
        "single-selection-875:1654:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1290:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_solid-ff-coal"
        },
        "column-filter-875:931:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1181:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1256:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_liquid-bio"
        },
        "column-filter-875:1499:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_energy_specific-excl-feedstock_ammonia_amm-tech_hydrogen[TWh/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-excl-feedstock_ammonia_amm-tech_electricity[TWh/Mt]"
                ]
            }
        },
        "single-selection-490:1306:1279:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1231:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1290:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_solid-ff.*"
        },
        "string-input-490:1306:1290:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1241:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1263:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1256:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1233:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1272:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1272:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_hydrogen.*"
        },
        "string-input-490:1306:1202:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_gas-ff-natural"
        },
        "string-input-490:1306:1256:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_liquid-bio.*"
        },
        "column-filter-490:1306:1314:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1309:446":{
            "type":"string",
            "default":"amm_CO2-emissions-after-CC_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"amm_CO2-emissions-after-CC_(.*)\\[.*"
        },
        "string-input-875:1649:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:1306:1286:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1499:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-875:1309:444":{
            "type":"string",
            "default":"amm_CO2-emissions-CC",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_CO2-emissions-CC"
        },
        "string-input-875:1309:445":{
            "type":"string",
            "default":"amm_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"amm_emissions_CO2_(.*)\\[.*"
        },
        "single-selection-875:1670:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1289:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-875:1262:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-875:1647:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1249:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_solid-waste.*"
        },
        "column-filter-490:1306:1224:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1202:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-875:1233:1150:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1322:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1656:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-875:1672:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1249:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1234:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1690:1664:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1283:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1541:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-490:1306:1202:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_gas-ff.*"
        },
        "string-input-490:1306:1283:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_solid-bio.*"
        },
        "string-input-490:1306:1272:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_hydrogen"
        },
        "string-input-490:1512:349":{
            "type":"string",
            "default":"ind_material-demand_construction",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_material-demand_construction"
        },
        "column-filter-490:1306:1303:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1232:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1181:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_energy-demand_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_energy-demand_electricity[TWh]",
                    "amm_energy-demand_hydrogen[TWh]",
                    "amm_energy-demand_solid-waste[TWh]",
                    "amm_energy-demand_gas-bio[TWh]",
                    "amm_energy-demand_liquid-bio[TWh]",
                    "amm_energy-demand_solid-bio[TWh]",
                    "amm_energy-demand_gas-ff-natural[TWh]",
                    "amm_energy-demand_liquid-ff-oil[TWh]",
                    "amm_energy-demand_solid-ff-coal[TWh]"
                ]
            }
        },
        "string-input-490:1289:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "boolean-input-875:1492:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:932:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-875:1690:1664:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-875:1170:446":{
            "type":"string",
            "default":"ind_technology-share_(.*)_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_technology-share_(.*)_(.*)\\[.*"
        },
        "string-input-490:1306:1249:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_solid-waste"
        },
        "single-selection-490:1306:1311:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1170:445":{
            "type":"string",
            "default":"ind_prod_checked_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_checked_(.*)\\[.*"
        },
        "column-filter-490:1306:1278:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1209:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1170:444":{
            "type":"string",
            "default":"ind_material-production",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_material-production"
        },
        "boolean-input-490:1306:1317:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:932:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:926:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1306:1236:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1267:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_liquid-ff-oil"
        },
        "boolean-input-490:1306:1279:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1512:354":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"t"
        },
        "string-input-490:1306:1267:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1512:357":{
            "type":"string",
            "default":"ind_dem_.*_(.*)\\[t\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_dem_.*_(.*)\\[t\\]"
        },
        "column-filter-875:1658:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_added[TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1299:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1170:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-875:1690:1667:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1646:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1267:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_liquid-ff.*"
        },
        "string-input-490:1494:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1494:357":{
            "type":"string",
            "default":"ind_emissions_CO2_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_emissions_CO2_.*_.*\\[.*]"
        },
        "single-selection-490:1619:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1289:1146:446":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy-demand_(.*)\\[.*\\]"
        },
        "string-input-490:1289:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-490:1289:1146:444":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy-demand"
        },
        "single-selection-875:1691:1684:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1659:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "column-filter-490:1306:1323:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1293:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1268:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1491:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CO2-emissions_electricity_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CO2-emissions_electricity_aluminium_prim[Mt]",
                    "ind_CO2-emissions_electricity_aluminium_sec[Mt]",
                    "ind_CO2-emissions_electricity_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_electricity_cement_geopolym[Mt]",
                    "ind_CO2-emissions_electricity_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_electricity_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_electricity_copper_tech[Mt]",
                    "ind_CO2-emissions_electricity_fbt_tech[Mt]",
                    "ind_CO2-emissions_electricity_glass_glass[Mt]",
                    "ind_CO2-emissions_electricity_lime_lime[Mt]",
                    "ind_CO2-emissions_electricity_mae_tech[Mt]",
                    "ind_CO2-emissions_electricity_ois_tech[Mt]",
                    "ind_CO2-emissions_electricity_paper_recycled[Mt]",
                    "ind_CO2-emissions_electricity_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_electricity_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_electricity_steel_hisarna[Mt]",
                    "ind_CO2-emissions_electricity_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_electricity_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_electricity_textiles_tech[Mt]",
                    "ind_CO2-emissions_electricity_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_electricity_wwp_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_aluminium_prim[Mt]",
                    "ind_CO2-emissions_hydrogen_aluminium_sec[Mt]",
                    "ind_CO2-emissions_hydrogen_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_hydrogen_cement_geopolym[Mt]",
                    "ind_CO2-emissions_hydrogen_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_hydrogen_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_hydrogen_copper_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_fbt_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_glass_glass[Mt]",
                    "ind_CO2-emissions_hydrogen_lime_lime[Mt]",
                    "ind_CO2-emissions_hydrogen_mae_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_ois_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_paper_recycled[Mt]",
                    "ind_CO2-emissions_hydrogen_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_hydrogen_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_hydrogen_steel_hisarna[Mt]",
                    "ind_CO2-emissions_hydrogen_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_hydrogen_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_hydrogen_textiles_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_hydrogen_wwp_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_fbt_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_textiles_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_mae_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_wwp_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_ois_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_aluminium_prim[Mt]",
                    "ind_CO2-emissions_solid-waste_aluminium_sec[Mt]",
                    "ind_CO2-emissions_solid-waste_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_solid-waste_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_solid-waste_cement_geopolym[Mt]",
                    "ind_CO2-emissions_solid-waste_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_solid-waste_copper_tech[Mt]",
                    "ind_CO2-emissions_solid-waste_glass_glass[Mt]",
                    "ind_CO2-emissions_solid-waste_lime_lime[Mt]",
                    "ind_CO2-emissions_solid-waste_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_solid-waste_paper_recycled[Mt]",
                    "ind_CO2-emissions_solid-waste_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_solid-waste_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_solid-waste_steel_hisarna[Mt]",
                    "ind_CO2-emissions_solid-waste_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_gas-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_liquid-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_solid-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_gas-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_liquid-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_solid-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_gas-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_solid-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_gas-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_liquid-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_solid-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_gas-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_liquid-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_solid-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_gas-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_liquid-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_solid-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_gas-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_liquid-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_solid-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_gas-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_wwp_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_wwp_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_wwp_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_aluminium_prim[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_aluminium_sec[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_cement_geopolym[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_copper_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_fbt_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_glass_glass[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_lime_lime[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_mae_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_ois_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_paper_recycled[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_steel_hisarna[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_textiles_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_gas-ff-natural_wwp_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_fbt_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_textiles_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_mae_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_wwp_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_ois_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_aluminium_prim[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_aluminium_sec[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_cement_geopolym[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_copper_tech[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_glass_glass[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_lime_lime[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_paper_recycled[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_steel_hisarna[Mt]",
                    "ind_CO2-emissions_liquid-ff-oil_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_fbt_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_textiles_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_mae_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_wwp_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_ois_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_aluminium_prim[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_aluminium_sec[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_cement_geopolym[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_copper_tech[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_glass_glass[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_lime_lime[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_paper_recycled[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_steel_hisarna[Mt]",
                    "ind_CO2-emissions_solid-ff-coal_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_process_fbt_tech[Mt]",
                    "ind_CO2-emissions_process_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_process_textiles_tech[Mt]",
                    "ind_CO2-emissions_process_mae_tech[Mt]",
                    "ind_CO2-emissions_process_wwp_tech[Mt]",
                    "ind_CO2-emissions_process_ois_tech[Mt]",
                    "ind_CO2-emissions_process_aluminium_prim[Mt]",
                    "ind_CO2-emissions_process_aluminium_sec[Mt]",
                    "ind_CO2-emissions_process_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_process_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_process_cement_geopolym[Mt]",
                    "ind_CO2-emissions_process_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_process_copper_tech[Mt]",
                    "ind_CO2-emissions_process_glass_glass[Mt]",
                    "ind_CO2-emissions_process_lime_lime[Mt]",
                    "ind_CO2-emissions_process_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_process_paper_recycled[Mt]",
                    "ind_CO2-emissions_process_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_process_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_process_steel_hisarna[Mt]",
                    "ind_CO2-emissions_process_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "string-input-490:1306:1310:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_gas-bio.*"
        },
        "single-selection-490:1306:1250:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1225:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1285:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1242:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1300:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1292:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1224:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1654:446":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_([^_]*_[^_]*_.*)\\[.*\\]"
        },
        "string-input-875:1654:445":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_.*)_hydrogen\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_([^_]*_[^_]*_.*)_hydrogen\\[.*]"
        },
        "column-filter-490:1709:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"material_cement[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "material_cement[t]",
                    "material_chem[t]",
                    "material_natfibers[t]",
                    "material_paper[t]",
                    "material_steel[t]",
                    "material_timber[t]"
                ]
            }
        },
        "string-input-875:1654:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "boolean-input-875:1484:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-875:1492:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1494:349":{
            "type":"string",
            "default":"ind_emissions-CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_emissions-CO2"
        },
        "string-input-875:1654:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "boolean-input-490:1306:1216:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1654:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_fbt_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_gas-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_gas-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_gas-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_gas-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_gas-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_fbt_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_liquid-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_liquid-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-bio_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-bio_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-bio_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-bio_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-bio_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_textiles_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_mae_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_wwp_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_ois_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_solid-waste_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_solid-waste_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_copper_tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_glass_glass_solid-waste_hydrogen[TWh]",
                    "ind_energy_lime_lime_solid-waste_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste_hydrogen[TWh]",
                    "ind_energy_paper_recycled_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_solid-waste_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_hydrogen_total[TWh]",
                    "ind_energy_aluminium_sec_hydrogen_total[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen_total[TWh]",
                    "ind_energy_cement_geopolym_hydrogen_total[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen_total[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen_total[TWh]",
                    "ind_energy_copper_tech_hydrogen_total[TWh]",
                    "ind_energy_fbt_tech_hydrogen_total[TWh]",
                    "ind_energy_glass_glass_hydrogen_total[TWh]",
                    "ind_energy_lime_lime_hydrogen_total[TWh]",
                    "ind_energy_mae_tech_hydrogen_total[TWh]",
                    "ind_energy_ois_tech_hydrogen_total[TWh]",
                    "ind_energy_paper_recycled_hydrogen_total[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen_total[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen_total[TWh]",
                    "ind_energy_steel_hisarna_hydrogen_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen_total[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen_total[TWh]",
                    "ind_energy_textiles_tech_hydrogen_total[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen_total[TWh]",
                    "ind_energy_wwp_tech_hydrogen_total[TWh]"
                ]
            }
        },
        "single-selection-490:1488:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-875:1670:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-490:1306:1217:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1289:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-875:751:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1259:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-490:1306:1243:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1215:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1310:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_gas-bio"
        },
        "single-selection-490:1306:1223:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1286:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1274:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_solid-ff.*"
        },
        "column-filter-875:1670:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_gas-ff-natural_bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_bio[TWh]"
                ]
            }
        },
        "string-input-490:1306:1319:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_solid-waste"
        },
        "boolean-input-490:1306:1322:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1295:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1292:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1274:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1302:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1218:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1483:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1274:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_solid-ff-coal"
        },
        "column-filter-490:1306:1287:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1310:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1224:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "single-selection-875:1494:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1496:349":{
            "type":"string",
            "default":"ind_emissions-N2O",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_emissions-N2O"
        },
        "single-selection-875:1690:1667:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "string-input-490:1306:1247:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1301:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1247:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_solid-bio.*"
        },
        "string-input-490:1306:1204:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1204:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_liquid-bio.*"
        },
        "string-input-490:1647:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1545:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1659:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1306:1316:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1496:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "single-selection-875:751:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1647:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_electricity\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_electricity\\[.*\\]"
        },
        "string-input-490:1496:357":{
            "type":"string",
            "default":"ind_emissions_N2O_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_emissions_N2O_.*_.*\\[.*]"
        },
        "column-filter-490:1649:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_fbt_tech_gas-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_gas-bio_electricity[TWh]",
                    "ind_energy_mae_tech_gas-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_gas-bio_electricity[TWh]",
                    "ind_energy_ois_tech_gas-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_gas-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_gas-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_gas-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio_electricity[TWh]",
                    "ind_energy_copper_tech_gas-bio_electricity[TWh]",
                    "ind_energy_glass_glass_gas-bio_electricity[TWh]",
                    "ind_energy_lime_lime_gas-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_gas-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_gas-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_electricity[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_electricity[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_electricity[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_electricity[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_electricity[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_electricity[TWh]",
                    "ind_energy_fbt_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_mae_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_ois_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio_electricity[TWh]",
                    "ind_energy_copper_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_glass_glass_liquid-bio_electricity[TWh]",
                    "ind_energy_lime_lime_liquid-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-bio_electricity[TWh]",
                    "ind_energy_mae_tech_solid-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-bio_electricity[TWh]",
                    "ind_energy_ois_tech_solid-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio_electricity[TWh]",
                    "ind_energy_copper_tech_solid-bio_electricity[TWh]",
                    "ind_energy_glass_glass_solid-bio_electricity[TWh]",
                    "ind_energy_lime_lime_solid-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_electricity[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-waste_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-waste_electricity[TWh]",
                    "ind_energy_mae_tech_solid-waste_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-waste_electricity[TWh]",
                    "ind_energy_ois_tech_solid-waste_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-waste_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-waste_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-waste_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste_electricity[TWh]",
                    "ind_energy_copper_tech_solid-waste_electricity[TWh]",
                    "ind_energy_glass_glass_solid-waste_electricity[TWh]",
                    "ind_energy_lime_lime_solid-waste_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-waste_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-waste_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste_electricity[TWh]",
                    "ind_energy_aluminium_prim_electricity_total[TWh]",
                    "ind_energy_aluminium_sec_electricity_total[TWh]",
                    "ind_energy_cement_dry-kiln_electricity_total[TWh]",
                    "ind_energy_cement_geopolym_electricity_total[TWh]",
                    "ind_energy_cement_wet-kiln_electricity_total[TWh]",
                    "ind_energy_chem_chem-tech_electricity_total[TWh]",
                    "ind_energy_copper_tech_electricity_total[TWh]",
                    "ind_energy_fbt_tech_electricity_total[TWh]",
                    "ind_energy_glass_glass_electricity_total[TWh]",
                    "ind_energy_lime_lime_electricity_total[TWh]",
                    "ind_energy_mae_tech_electricity_total[TWh]",
                    "ind_energy_ois_tech_electricity_total[TWh]",
                    "ind_energy_paper_recycled_electricity_total[TWh]",
                    "ind_energy_paper_woodpulp_electricity_total[TWh]",
                    "ind_energy_steel_BF-BOF_electricity_total[TWh]",
                    "ind_energy_steel_hisarna_electricity_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity_total[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity_total[TWh]",
                    "ind_energy_textiles_tech_electricity_total[TWh]",
                    "ind_energy_tra-equip_tech_electricity_total[TWh]",
                    "ind_energy_wwp_tech_electricity_total[TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1209:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1204:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_liquid-bio"
        },
        "string-input-490:1306:1247:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_solid-bio"
        },
        "single-selection-490:1306:1288:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1305:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1230:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1647:349":{
            "type":"string",
            "default":"ind_energy,electricity_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,electricity_added"
        },
        "boolean-input-490:1641:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1306:1222:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1281:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1687:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "string-input-490:1306:1281:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_solid-waste.*"
        },
        "column-filter-875:1305:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_electricity_ammonia_amm-tech[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_electricity_ammonia_amm-tech[TWh]",
                    "ind_energy_hydrogen_ammonia_amm-tech[TWh]",
                    "ind_energy_solid-waste_ammonia_amm-tech[TWh]",
                    "ind_energy_gas-bio_ammonia_amm-tech[TWh]",
                    "ind_energy_liquid-bio_ammonia_amm-tech[TWh]",
                    "ind_energy_solid-bio_ammonia_amm-tech[TWh]",
                    "ind_energy_gas-ff-natural_ammonia_amm-tech[TWh]",
                    "ind_energy_liquid-ff-oil_ammonia_amm-tech[TWh]",
                    "ind_energy_solid-ff-coal_ammonia_amm-tech[TWh]"
                ]
            }
        },
        "single-selection-875:751:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-490:1306:1324:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1292:1151:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1285:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1269:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_electricity.*"
        },
        "string-input-490:1306:1285:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_liquid-bio.*"
        },
        "string-input-490:1306:1269:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1298:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1483:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1696:1664:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "boolean-input-490:1509:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1285:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_liquid-bio"
        },
        "single-selection-490:1622:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1492:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1492:357":{
            "type":"string",
            "default":"ind_CH4-emissions_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_CH4-emissions_.*_(.*_.*)\\[.*]"
        },
        "boolean-input-490:1306:1319:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1509:349":{
            "type":"string",
            "default":"ind_material-production",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_material-production"
        },
        "string-input-490:1669:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1269:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_electricity"
        },
        "column-filter-490:1289:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1300:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor_CH4_gas-synfuel[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor_CH4_gas-synfuel[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-synfuel[Mt/TWh]",
                    "tec_emission-factor_CH4_hydrogen[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-waste[Mt/TWh]",
                    "tec_emission-factor_CH4_gas-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-bio[Mt/TWh]",
                    "tec_emission-factor_CH4_gas-ff-natural[Mt/TWh]",
                    "tec_emission-factor_CH4_liquid-ff-oil[Mt/TWh]",
                    "tec_emission-factor_CH4_solid-ff-coal[Mt/TWh]",
                    "tec_emission-factor_CH4_electricity[Mt/TWh]"
                ]
            }
        },
        "column-filter-490:1483:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_energy_specific-feedstock_copper_tech_hydrogen[TWh/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_energy_specific-feedstock_copper_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_copper_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_ois_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_wwp_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_mae_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_textiles_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_fbt_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_tra-equip_tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_lime_lime_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_glass_glass_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_sec_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_aluminium_prim_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_recycled_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_paper_woodpulp_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_chem_chem-tech_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_geopolym_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_dry-kiln_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_cement_wet-kiln_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hydrog-DRI_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_hisarna_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_scrap-EAF_electricity[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_hydrogen[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_solid-waste[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_gas-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_liquid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_solid-bio[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_gas-ff-natural[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_liquid-ff-oil[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_solid-ff-coal[TWh/Mt]",
                    "tec_energy_specific-feedstock_steel_BF-BOF_electricity[TWh/Mt]"
                ]
            }
        },
        "column-filter-490:1661:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_steel_BF-BOF_to-hydrogen[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_steel_BF-BOF_to-hydrogen[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_to-hydrogen[%]",
                    "ind_energy-carrier-mix_steel_hisarna_to-hydrogen[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_to-hydrogen[%]",
                    "ind_energy-carrier-mix_aluminium_prim_to-hydrogen[%]",
                    "ind_energy-carrier-mix_aluminium_sec_to-hydrogen[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_to-hydrogen[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_to-hydrogen[%]",
                    "ind_energy-carrier-mix_cement_geopolym_to-hydrogen[%]",
                    "ind_energy-carrier-mix_lime_lime_to-hydrogen[%]",
                    "ind_energy-carrier-mix_glass_glass_to-hydrogen[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_to-hydrogen[%]",
                    "ind_energy-carrier-mix_paper_recycled_to-hydrogen[%]",
                    "ind_energy-carrier-mix_ois_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_wwp_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_mae_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_copper_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_textiles_tech_to-hydrogen[%]",
                    "ind_energy-carrier-mix_fbt_tech_to-hydrogen[%]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]"
                ]
            }
        },
        "string-input-490:1509:357":{
            "type":"string",
            "default":"ind_material-production_(.*)_.*\\[Mt\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_material-production_(.*)_.*\\[Mt\\]"
        },
        "single-selection-490:1509:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1267:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-875:1690:1667:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_synfuel[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-synfuel[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-synfuel[TWh]"
                ]
            }
        },
        "string-input-490:1509:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "column-filter-490:1498:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CO2_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CO2_aluminium_prim[Mt]",
                    "ind_emissions_CO2_aluminium_sec[Mt]",
                    "ind_emissions_CO2_cement_dry-kiln[Mt]",
                    "ind_emissions_CO2_cement_geopolym[Mt]",
                    "ind_emissions_CO2_cement_wet-kiln[Mt]",
                    "ind_emissions_CO2_chem_chem-tech[Mt]",
                    "ind_emissions_CO2_copper_tech[Mt]",
                    "ind_emissions_CO2_fbt_tech[Mt]",
                    "ind_emissions_CO2_glass_glass[Mt]",
                    "ind_emissions_CO2_lime_lime[Mt]",
                    "ind_emissions_CO2_mae_tech[Mt]",
                    "ind_emissions_CO2_ois_tech[Mt]",
                    "ind_emissions_CO2_paper_recycled[Mt]",
                    "ind_emissions_CO2_paper_woodpulp[Mt]",
                    "ind_emissions_CO2_steel_BF-BOF[Mt]",
                    "ind_emissions_CO2_steel_hisarna[Mt]",
                    "ind_emissions_CO2_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CO2_steel_scrap-EAF[Mt]",
                    "ind_emissions_CO2_textiles_tech[Mt]",
                    "ind_emissions_CO2_tra-equip_tech[Mt]",
                    "ind_emissions_CO2_wwp_tech[Mt]",
                    "ind_emissions_CH4_aluminium_prim[Mt]",
                    "ind_emissions_CH4_aluminium_sec[Mt]",
                    "ind_emissions_CH4_cement_dry-kiln[Mt]",
                    "ind_emissions_CH4_cement_geopolym[Mt]",
                    "ind_emissions_CH4_cement_wet-kiln[Mt]",
                    "ind_emissions_CH4_chem_chem-tech[Mt]",
                    "ind_emissions_CH4_copper_tech[Mt]",
                    "ind_emissions_CH4_fbt_tech[Mt]",
                    "ind_emissions_CH4_glass_glass[Mt]",
                    "ind_emissions_CH4_lime_lime[Mt]",
                    "ind_emissions_CH4_mae_tech[Mt]",
                    "ind_emissions_CH4_ois_tech[Mt]",
                    "ind_emissions_CH4_paper_recycled[Mt]",
                    "ind_emissions_CH4_paper_woodpulp[Mt]",
                    "ind_emissions_CH4_steel_BF-BOF[Mt]",
                    "ind_emissions_CH4_steel_hisarna[Mt]",
                    "ind_emissions_CH4_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CH4_steel_scrap-EAF[Mt]",
                    "ind_emissions_CH4_textiles_tech[Mt]",
                    "ind_emissions_CH4_tra-equip_tech[Mt]",
                    "ind_emissions_CH4_wwp_tech[Mt]",
                    "ind_emissions_N2O_aluminium_prim[Mt]",
                    "ind_emissions_N2O_aluminium_sec[Mt]",
                    "ind_emissions_N2O_cement_dry-kiln[Mt]",
                    "ind_emissions_N2O_cement_geopolym[Mt]",
                    "ind_emissions_N2O_cement_wet-kiln[Mt]",
                    "ind_emissions_N2O_chem_chem-tech[Mt]",
                    "ind_emissions_N2O_copper_tech[Mt]",
                    "ind_emissions_N2O_fbt_tech[Mt]",
                    "ind_emissions_N2O_glass_glass[Mt]",
                    "ind_emissions_N2O_lime_lime[Mt]",
                    "ind_emissions_N2O_mae_tech[Mt]",
                    "ind_emissions_N2O_ois_tech[Mt]",
                    "ind_emissions_N2O_paper_recycled[Mt]",
                    "ind_emissions_N2O_paper_woodpulp[Mt]",
                    "ind_emissions_N2O_steel_BF-BOF[Mt]",
                    "ind_emissions_N2O_steel_hisarna[Mt]",
                    "ind_emissions_N2O_steel_hydrog-DRI[Mt]",
                    "ind_emissions_N2O_steel_scrap-EAF[Mt]",
                    "ind_emissions_N2O_textiles_tech[Mt]",
                    "ind_emissions_N2O_tra-equip_tech[Mt]",
                    "ind_emissions_N2O_wwp_tech[Mt]"
                ]
            }
        },
        "column-filter-490:1511:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_cars-EV_aluminium[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_cars-EV_aluminium[t]",
                    "ind_dem_cars-EV_ammonia[t]",
                    "ind_dem_cars-EV_cement[t]",
                    "ind_dem_cars-EV_chem[t]",
                    "ind_dem_cars-EV_copper[t]",
                    "ind_dem_cars-EV_glass[t]",
                    "ind_dem_cars-EV_lime[t]",
                    "ind_dem_cars-EV_other[t]",
                    "ind_dem_cars-EV_paper[t]",
                    "ind_dem_cars-EV_steel[t]",
                    "ind_dem_cars-EV_timber[t]",
                    "ind_dem_cars-FCV_aluminium[t]",
                    "ind_dem_cars-FCV_ammonia[t]",
                    "ind_dem_cars-FCV_cement[t]",
                    "ind_dem_cars-FCV_chem[t]",
                    "ind_dem_cars-FCV_copper[t]",
                    "ind_dem_cars-FCV_glass[t]",
                    "ind_dem_cars-FCV_lime[t]",
                    "ind_dem_cars-FCV_other[t]",
                    "ind_dem_cars-FCV_paper[t]",
                    "ind_dem_cars-FCV_steel[t]",
                    "ind_dem_cars-FCV_timber[t]",
                    "ind_dem_cars-ICE_aluminium[t]",
                    "ind_dem_cars-ICE_ammonia[t]",
                    "ind_dem_cars-ICE_cement[t]",
                    "ind_dem_cars-ICE_chem[t]",
                    "ind_dem_cars-ICE_copper[t]",
                    "ind_dem_cars-ICE_glass[t]",
                    "ind_dem_cars-ICE_lime[t]",
                    "ind_dem_cars-ICE_other[t]",
                    "ind_dem_cars-ICE_paper[t]",
                    "ind_dem_cars-ICE_steel[t]",
                    "ind_dem_cars-ICE_timber[t]",
                    "ind_dem_trucks-ICE_aluminium[t]",
                    "ind_dem_trucks-ICE_ammonia[t]",
                    "ind_dem_trucks-ICE_cement[t]",
                    "ind_dem_trucks-ICE_chem[t]",
                    "ind_dem_trucks-ICE_copper[t]",
                    "ind_dem_trucks-ICE_glass[t]",
                    "ind_dem_trucks-ICE_lime[t]",
                    "ind_dem_trucks-ICE_other[t]",
                    "ind_dem_trucks-ICE_paper[t]",
                    "ind_dem_trucks-ICE_steel[t]",
                    "ind_dem_trucks-ICE_timber[t]",
                    "ind_dem_trucks-FCV_aluminium[t]",
                    "ind_dem_trucks-FCV_ammonia[t]",
                    "ind_dem_trucks-FCV_cement[t]",
                    "ind_dem_trucks-FCV_chem[t]",
                    "ind_dem_trucks-FCV_copper[t]",
                    "ind_dem_trucks-FCV_glass[t]",
                    "ind_dem_trucks-FCV_lime[t]",
                    "ind_dem_trucks-FCV_other[t]",
                    "ind_dem_trucks-FCV_paper[t]",
                    "ind_dem_trucks-FCV_steel[t]",
                    "ind_dem_trucks-FCV_timber[t]",
                    "ind_dem_trucks-EV_aluminium[t]",
                    "ind_dem_trucks-EV_ammonia[t]",
                    "ind_dem_trucks-EV_cement[t]",
                    "ind_dem_trucks-EV_chem[t]",
                    "ind_dem_trucks-EV_copper[t]",
                    "ind_dem_trucks-EV_glass[t]",
                    "ind_dem_trucks-EV_lime[t]",
                    "ind_dem_trucks-EV_other[t]",
                    "ind_dem_trucks-EV_paper[t]",
                    "ind_dem_trucks-EV_steel[t]",
                    "ind_dem_trucks-EV_timber[t]",
                    "ind_dem_ships_aluminium[t]",
                    "ind_dem_ships_ammonia[t]",
                    "ind_dem_ships_cement[t]",
                    "ind_dem_ships_chem[t]",
                    "ind_dem_ships_copper[t]",
                    "ind_dem_ships_glass[t]",
                    "ind_dem_ships_lime[t]",
                    "ind_dem_ships_other[t]",
                    "ind_dem_ships_paper[t]",
                    "ind_dem_ships_steel[t]",
                    "ind_dem_ships_timber[t]",
                    "ind_dem_trains_aluminium[t]",
                    "ind_dem_trains_ammonia[t]",
                    "ind_dem_trains_cement[t]",
                    "ind_dem_trains_chem[t]",
                    "ind_dem_trains_copper[t]",
                    "ind_dem_trains_glass[t]",
                    "ind_dem_trains_lime[t]",
                    "ind_dem_trains_other[t]",
                    "ind_dem_trains_paper[t]",
                    "ind_dem_trains_steel[t]",
                    "ind_dem_trains_timber[t]",
                    "ind_dem_planes_aluminium[t]",
                    "ind_dem_planes_ammonia[t]",
                    "ind_dem_planes_cement[t]",
                    "ind_dem_planes_chem[t]",
                    "ind_dem_planes_copper[t]",
                    "ind_dem_planes_glass[t]",
                    "ind_dem_planes_lime[t]",
                    "ind_dem_planes_other[t]",
                    "ind_dem_planes_paper[t]",
                    "ind_dem_planes_steel[t]",
                    "ind_dem_planes_timber[t]"
                ]
            }
        },
        "single-selection-875:1691:1686:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1484:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-490:1498:446":{
            "type":"string",
            "default":"ind_emissions_(...)_(.*_.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_emissions_(...)_(.*_.*)\\[.*]"
        },
        "string-input-490:1306:1319:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1498:444":{
            "type":"string",
            "default":"ind_emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_emissions"
        },
        "string-input-490:1498:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[.*]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[.*]"
        },
        "string-input-490:1306:1254:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_electricity"
        },
        "boolean-input-490:1306:1320:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1319:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_solid-waste.*"
        },
        "column-filter-490:1306:1251:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1491:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1254:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_electricity.*"
        },
        "column-filter-875:1659:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_total[TWh]"
                ]
            }
        },
        "string-input-490:1306:1254:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1507:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-490:1306:1229:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_gas-ff-natural"
        },
        "string-input-490:1622:357":{
            "type":"string",
            "default":"ind_energy-demand_.*_(liquid.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy-demand_.*_(liquid.*)\\[.*"
        },
        "string-input-490:1306:1303:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1696:1665:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_liquid-ff-oil_synfuel[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_synfuel[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_synfuel[TWh]"
                ]
            }
        },
        "boolean-input-875:751:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-875:1652:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_hydrogen\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_hydrogen\\[.*\\]"
        },
        "string-input-490:1646:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1622:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1303:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_solid-bio.*"
        },
        "column-filter-490:1306:1228:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1312:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_liquid-ff.*"
        },
        "string-input-875:1652:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1308:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1283:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1622:349":{
            "type":"string",
            "default":"ind_bioenergy",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_bioenergy"
        },
        "boolean-input-490:1653:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1291:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1259:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1492:349":{
            "type":"string",
            "default":"ind_emissions_CH4",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_emissions_CH4"
        },
        "single-selection-490:1292:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1229:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_gas-ff.*"
        },
        "string-input-490:1306:1229:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1669:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-biomass.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-biomass.*"
        },
        "string-input-490:1669:444":{
            "type":"string",
            "default":"ind_energy,bio",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,bio"
        },
        "string-input-490:1669:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(liquid-ff-oil|solid-ff-coal|gas-ff-natural)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(liquid-ff-oil|solid-ff-coal|gas-ff-natural)\\[.*\\]"
        },
        "string-input-875:1652:349":{
            "type":"string",
            "default":"ind_energy,hydrogen_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,hydrogen_added"
        },
        "string-input-490:1306:1303:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_solid-bio"
        },
        "column-filter-490:1622:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_steel_liquid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_steel_liquid-bio[TWh]",
                    "ind_energy-demand_cement_liquid-bio[TWh]",
                    "ind_energy-demand_chem_liquid-bio[TWh]",
                    "ind_energy-demand_paper_liquid-bio[TWh]",
                    "ind_energy-demand_aluminium_liquid-bio[TWh]",
                    "ind_energy-demand_glass_liquid-bio[TWh]",
                    "ind_energy-demand_lime_liquid-bio[TWh]",
                    "ind_energy-demand_tra-equip_liquid-bio[TWh]",
                    "ind_energy-demand_fbt_liquid-bio[TWh]",
                    "ind_energy-demand_textiles_liquid-bio[TWh]",
                    "ind_energy-demand_mae_liquid-bio[TWh]",
                    "ind_energy-demand_wwp_liquid-bio[TWh]",
                    "ind_energy-demand_ois_liquid-bio[TWh]",
                    "ind_energy-demand_copper_liquid-bio[TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1245:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1310:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1312:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_liquid-ff-oil"
        },
        "string-input-875:1483:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-490:1498:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "single-selection-490:1484:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1514:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"OPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"OPEX"
            }
        },
        "boolean-input-490:1654:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1306:1221:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CO2-emissions-CC_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CO2-emissions-CC_aluminium_prim[Mt]",
                    "ind_CO2-emissions-CC_aluminium_sec[Mt]",
                    "ind_CO2-emissions-CC_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions-CC_cement_geopolym[Mt]",
                    "ind_CO2-emissions-CC_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions-CC_chem_chem-tech[Mt]",
                    "ind_CO2-emissions-CC_copper_tech[Mt]",
                    "ind_CO2-emissions-CC_fbt_tech[Mt]",
                    "ind_CO2-emissions-CC_glass_glass[Mt]",
                    "ind_CO2-emissions-CC_lime_lime[Mt]",
                    "ind_CO2-emissions-CC_mae_tech[Mt]",
                    "ind_CO2-emissions-CC_ois_tech[Mt]",
                    "ind_CO2-emissions-CC_paper_recycled[Mt]",
                    "ind_CO2-emissions-CC_paper_woodpulp[Mt]",
                    "ind_CO2-emissions-CC_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions-CC_steel_hisarna[Mt]",
                    "ind_CO2-emissions-CC_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions-CC_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions-CC_textiles_tech[Mt]",
                    "ind_CO2-emissions-CC_tra-equip_tech[Mt]",
                    "ind_CO2-emissions-CC_wwp_tech[Mt]"
                ]
            }
        },
        "column-filter-490:1509:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_fbt_tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_fbt_tech[Mt]",
                    "ind_material-production_tra-equip_tech[Mt]",
                    "ind_material-production_textiles_tech[Mt]",
                    "ind_material-production_mae_tech[Mt]",
                    "ind_material-production_wwp_tech[Mt]",
                    "ind_material-production_ois_tech[Mt]",
                    "ind_material-production_aluminium_prim[Mt]",
                    "ind_material-production_aluminium_sec[Mt]",
                    "ind_material-production_cement_dry-kiln[Mt]",
                    "ind_material-production_cement_wet-kiln[Mt]",
                    "ind_material-production_cement_geopolym[Mt]",
                    "ind_material-production_chem_chem-tech[Mt]",
                    "ind_material-production_copper_tech[Mt]",
                    "ind_material-production_glass_glass[Mt]",
                    "ind_material-production_lime_lime[Mt]",
                    "ind_material-production_paper_woodpulp[Mt]",
                    "ind_material-production_paper_recycled[Mt]",
                    "ind_material-production_steel_BF-BOF[Mt]",
                    "ind_material-production_steel_scrap-EAF[Mt]",
                    "ind_material-production_steel_hisarna[Mt]",
                    "ind_material-production_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "boolean-input-490:1306:1261:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1312:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1483:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-490:1306:1236:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1292:1150:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-875:1496:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1492:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"amm_emissions_CH4_electricity_ammonia_amm-tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "amm_emissions_CH4_electricity_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_hydrogen_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_solid-waste_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_gas-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_liquid-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_solid-bio_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_gas-ff-natural_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_liquid-ff-oil_ammonia_amm-tech[Mt]",
                    "amm_emissions_CH4_solid-ff-coal_ammonia_amm-tech[Mt]"
                ]
            }
        },
        "string-input-490:1306:1299:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_liquid-bio"
        },
        "column-filter-490:1493:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_N2O-emissions_electricity_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_N2O-emissions_electricity_aluminium_prim[Mt]",
                    "ind_N2O-emissions_electricity_aluminium_sec[Mt]",
                    "ind_N2O-emissions_electricity_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_electricity_cement_geopolym[Mt]",
                    "ind_N2O-emissions_electricity_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_electricity_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_electricity_copper_tech[Mt]",
                    "ind_N2O-emissions_electricity_fbt_tech[Mt]",
                    "ind_N2O-emissions_electricity_glass_glass[Mt]",
                    "ind_N2O-emissions_electricity_lime_lime[Mt]",
                    "ind_N2O-emissions_electricity_mae_tech[Mt]",
                    "ind_N2O-emissions_electricity_ois_tech[Mt]",
                    "ind_N2O-emissions_electricity_paper_recycled[Mt]",
                    "ind_N2O-emissions_electricity_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_electricity_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_electricity_steel_hisarna[Mt]",
                    "ind_N2O-emissions_electricity_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_electricity_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_electricity_textiles_tech[Mt]",
                    "ind_N2O-emissions_electricity_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_electricity_wwp_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_aluminium_prim[Mt]",
                    "ind_N2O-emissions_hydrogen_aluminium_sec[Mt]",
                    "ind_N2O-emissions_hydrogen_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_hydrogen_cement_geopolym[Mt]",
                    "ind_N2O-emissions_hydrogen_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_hydrogen_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_hydrogen_copper_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_fbt_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_glass_glass[Mt]",
                    "ind_N2O-emissions_hydrogen_lime_lime[Mt]",
                    "ind_N2O-emissions_hydrogen_mae_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_ois_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_paper_recycled[Mt]",
                    "ind_N2O-emissions_hydrogen_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_hydrogen_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_hydrogen_steel_hisarna[Mt]",
                    "ind_N2O-emissions_hydrogen_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_hydrogen_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_hydrogen_textiles_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_hydrogen_wwp_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_fbt_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_textiles_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_mae_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_wwp_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_ois_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_aluminium_prim[Mt]",
                    "ind_N2O-emissions_solid-waste_aluminium_sec[Mt]",
                    "ind_N2O-emissions_solid-waste_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_solid-waste_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_solid-waste_cement_geopolym[Mt]",
                    "ind_N2O-emissions_solid-waste_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_solid-waste_copper_tech[Mt]",
                    "ind_N2O-emissions_solid-waste_glass_glass[Mt]",
                    "ind_N2O-emissions_solid-waste_lime_lime[Mt]",
                    "ind_N2O-emissions_solid-waste_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_solid-waste_paper_recycled[Mt]",
                    "ind_N2O-emissions_solid-waste_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_solid-waste_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_solid-waste_steel_hisarna[Mt]",
                    "ind_N2O-emissions_solid-waste_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_gas-bio_aluminium_prim[Mt]",
                    "ind_N2O-emissions_liquid-bio_aluminium_prim[Mt]",
                    "ind_N2O-emissions_solid-bio_aluminium_prim[Mt]",
                    "ind_N2O-emissions_gas-bio_aluminium_sec[Mt]",
                    "ind_N2O-emissions_liquid-bio_aluminium_sec[Mt]",
                    "ind_N2O-emissions_solid-bio_aluminium_sec[Mt]",
                    "ind_N2O-emissions_gas-bio_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_liquid-bio_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_solid-bio_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_gas-bio_cement_geopolym[Mt]",
                    "ind_N2O-emissions_liquid-bio_cement_geopolym[Mt]",
                    "ind_N2O-emissions_solid-bio_cement_geopolym[Mt]",
                    "ind_N2O-emissions_gas-bio_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_liquid-bio_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_solid-bio_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_gas-bio_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_solid-bio_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_gas-bio_copper_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_copper_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_copper_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_fbt_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_fbt_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_fbt_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_glass_glass[Mt]",
                    "ind_N2O-emissions_liquid-bio_glass_glass[Mt]",
                    "ind_N2O-emissions_solid-bio_glass_glass[Mt]",
                    "ind_N2O-emissions_gas-bio_lime_lime[Mt]",
                    "ind_N2O-emissions_liquid-bio_lime_lime[Mt]",
                    "ind_N2O-emissions_solid-bio_lime_lime[Mt]",
                    "ind_N2O-emissions_gas-bio_mae_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_mae_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_mae_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_ois_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_ois_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_ois_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_paper_recycled[Mt]",
                    "ind_N2O-emissions_liquid-bio_paper_recycled[Mt]",
                    "ind_N2O-emissions_solid-bio_paper_recycled[Mt]",
                    "ind_N2O-emissions_gas-bio_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_liquid-bio_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_solid-bio_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_gas-bio_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_liquid-bio_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_solid-bio_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_gas-bio_steel_hisarna[Mt]",
                    "ind_N2O-emissions_liquid-bio_steel_hisarna[Mt]",
                    "ind_N2O-emissions_solid-bio_steel_hisarna[Mt]",
                    "ind_N2O-emissions_gas-bio_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_liquid-bio_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_solid-bio_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_gas-bio_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_liquid-bio_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_solid-bio_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_gas-bio_textiles_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_textiles_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_textiles_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_gas-bio_wwp_tech[Mt]",
                    "ind_N2O-emissions_liquid-bio_wwp_tech[Mt]",
                    "ind_N2O-emissions_solid-bio_wwp_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_aluminium_prim[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_aluminium_sec[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_cement_geopolym[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_copper_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_fbt_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_glass_glass[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_lime_lime[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_mae_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_ois_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_paper_recycled[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_steel_hisarna[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_textiles_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_gas-ff-natural_wwp_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_fbt_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_textiles_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_mae_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_wwp_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_ois_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_aluminium_prim[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_aluminium_sec[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_cement_geopolym[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_copper_tech[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_glass_glass[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_lime_lime[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_paper_recycled[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_steel_hisarna[Mt]",
                    "ind_N2O-emissions_liquid-ff-oil_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_fbt_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_textiles_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_mae_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_wwp_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_ois_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_aluminium_prim[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_aluminium_sec[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_cement_geopolym[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_copper_tech[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_glass_glass[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_lime_lime[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_paper_recycled[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_steel_hisarna[Mt]",
                    "ind_N2O-emissions_solid-ff-coal_steel_hydrog-DRI[Mt]",
                    "ind_N2O-emissions_process_fbt_tech[Mt]",
                    "ind_N2O-emissions_process_tra-equip_tech[Mt]",
                    "ind_N2O-emissions_process_textiles_tech[Mt]",
                    "ind_N2O-emissions_process_mae_tech[Mt]",
                    "ind_N2O-emissions_process_wwp_tech[Mt]",
                    "ind_N2O-emissions_process_ois_tech[Mt]",
                    "ind_N2O-emissions_process_aluminium_prim[Mt]",
                    "ind_N2O-emissions_process_aluminium_sec[Mt]",
                    "ind_N2O-emissions_process_cement_dry-kiln[Mt]",
                    "ind_N2O-emissions_process_cement_wet-kiln[Mt]",
                    "ind_N2O-emissions_process_cement_geopolym[Mt]",
                    "ind_N2O-emissions_process_chem_chem-tech[Mt]",
                    "ind_N2O-emissions_process_copper_tech[Mt]",
                    "ind_N2O-emissions_process_glass_glass[Mt]",
                    "ind_N2O-emissions_process_lime_lime[Mt]",
                    "ind_N2O-emissions_process_paper_woodpulp[Mt]",
                    "ind_N2O-emissions_process_paper_recycled[Mt]",
                    "ind_N2O-emissions_process_steel_BF-BOF[Mt]",
                    "ind_N2O-emissions_process_steel_scrap-EAF[Mt]",
                    "ind_N2O-emissions_process_steel_hisarna[Mt]",
                    "ind_N2O-emissions_process_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "string-input-490:1306:1213:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_solid-waste"
        },
        "string-input-875:1300:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1306:1213:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1299:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1541:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CO2-emissions-CC_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CO2-emissions-CC_aluminium_prim[Mt]",
                    "ind_CO2-emissions-CC_aluminium_sec[Mt]",
                    "ind_CO2-emissions-CC_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions-CC_cement_geopolym[Mt]",
                    "ind_CO2-emissions-CC_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions-CC_chem_chem-tech[Mt]",
                    "ind_CO2-emissions-CC_copper_tech[Mt]",
                    "ind_CO2-emissions-CC_fbt_tech[Mt]",
                    "ind_CO2-emissions-CC_glass_glass[Mt]",
                    "ind_CO2-emissions-CC_lime_lime[Mt]",
                    "ind_CO2-emissions-CC_mae_tech[Mt]",
                    "ind_CO2-emissions-CC_ois_tech[Mt]",
                    "ind_CO2-emissions-CC_paper_recycled[Mt]",
                    "ind_CO2-emissions-CC_paper_woodpulp[Mt]",
                    "ind_CO2-emissions-CC_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions-CC_steel_hisarna[Mt]",
                    "ind_CO2-emissions-CC_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions-CC_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions-CC_textiles_tech[Mt]",
                    "ind_CO2-emissions-CC_tra-equip_tech[Mt]",
                    "ind_CO2-emissions-CC_wwp_tech[Mt]"
                ]
            }
        },
        "boolean-input-490:1696:1667:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1306:1205:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1498:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1306:1213:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1300:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1306:1245:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_gas-bio"
        },
        "string-input-490:1306:1317:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_solid-ff-coal"
        },
        "boolean-input-875:1233:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "boolean-input-490:1511:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-490:1306:1299:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_liquid-bio.*"
        },
        "boolean-input-490:1306:1207:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-875:1300:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "string-input-490:1306:1213:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_solid-waste.*"
        },
        "string-input-875:1300:446":{
            "type":"string",
            "default":"tec_emission-factor_CH4_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_CH4_(.*)\\[.*"
        },
        "single-selection-490:1491:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1230:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1302:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1245:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1267:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1306:1277:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1240:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_solid-bio.*"
        },
        "single-selection-490:932:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1245:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_gas-bio.*"
        },
        "disabled-490:1292:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "string-input-490:1306:1240:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1275:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1300:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "string-input-490:1300:444":{
            "type":"string",
            "default":"ind_CH4-emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CH4-emissions"
        },
        "column-filter-490:1718:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "emissions_chem[Mt]",
                    "emissions_paper[Mt]"
                ]
            }
        },
        "string-input-875:1300:444":{
            "type":"string",
            "default":"amm_emissions_CH4",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_emissions_CH4"
        },
        "string-input-490:1300:446":{
            "type":"string",
            "default":"tec_emission-factor_CH4_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_CH4_(.*)\\[.*"
        },
        "single-selection-490:1267:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "column-filter-490:1720:1253":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"specific_energy_cement[TWh/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "specific_energy_cement[TWh/Mt]",
                    "specific_energy_chem[TWh/Mt]",
                    "specific_energy_paper[TWh/Mt]",
                    "specific_energy_steel[TWh/Mt]"
                ]
            }
        },
        "boolean-input-490:1622:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1240:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_solid-bio"
        },
        "string-input-490:1306:1283:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_solid-bio"
        },
        "string-input-875:1690:1665:349":{
            "type":"string",
            "default":"ind_energy,liquid-synfuel",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,liquid-synfuel"
        },
        "single-selection-490:761:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1306:1281:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1492:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "single-selection-490:1649:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:931:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1492:357":{
            "type":"string",
            "default":"amm_emissions_CH4_.*_(.*_.*)\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_CH4_.*_(.*_.*)\\[.*]"
        },
        "single-selection-490:1669:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-490:1507:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1287:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1287:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_electricity.*"
        },
        "string-input-490:1306:1317:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1233:1151:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1317:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_solid-ff.*"
        },
        "string-input-490:1306:1287:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_electricity"
        },
        "single-selection-490:1289:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1349:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-875:1170:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "single-selection-875:1669:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-875:931:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1301:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1483:446":{
            "type":"string",
            "default":"tec_energy_specific-feedstock_(.*)_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_energy_specific-feedstock_(.*)_(.*)\\[.*]"
        },
        "single-selection-490:1714:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1483:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "string-input-875:1483:444":{
            "type":"string",
            "default":"ind_energy_feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_feedstock"
        },
        "single-selection-490:1306:1306:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:751:460":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"t"
        },
        "single-selection-875:1599:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-875:1484:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1420":{
            "type":"string",
            "default":".*emissions-(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*emissions-(.+)\\[.*"
        },
        "boolean-input-490:1306:1205:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1347:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-490:1620:349":{
            "type":"string",
            "default":"ind_bioenergy",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_bioenergy"
        },
        "boolean-input-490:1267:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1301:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_solid-ff-coal"
        },
        "string-input-490:1507:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1507:357":{
            "type":"string",
            "default":"ind_emissions_(.*)_.*\\[Mt\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_emissions_(.*)_.*\\[Mt\\]"
        },
        "boolean-input-490:1306:1306:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1261:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1233:1151:444":{
            "type":"string",
            "default":"cal_delta",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_delta"
        },
        "string-input-875:1233:1151:445":{
            "type":"string",
            "default":"cal_ind_production-calibration_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_production-calibration_(.*)\\[.*"
        },
        "string-input-875:1233:1151:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_(.*)\\[.*"
        },
        "boolean-input-490:1493:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1289:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-490:1306:1296:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1306:1253:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1620:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1620:357":{
            "type":"string",
            "default":"ind_energy-demand_.*_(solid.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy-demand_.*_(solid.*)\\[.*"
        },
        "single-selection-490:1620:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1496:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1314:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_solid-waste.*"
        },
        "string-input-875:1492:349":{
            "type":"string",
            "default":"amm_emissions_CH4",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"amm_emissions_CH4"
        },
        "string-input-490:1507:349":{
            "type":"string",
            "default":"ind_emissions",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_emissions"
        },
        "string-input-490:1306:1301:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_solid-ff.*"
        },
        "string-input-490:1306:1314:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1215:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_liquid-ff-oil"
        },
        "string-input-490:1306:1258:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_gas-ff-natural"
        },
        "string-input-490:751:444":{
            "type":"string",
            "default":"ind_dem",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_dem"
        },
        "string-input-490:1484:444":{
            "type":"string",
            "default":"ind_energy_incl-feedstock",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_incl-feedstock"
        },
        "string-input-490:1484:446":{
            "type":"string",
            "default":"ind_energy_excl-feedstock_(.*)\\[.*]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_excl-feedstock_(.*)\\[.*]"
        },
        "string-input-490:1484:445":{
            "type":"string",
            "default":"ind_energy_feedstock_(.*)\\[TWh]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_feedstock_(.*)\\[TWh]"
        },
        "single-selection-490:1697:1682:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1200:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_solid-ff.*"
        },
        "column-filter-490:1170:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_technology-share_steel_BF-BOF[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_technology-share_steel_BF-BOF[%]",
                    "ind_technology-share_steel_scrap-EAF[%]",
                    "ind_technology-share_steel_hisarna[%]",
                    "ind_technology-share_steel_hydrog-DRI[%]",
                    "ind_technology-share_cement_dry-kiln[%]",
                    "ind_technology-share_cement_wet-kiln[%]",
                    "ind_technology-share_cement_geopolym[%]",
                    "ind_technology-share_chem_chem-tech[%]",
                    "ind_technology-share_paper_woodpulp[%]",
                    "ind_technology-share_paper_recycled[%]",
                    "ind_technology-share_aluminium_prim[%]",
                    "ind_technology-share_aluminium_sec[%]",
                    "ind_technology-share_glass_glass[%]",
                    "ind_technology-share_lime_lime[%]",
                    "ind_technology-share_tra-equip_tech[%]",
                    "ind_technology-share_fbt_tech[%]",
                    "ind_technology-share_textiles_tech[%]",
                    "ind_technology-share_mae_tech[%]",
                    "ind_technology-share_wwp_tech[%]",
                    "ind_technology-share_ois_tech[%]",
                    "ind_technology-share_copper_tech[%]"
                ]
            }
        },
        "string-input-490:1306:1314:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_solid-waste"
        },
        "column-filter-490:1306:1211:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1696:1665:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1306:1181:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1320:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1312:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1311:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1200:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_solid-ff-coal"
        },
        "string-input-490:1306:1243:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_electricity"
        },
        "string-input-490:1696:1665:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_liquid-ff-oil_synfuel\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_liquid-ff-oil_synfuel\\[.*\\]"
        },
        "single-selection-875:1656:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1243:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-875:1652:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_solid-waste_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_hydrogen[TWh]"
                ]
            }
        },
        "string-input-490:1306:1200:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1243:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_electricity.*"
        },
        "column-filter-875:1301:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor_N2O_gas-synfuel[Mt/TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor_N2O_gas-synfuel[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-synfuel[Mt/TWh]",
                    "tec_emission-factor_N2O_hydrogen[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-waste[Mt/TWh]",
                    "tec_emission-factor_N2O_gas-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-bio[Mt/TWh]",
                    "tec_emission-factor_N2O_gas-ff-natural[Mt/TWh]",
                    "tec_emission-factor_N2O_liquid-ff-oil[Mt/TWh]",
                    "tec_emission-factor_N2O_solid-ff-coal[Mt/TWh]",
                    "tec_emission-factor_N2O_electricity[Mt/TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1304:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:751:446":{
            "type":"string",
            "default":"tec_(.*)_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_(.*)_(.*)\\[.*"
        },
        "column-filter-490:1306:1226:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:751:445":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "string-input-490:1306:1270:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_gas-bio"
        },
        "column-filter-490:1306:1269:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1277:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1232:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:761:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-875:1170:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_technology-share_ammonia_amm-tech[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_technology-share_ammonia_amm-tech[%]"
                ]
            }
        },
        "string-input-490:1696:1665:349":{
            "type":"string",
            "default":"ind_energy,liquid-synfuel",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,liquid-synfuel"
        },
        "column-filter-490:1672:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_bio[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_bio[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_bio[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_bio[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_bio[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_bio[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_bio[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_bio[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_bio[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_bio[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_bio[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_bio[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_bio[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_bio[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_bio[TWh]",
                    "ind_energy_aluminium_prim_gas_bio_total[TWh]",
                    "ind_energy_aluminium_prim_liquid_bio_total[TWh]",
                    "ind_energy_aluminium_prim_solid_bio_total[TWh]",
                    "ind_energy_aluminium_sec_gas_bio_total[TWh]",
                    "ind_energy_aluminium_sec_liquid_bio_total[TWh]",
                    "ind_energy_aluminium_sec_solid_bio_total[TWh]",
                    "ind_energy_cement_dry-kiln_gas_bio_total[TWh]",
                    "ind_energy_cement_dry-kiln_liquid_bio_total[TWh]",
                    "ind_energy_cement_dry-kiln_solid_bio_total[TWh]",
                    "ind_energy_cement_geopolym_gas_bio_total[TWh]",
                    "ind_energy_cement_geopolym_liquid_bio_total[TWh]",
                    "ind_energy_cement_geopolym_solid_bio_total[TWh]",
                    "ind_energy_cement_wet-kiln_gas_bio_total[TWh]",
                    "ind_energy_cement_wet-kiln_liquid_bio_total[TWh]",
                    "ind_energy_cement_wet-kiln_solid_bio_total[TWh]",
                    "ind_energy_chem_chem-tech_gas_bio_total[TWh]",
                    "ind_energy_chem_chem-tech_liquid_bio_total[TWh]",
                    "ind_energy_chem_chem-tech_solid_bio_total[TWh]",
                    "ind_energy_copper_tech_gas_bio_total[TWh]",
                    "ind_energy_copper_tech_liquid_bio_total[TWh]",
                    "ind_energy_copper_tech_solid_bio_total[TWh]",
                    "ind_energy_fbt_tech_gas_bio_total[TWh]",
                    "ind_energy_fbt_tech_liquid_bio_total[TWh]",
                    "ind_energy_fbt_tech_solid_bio_total[TWh]",
                    "ind_energy_glass_glass_gas_bio_total[TWh]",
                    "ind_energy_glass_glass_liquid_bio_total[TWh]",
                    "ind_energy_glass_glass_solid_bio_total[TWh]",
                    "ind_energy_lime_lime_gas_bio_total[TWh]",
                    "ind_energy_lime_lime_liquid_bio_total[TWh]",
                    "ind_energy_lime_lime_solid_bio_total[TWh]",
                    "ind_energy_mae_tech_gas_bio_total[TWh]",
                    "ind_energy_mae_tech_liquid_bio_total[TWh]",
                    "ind_energy_mae_tech_solid_bio_total[TWh]",
                    "ind_energy_ois_tech_gas_bio_total[TWh]",
                    "ind_energy_ois_tech_liquid_bio_total[TWh]",
                    "ind_energy_ois_tech_solid_bio_total[TWh]",
                    "ind_energy_paper_recycled_gas_bio_total[TWh]",
                    "ind_energy_paper_recycled_liquid_bio_total[TWh]",
                    "ind_energy_paper_recycled_solid_bio_total[TWh]",
                    "ind_energy_paper_woodpulp_gas_bio_total[TWh]",
                    "ind_energy_paper_woodpulp_liquid_bio_total[TWh]",
                    "ind_energy_paper_woodpulp_solid_bio_total[TWh]",
                    "ind_energy_steel_BF-BOF_gas_bio_total[TWh]",
                    "ind_energy_steel_BF-BOF_liquid_bio_total[TWh]",
                    "ind_energy_steel_BF-BOF_solid_bio_total[TWh]",
                    "ind_energy_steel_hisarna_gas_bio_total[TWh]",
                    "ind_energy_steel_hisarna_liquid_bio_total[TWh]",
                    "ind_energy_steel_hisarna_solid_bio_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas_bio_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid_bio_total[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid_bio_total[TWh]",
                    "ind_energy_steel_scrap-EAF_gas_bio_total[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid_bio_total[TWh]",
                    "ind_energy_steel_scrap-EAF_solid_bio_total[TWh]",
                    "ind_energy_textiles_tech_gas_bio_total[TWh]",
                    "ind_energy_textiles_tech_liquid_bio_total[TWh]",
                    "ind_energy_textiles_tech_solid_bio_total[TWh]",
                    "ind_energy_tra-equip_tech_gas_bio_total[TWh]",
                    "ind_energy_tra-equip_tech_liquid_bio_total[TWh]",
                    "ind_energy_tra-equip_tech_solid_bio_total[TWh]",
                    "ind_energy_wwp_tech_gas_bio_total[TWh]",
                    "ind_energy_wwp_tech_liquid_bio_total[TWh]",
                    "ind_energy_wwp_tech_solid_bio_total[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1234:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1275:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1642:446":{
            "type":"string",
            "default":"tec_emission-factor-process_N2O_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor-process_N2O_(.*)\\[.*"
        },
        "string-input-490:1642:445":{
            "type":"string",
            "default":"ind_material-production_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_material-production_(.*)\\[.*"
        },
        "column-filter-490:1559:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_technology-development_steel_BF-BOF[%]_1minus"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_technology-development_steel_BF-BOF[%]_1minus",
                    "ind_technology-development_steel_scrap-EAF[%]_1minus",
                    "ind_technology-development_steel_hydrog-DRI[%]_1minus",
                    "ind_technology-development_steel_hisarna[%]_1minus",
                    "ind_technology-development_cement_dry-kiln[%]_1minus",
                    "ind_technology-development_cement_wet-kiln[%]_1minus",
                    "ind_technology-development_cement_geopolym[%]_1minus",
                    "ind_technology-development_chem_chem-tech[%]_1minus",
                    "ind_technology-development_paper_woodpulp[%]_1minus",
                    "ind_technology-development_paper_recycled[%]_1minus",
                    "ind_technology-development_aluminium_prim[%]_1minus",
                    "ind_technology-development_aluminium_sec[%]_1minus",
                    "ind_technology-development_glass_glass[%]_1minus",
                    "ind_technology-development_lime_lime[%]_1minus",
                    "ind_technology-development_tra-equip_tech[%]_1minus",
                    "ind_technology-development_fbt_tech[%]_1minus",
                    "ind_technology-development_textiles_tech[%]_1minus",
                    "ind_technology-development_mae_tech[%]_1minus",
                    "ind_technology-development_wwp_tech[%]_1minus",
                    "ind_technology-development_ois_tech[%]_1minus",
                    "ind_technology-development_copper_tech[%]_1minus"
                ]
            }
        },
        "boolean-input-875:1494:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1653:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_aluminium_prim_hydrogen_added[TWh]",
                    "ind_energy_aluminium_sec_hydrogen_added[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen_added[TWh]",
                    "ind_energy_cement_geopolym_hydrogen_added[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen_added[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen_added[TWh]",
                    "ind_energy_copper_tech_hydrogen_added[TWh]",
                    "ind_energy_fbt_tech_hydrogen_added[TWh]",
                    "ind_energy_glass_glass_hydrogen_added[TWh]",
                    "ind_energy_lime_lime_hydrogen_added[TWh]",
                    "ind_energy_mae_tech_hydrogen_added[TWh]",
                    "ind_energy_ois_tech_hydrogen_added[TWh]",
                    "ind_energy_paper_recycled_hydrogen_added[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen_added[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen_added[TWh]",
                    "ind_energy_steel_hisarna_hydrogen_added[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen_added[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen_added[TWh]",
                    "ind_energy_textiles_tech_hydrogen_added[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen_added[TWh]",
                    "ind_energy_wwp_tech_hydrogen_added[TWh]"
                ]
            }
        },
        "string-input-490:1642:444":{
            "type":"string",
            "default":"ind_N2O-emissions_process",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_N2O-emissions_process"
        },
        "single-selection-490:1306:1207:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1690:1665:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_liquid-ff-oil_synfuel\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_liquid-ff-oil_synfuel\\[.*\\]"
        },
        "string-input-490:1306:1215:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_liquid-ff.*"
        },
        "boolean-input-875:1652:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1315:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_solid-bio"
        },
        "string-input-490:1306:1270:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_gas-bio.*"
        },
        "string-input-490:1306:1258:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:931:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "boolean-input-490:1306:1247:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1258:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_gas-ff.*"
        },
        "string-input-490:1306:1215:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1717:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"material_cement[kt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "material_cement[kt]",
                    "material_chem[kt]",
                    "material_paper[kt]",
                    "material_steel[kt]",
                    "specific_emissions_cement[Mt/kt]",
                    "specific_emissions_chem[Mt/kt]",
                    "specific_emissions_paper[Mt/kt]",
                    "specific_emissions_steel[Mt/kt]"
                ]
            }
        },
        "string-input-490:1306:1270:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1690:1665:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "column-filter-490:1495:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_emissions_CH4_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_emissions_CH4_aluminium_prim[Mt]",
                    "ind_emissions_CH4_aluminium_sec[Mt]",
                    "ind_emissions_CH4_cement_dry-kiln[Mt]",
                    "ind_emissions_CH4_cement_geopolym[Mt]",
                    "ind_emissions_CH4_cement_wet-kiln[Mt]",
                    "ind_emissions_CH4_chem_chem-tech[Mt]",
                    "ind_emissions_CH4_copper_tech[Mt]",
                    "ind_emissions_CH4_fbt_tech[Mt]",
                    "ind_emissions_CH4_glass_glass[Mt]",
                    "ind_emissions_CH4_lime_lime[Mt]",
                    "ind_emissions_CH4_mae_tech[Mt]",
                    "ind_emissions_CH4_ois_tech[Mt]",
                    "ind_emissions_CH4_paper_recycled[Mt]",
                    "ind_emissions_CH4_paper_woodpulp[Mt]",
                    "ind_emissions_CH4_steel_BF-BOF[Mt]",
                    "ind_emissions_CH4_steel_hisarna[Mt]",
                    "ind_emissions_CH4_steel_hydrog-DRI[Mt]",
                    "ind_emissions_CH4_steel_scrap-EAF[Mt]",
                    "ind_emissions_CH4_textiles_tech[Mt]",
                    "ind_emissions_CH4_tra-equip_tech[Mt]",
                    "ind_emissions_CH4_wwp_tech[Mt]"
                ]
            }
        },
        "single-selection-875:1654:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "string-input-875:931:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "single-selection-490:933:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:931:445":{
            "type":"string",
            "default":"agr_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"agr_(.*)\\[.*"
        },
        "single-selection-490:1654:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "column-filter-490:1306:1239:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1690:1667:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1242:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1289:1150:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 1/2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 1/2"
            }
        },
        "single-selection-490:1224:1150:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1255:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1234:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_solid-ff.*"
        },
        "string-input-490:1306:1242:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_gas-bio.*"
        },
        "boolean-input-490:1495:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1323:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_electricity.*"
        },
        "single-selection-490:1657:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1255:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1349:1421":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-production_fbt_tech[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-production_fbt_tech[Mt]",
                    "ind_material-production_tra-equip_tech[Mt]",
                    "ind_material-production_textiles_tech[Mt]",
                    "ind_material-production_mae_tech[Mt]",
                    "ind_material-production_wwp_tech[Mt]",
                    "ind_material-production_ois_tech[Mt]",
                    "ind_material-production_aluminium_prim[Mt]",
                    "ind_material-production_aluminium_sec[Mt]",
                    "ind_material-production_cement_dry-kiln[Mt]",
                    "ind_material-production_cement_wet-kiln[Mt]",
                    "ind_material-production_cement_geopolym[Mt]",
                    "ind_material-production_chem_chem-tech[Mt]",
                    "ind_material-production_copper_tech[Mt]",
                    "ind_material-production_glass_glass[Mt]",
                    "ind_material-production_lime_lime[Mt]",
                    "ind_material-production_paper_woodpulp[Mt]",
                    "ind_material-production_paper_recycled[Mt]",
                    "ind_material-production_steel_BF-BOF[Mt]",
                    "ind_material-production_steel_scrap-EAF[Mt]",
                    "ind_material-production_steel_hisarna[Mt]",
                    "ind_material-production_steel_hydrog-DRI[Mt]"
                ]
            }
        },
        "column-filter-490:1306:1263:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1514:1436":{
            "type":"boolean",
            "default":"false",
            "description":"Include unit costs in output",
            "example":false
        },
        "string-input-875:1648:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_electricity).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_electricity).*\\[.*\\]"
        },
        "string-input-875:1648:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1242:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_gas-bio"
        },
        "column-filter-490:931:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"bld_new_dhg_pipe[km]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "bld_new_dhg_pipe[km]",
                    "bld_floor-area_new_non-residential[m2]",
                    "bld_floor-area_reno_non-residential[m2]",
                    "bld_floor-area_new_residential[m2]",
                    "bld_floor-area_reno_residential[m2]",
                    "bld_fridge[num]",
                    "bld_freezer[num]",
                    "bld_wmachine[num]",
                    "bld_dishwasher[num]",
                    "bld_dryer[num]",
                    "bld_tv[num]",
                    "bld_computer[num]",
                    "bld_phone[num]"
                ]
            }
        },
        "column-filter-490:1658:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_gas-ff-natural[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_added[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_added[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_added[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_added[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_added[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_added[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_added[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_added[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_added[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_added[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_added[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_added[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_added[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_added[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_added[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_added[TWh]"
                ]
            }
        },
        "string-input-490:1306:1323:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_electricity"
        },
        "string-input-490:1270:446":{
            "type":"string",
            "default":"ind_CC_(.*_.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_CC_(.*_.*)\\[.*_1minus"
        },
        "string-input-490:1270:445":{
            "type":"string",
            "default":"ind_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_emissions_CO2_(.*)\\[.*"
        },
        "string-input-490:1270:444":{
            "type":"string",
            "default":"ind_CO2-emissions-after-CC",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CO2-emissions-after-CC"
        },
        "single-selection-875:1507:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "single-selection-875:1484:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "boolean-input-490:1306:1290:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1309:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1270:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:761:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_material-efficiency_steel[%]_1minus"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_material-efficiency_steel[%]_1minus",
                    "ind_material-efficiency_cement[%]_1minus",
                    "ind_material-efficiency_chem[%]_1minus",
                    "ind_material-efficiency_paper[%]_1minus",
                    "ind_material-efficiency_timber[%]_1minus",
                    "ind_material-efficiency_aluminium[%]_1minus",
                    "ind_material-efficiency_glass[%]_1minus",
                    "ind_material-efficiency_lime[%]_1minus",
                    "ind_material-efficiency_tra_equip[%]_1minus",
                    "ind_material-efficiency_fbt[%]_1minus",
                    "ind_material-efficiency_textiles[%]_1minus",
                    "ind_material-efficiency_mae[%]_1minus",
                    "ind_material-efficiency_wwp[%]_1minus",
                    "ind_material-efficiency_ois[%]_1minus",
                    "ind_material-efficiency_copper[%]_1minus"
                ]
            }
        },
        "disabled-490:1289:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "single-selection-490:1697:1678:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1323:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1661:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1494:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "string-input-490:1263:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-875:1494:357":{
            "type":"string",
            "default":"amm_emissions_CO2_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_CO2_.*_.*\\[.*]"
        },
        "single-selection-490:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"CAPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"CAPEX"
            }
        },
        "single-selection-875:1309:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 1-2"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 1-2"
            }
        },
        "boolean-input-490:1306:1257:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1274:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1270:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-875:1494:349":{
            "type":"string",
            "default":"amm_emissions_CO2",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"amm_emissions_CO2"
        },
        "single-selection-490:1306:1201:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1656:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*_liquid|.*_.*_solid)-(ff.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*_liquid|.*_.*_solid)-(ff.*)\\[.*\\]"
        },
        "string-input-490:1656:444":{
            "type":"string",
            "default":"ind_energy,gas-ff-natural",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,gas-ff-natural"
        },
        "boolean-input-490:1559:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-490:1306:1203:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1654:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-waste_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_hydrogen[TWh]",
                    "ind_energy_ammonia_amm-tech_hydrogen_total[TWh]"
                ]
            }
        },
        "string-input-875:1648:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "string-input-490:1263:446":{
            "type":"string",
            "default":"tec_emission-factor_CO2_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_CO2_(.*)\\[.*"
        },
        "single-selection-490:1714:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Division 2/1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Division 2/1"
            }
        },
        "column-filter-490:1641:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"tec_emission-factor-process_CH4_copper_tech[Mt/Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "tec_emission-factor-process_CH4_copper_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_ois_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_wwp_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_mae_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_textiles_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_fbt_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_tra-equip_tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_lime_lime[Mt/Mt]",
                    "tec_emission-factor-process_CH4_glass_glass[Mt/Mt]",
                    "tec_emission-factor-process_CH4_aluminium_sec[Mt/Mt]",
                    "tec_emission-factor-process_CH4_aluminium_prim[Mt/Mt]",
                    "tec_emission-factor-process_CH4_paper_recycled[Mt/Mt]",
                    "tec_emission-factor-process_CH4_paper_woodpulp[Mt/Mt]",
                    "tec_emission-factor-process_CH4_chem_chem-tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_ammonia_amm-tech[Mt/Mt]",
                    "tec_emission-factor-process_CH4_cement_geopolym[Mt/Mt]",
                    "tec_emission-factor-process_CH4_cement_wet-kiln[Mt/Mt]",
                    "tec_emission-factor-process_CH4_cement_dry-kiln[Mt/Mt]",
                    "tec_emission-factor-process_CH4_steel_hydrog-DRI[Mt/Mt]",
                    "tec_emission-factor-process_CH4_steel_hisarna[Mt/Mt]",
                    "tec_emission-factor-process_CH4_steel_scrap-EAF[Mt/Mt]",
                    "tec_emission-factor-process_CH4_steel_BF-BOF[Mt/Mt]"
                ]
            }
        },
        "string-input-490:1696:1664:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1263:444":{
            "type":"string",
            "default":"ind_CO2-emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_CO2-emissions"
        },
        "string-input-490:1656:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*_liquid|.*_.*_solid)-to-gas.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*_liquid|.*_.*_solid)-to-gas.*"
        },
        "string-input-490:1263:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "boolean-input-490:1672:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1648:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1306:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1217:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1306:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_gas-bio.*"
        },
        "string-input-490:1544:349":{
            "type":"string",
            "default":"ind_investment",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_investment"
        },
        "boolean-input-490:1263:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1217:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_hydrogen.*"
        },
        "column-filter-875:1484:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_excl-feedstock_ammonia_amm-tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_excl-feedstock_ammonia_amm-tech_hydrogen[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_solid-ff-coal[TWh]",
                    "ind_energy_excl-feedstock_ammonia_amm-tech_electricity[TWh]"
                ]
            }
        },
        "single-selection-490:1300:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1264:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1259:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "string-input-875:1181:349":{
            "type":"string",
            "default":"amm_energy-demand_ammonia",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"amm_energy-demand_ammonia"
        },
        "string-input-875:1259:445":{
            "type":"string",
            "default":"ind_technology-development_(.*)\\[%]_1minus",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_technology-development_(.*)\\[%]_1minus"
        },
        "string-input-875:1259:446":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[TWh]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_(.*)_(.*_.*)\\[TWh]"
        },
        "column-filter-875:1646:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_ammonia_amm-tech_to-electricity[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_ammonia_amm-tech_to-electricity[%]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]"
                ]
            }
        },
        "disabled-875:1233:1171":{
            "type":"boolean",
            "default":"false",
            "description":"Disable the node. The first input is copied to the output, and calibration rates are set to 1.",
            "example":false
        },
        "string-input-490:1306:1227:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_gas-bio.*"
        },
        "string-input-490:761:446":{
            "type":"string",
            "default":"ind_material-efficiency_(.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_material-efficiency_(.*)\\[.*_1minus"
        },
        "string-input-490:1672:444":{
            "type":"string",
            "default":"ind_energy_total",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy_total"
        },
        "string-input-875:1311:444":{
            "type":"string",
            "default":"amm_CO2-emissions-after-CC",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_CO2-emissions-after-CC"
        },
        "string-input-490:1672:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)_bio\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*_.*)_bio\\[.*\\]"
        },
        "string-input-490:1306:1227:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1672:446":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)\\[.*\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy_(.*_.*_.*)\\[.*\\]"
        },
        "column-filter-490:1306:1246:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1486:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-490:1306:1280:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1496:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1656:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-875:1181:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1559:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "string-input-875:1181:357":{
            "type":"string",
            "default":"amm_energy-demand.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_energy-demand.*"
        },
        "string-input-490:761:460":{
            "type":"string",
            "default":"kt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"kt"
        },
        "boolean-input-490:1658:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1306:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_gas-bio"
        },
        "boolean-input-490:1306:1212:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1248:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1259:460":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"TWh"
        },
        "double-input-490:1709:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1544:354":{
            "type":"string",
            "default":"MEUR",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"MEUR"
        },
        "string-input-490:1544:357":{
            "type":"string",
            "default":"ind_capex_(.*)_.*\\[MEUR\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_capex_(.*)_.*\\[MEUR\\]"
        },
        "single-selection-490:1306:1270:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1227:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_gas-bio"
        },
        "string-input-490:1306:1288:349":{
            "type":"string",
            "default":"ind_energy-demand_textiles_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_textiles_gas-bio"
        },
        "boolean-input-490:1306:1283:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1298:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_solid-waste.*"
        },
        "boolean-input-490:1306:1249:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1298:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1266:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1690:1666:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1697:1678:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CO2-emissions_gas-bio_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CO2-emissions_gas-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_liquid-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_solid-bio_aluminium_prim[Mt]",
                    "ind_CO2-emissions_gas-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_liquid-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_solid-bio_aluminium_sec[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_geopolym[Mt]",
                    "ind_CO2-emissions_gas-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_liquid-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_solid-bio_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions_gas-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_solid-bio_chem_chem-tech[Mt]",
                    "ind_CO2-emissions_gas-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_copper_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_fbt_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_liquid-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_solid-bio_glass_glass[Mt]",
                    "ind_CO2-emissions_gas-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_liquid-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_solid-bio_lime_lime[Mt]",
                    "ind_CO2-emissions_gas-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_mae_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_ois_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_liquid-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_solid-bio_paper_recycled[Mt]",
                    "ind_CO2-emissions_gas-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_liquid-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_solid-bio_paper_woodpulp[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_hisarna[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions_gas-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_liquid-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_solid-bio_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions_gas-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_textiles_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_tra-equip_tech[Mt]",
                    "ind_CO2-emissions_gas-bio_wwp_tech[Mt]",
                    "ind_CO2-emissions_liquid-bio_wwp_tech[Mt]",
                    "ind_CO2-emissions_solid-bio_wwp_tech[Mt]"
                ]
            }
        },
        "single-selection-490:1642:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-875:1311:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1306:1298:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_solid-waste"
        },
        "string-input-490:1672:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1251:349":{
            "type":"string",
            "default":"ind_energy-demand_glass_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_glass_solid-ff-coal"
        },
        "string-input-490:1306:1288:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1641:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-490:1306:1288:357":{
            "type":"string",
            "default":"ind_energy_textiles_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_textiles_.*_gas-bio.*"
        },
        "string-input-490:1306:1234:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_solid-ff-coal"
        },
        "string-input-875:1311:445":{
            "type":"string",
            "default":"amm_emissions_CO2_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"amm_emissions_CO2_(.*)\\[.*"
        },
        "string-input-875:1311:446":{
            "type":"string",
            "default":"ind_CC_(.*_.*)\\[.*_1minus",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_CC_(.*_.*)\\[.*_1minus"
        },
        "string-input-490:1541:1420":{
            "type":"string",
            "default":".*emissions-(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*emissions-(.+)\\[.*"
        },
        "string-input-490:1306:1217:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_hydrogen"
        },
        "column-filter-490:1224:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1251:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:1309:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1306:1181:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1234:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1559:446":{
            "type":"string",
            "default":"ind_energy-new_(.*)_(.*_.*)\\[TWh\\]",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-new_(.*)_(.*_.*)\\[TWh\\]"
        },
        "string-input-490:1306:1251:357":{
            "type":"string",
            "default":"ind_energy_glass_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_glass_.*_solid-ff.*"
        },
        "string-input-490:1559:445":{
            "type":"string",
            "default":"ind_technology-development_(.*)\\[%]_1minus",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_technology-development_(.*)\\[%]_1minus"
        },
        "string-input-490:1559:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "single-selection-490:1484:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1718:843":{
            "type":"string",
            "default":"Title",
            "description":"Enter Description",
            "example":"Title"
        },
        "column-filter-490:1508:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_steel_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_steel_electricity[TWh]",
                    "ind_energy-demand_steel_solid-ff-coal[TWh]",
                    "ind_energy-demand_steel_liquid-ff-oil[TWh]",
                    "ind_energy-demand_steel_gas-ff-natural[TWh]",
                    "ind_energy-demand_steel_solid-bio[TWh]",
                    "ind_energy-demand_steel_liquid-bio[TWh]",
                    "ind_energy-demand_steel_gas-bio[TWh]",
                    "ind_energy-demand_steel_solid-waste[TWh]",
                    "ind_energy-demand_steel_hydrogen[TWh]",
                    "ind_energy-demand_cement_electricity[TWh]",
                    "ind_energy-demand_cement_solid-ff-coal[TWh]",
                    "ind_energy-demand_cement_liquid-ff-oil[TWh]",
                    "ind_energy-demand_cement_gas-ff-natural[TWh]",
                    "ind_energy-demand_cement_solid-bio[TWh]",
                    "ind_energy-demand_cement_liquid-bio[TWh]",
                    "ind_energy-demand_cement_gas-bio[TWh]",
                    "ind_energy-demand_cement_solid-waste[TWh]",
                    "ind_energy-demand_cement_hydrogen[TWh]",
                    "ind_energy-demand_chem_electricity[TWh]",
                    "ind_energy-demand_chem_solid-ff-coal[TWh]",
                    "ind_energy-demand_chem_liquid-ff-oil[TWh]",
                    "ind_energy-demand_chem_gas-ff-natural[TWh]",
                    "ind_energy-demand_chem_solid-bio[TWh]",
                    "ind_energy-demand_chem_liquid-bio[TWh]",
                    "ind_energy-demand_chem_gas-bio[TWh]",
                    "ind_energy-demand_chem_solid-waste[TWh]",
                    "ind_energy-demand_chem_hydrogen[TWh]",
                    "ind_energy-demand_paper_electricity[TWh]",
                    "ind_energy-demand_paper_solid-ff-coal[TWh]",
                    "ind_energy-demand_paper_liquid-ff-oil[TWh]",
                    "ind_energy-demand_paper_gas-ff-natural[TWh]",
                    "ind_energy-demand_paper_solid-bio[TWh]",
                    "ind_energy-demand_paper_liquid-bio[TWh]",
                    "ind_energy-demand_paper_gas-bio[TWh]",
                    "ind_energy-demand_paper_solid-waste[TWh]",
                    "ind_energy-demand_paper_hydrogen[TWh]",
                    "ind_energy-demand_aluminium_electricity[TWh]",
                    "ind_energy-demand_aluminium_solid-ff-coal[TWh]",
                    "ind_energy-demand_aluminium_liquid-ff-oil[TWh]",
                    "ind_energy-demand_aluminium_gas-ff-natural[TWh]",
                    "ind_energy-demand_aluminium_solid-bio[TWh]",
                    "ind_energy-demand_aluminium_liquid-bio[TWh]",
                    "ind_energy-demand_aluminium_gas-bio[TWh]",
                    "ind_energy-demand_aluminium_solid-waste[TWh]",
                    "ind_energy-demand_aluminium_hydrogen[TWh]",
                    "ind_energy-demand_glass_electricity[TWh]",
                    "ind_energy-demand_glass_solid-ff-coal[TWh]",
                    "ind_energy-demand_glass_liquid-ff-oil[TWh]",
                    "ind_energy-demand_glass_gas-ff-natural[TWh]",
                    "ind_energy-demand_glass_solid-bio[TWh]",
                    "ind_energy-demand_glass_liquid-bio[TWh]",
                    "ind_energy-demand_glass_gas-bio[TWh]",
                    "ind_energy-demand_glass_solid-waste[TWh]",
                    "ind_energy-demand_glass_hydrogen[TWh]",
                    "ind_energy-demand_lime_electricity[TWh]",
                    "ind_energy-demand_lime_solid-ff-coal[TWh]",
                    "ind_energy-demand_lime_liquid-ff-oil[TWh]",
                    "ind_energy-demand_lime_gas-ff-natural[TWh]",
                    "ind_energy-demand_lime_solid-bio[TWh]",
                    "ind_energy-demand_lime_liquid-bio[TWh]",
                    "ind_energy-demand_lime_gas-bio[TWh]",
                    "ind_energy-demand_lime_solid-waste[TWh]",
                    "ind_energy-demand_lime_hydrogen[TWh]",
                    "ind_energy-demand_tra-equip_electricity[TWh]",
                    "ind_energy-demand_tra-equip_solid-ff-coal[TWh]",
                    "ind_energy-demand_tra-equip_liquid-ff-oil[TWh]",
                    "ind_energy-demand_tra-equip_gas-ff-natural[TWh]",
                    "ind_energy-demand_tra-equip_solid-bio[TWh]",
                    "ind_energy-demand_tra-equip_liquid-bio[TWh]",
                    "ind_energy-demand_tra-equip_gas-bio[TWh]",
                    "ind_energy-demand_tra-equip_solid-waste[TWh]",
                    "ind_energy-demand_tra-equip_hydrogen[TWh]",
                    "ind_energy-demand_fbt_electricity[TWh]",
                    "ind_energy-demand_fbt_solid-ff-coal[TWh]",
                    "ind_energy-demand_fbt_liquid-ff-oil[TWh]",
                    "ind_energy-demand_fbt_gas-ff-natural[TWh]",
                    "ind_energy-demand_fbt_solid-bio[TWh]",
                    "ind_energy-demand_fbt_liquid-bio[TWh]",
                    "ind_energy-demand_fbt_gas-bio[TWh]",
                    "ind_energy-demand_fbt_solid-waste[TWh]",
                    "ind_energy-demand_fbt_hydrogen[TWh]",
                    "ind_energy-demand_textiles_electricity[TWh]",
                    "ind_energy-demand_textiles_solid-ff-coal[TWh]",
                    "ind_energy-demand_textiles_liquid-ff-oil[TWh]",
                    "ind_energy-demand_textiles_gas-ff-natural[TWh]",
                    "ind_energy-demand_textiles_solid-bio[TWh]",
                    "ind_energy-demand_textiles_liquid-bio[TWh]",
                    "ind_energy-demand_textiles_gas-bio[TWh]",
                    "ind_energy-demand_textiles_solid-waste[TWh]",
                    "ind_energy-demand_textiles_hydrogen[TWh]",
                    "ind_energy-demand_mae_electricity[TWh]",
                    "ind_energy-demand_mae_solid-ff-coal[TWh]",
                    "ind_energy-demand_mae_liquid-ff-oil[TWh]",
                    "ind_energy-demand_mae_gas-ff-natural[TWh]",
                    "ind_energy-demand_mae_solid-bio[TWh]",
                    "ind_energy-demand_mae_liquid-bio[TWh]",
                    "ind_energy-demand_mae_gas-bio[TWh]",
                    "ind_energy-demand_mae_solid-waste[TWh]",
                    "ind_energy-demand_mae_hydrogen[TWh]",
                    "ind_energy-demand_wwp_electricity[TWh]",
                    "ind_energy-demand_wwp_solid-ff-coal[TWh]",
                    "ind_energy-demand_wwp_liquid-ff-oil[TWh]",
                    "ind_energy-demand_wwp_gas-ff-natural[TWh]",
                    "ind_energy-demand_wwp_solid-bio[TWh]",
                    "ind_energy-demand_wwp_liquid-bio[TWh]",
                    "ind_energy-demand_wwp_gas-bio[TWh]",
                    "ind_energy-demand_wwp_solid-waste[TWh]",
                    "ind_energy-demand_wwp_hydrogen[TWh]",
                    "ind_energy-demand_ois_electricity[TWh]",
                    "ind_energy-demand_ois_solid-ff-coal[TWh]",
                    "ind_energy-demand_ois_liquid-ff-oil[TWh]",
                    "ind_energy-demand_ois_gas-ff-natural[TWh]",
                    "ind_energy-demand_ois_solid-bio[TWh]",
                    "ind_energy-demand_ois_liquid-bio[TWh]",
                    "ind_energy-demand_ois_gas-bio[TWh]",
                    "ind_energy-demand_ois_solid-waste[TWh]",
                    "ind_energy-demand_ois_hydrogen[TWh]",
                    "ind_energy-demand_copper_electricity[TWh]",
                    "ind_energy-demand_copper_solid-ff-coal[TWh]",
                    "ind_energy-demand_copper_liquid-ff-oil[TWh]",
                    "ind_energy-demand_copper_gas-ff-natural[TWh]",
                    "ind_energy-demand_copper_solid-bio[TWh]",
                    "ind_energy-demand_copper_liquid-bio[TWh]",
                    "ind_energy-demand_copper_gas-bio[TWh]",
                    "ind_energy-demand_copper_solid-waste[TWh]",
                    "ind_energy-demand_copper_hydrogen[TWh]"
                ]
            }
        },
        "string-input-490:1306:1232:349":{
            "type":"string",
            "default":"ind_energy-demand_paper_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_paper_liquid-bio"
        },
        "string-input-490:1292:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "boolean-input-490:1306:1201:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1292:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "string-input-875:1669:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1292:1150:446":{
            "type":"string",
            "default":"ind_emissions-(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_emissions-(.*)\\[.*"
        },
        "column-filter-875:1661:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_ammonia_amm-tech_to-hydrogen[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_ammonia_amm-tech_to-hydrogen[%]",
                    "ind_energy_ammonia_amm-tech_solid-waste[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]"
                ]
            }
        },
        "boolean-input-490:1696:1666:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1721:1245":{
            "type":"string",
            "default":"specific_emissions_.*\\[.*",
            "description":"Enter Description",
            "example":"specific_emissions_.*\\[.*"
        },
        "single-selection-490:1306:1318:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1721:1246":{
            "type":"string",
            "default":"Mt/kt",
            "description":"Enter Description",
            "example":"Mt/kt"
        },
        "string-input-490:1306:1232:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1232:357":{
            "type":"string",
            "default":"ind_energy_paper_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_paper_.*_liquid-bio.*"
        },
        "column-filter-490:1306:1237:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1281:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1496:357":{
            "type":"string",
            "default":"amm_emissions_N2O_.*_.*\\[.*]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"amm_emissions_N2O_.*_.*\\[.*]"
        },
        "double-input-875:1366:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "single-selection-875:931:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-875:1496:354":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"Mt"
        },
        "single-selection-490:1306:1253:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1272:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1210:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1301:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "column-filter-490:1306:1318:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1486:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_incl-feedstock_fbt_tech_hydrogen[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_incl-feedstock_fbt_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_fbt_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_tra-equip_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_textiles_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_mae_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_wwp_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_ois_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_aluminium_prim_electricity[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_aluminium_sec_electricity[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_cement_geopolym_electricity[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_chem_chem-tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_copper_tech_electricity[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_glass_glass_electricity[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_lime_lime_electricity[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_paper_woodpulp_electricity[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_paper_recycled_electricity[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_steel_hisarna_electricity[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_solid-ff-coal[TWh]",
                    "ind_energy_incl-feedstock_steel_hydrog-DRI_electricity[TWh]"
                ]
            }
        },
        "column-filter-490:1621:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_steel_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_steel_gas-bio[TWh]",
                    "ind_energy-demand_cement_gas-bio[TWh]",
                    "ind_energy-demand_chem_gas-bio[TWh]",
                    "ind_energy-demand_paper_gas-bio[TWh]",
                    "ind_energy-demand_aluminium_gas-bio[TWh]",
                    "ind_energy-demand_glass_gas-bio[TWh]",
                    "ind_energy-demand_lime_gas-bio[TWh]",
                    "ind_energy-demand_tra-equip_gas-bio[TWh]",
                    "ind_energy-demand_fbt_gas-bio[TWh]",
                    "ind_energy-demand_textiles_gas-bio[TWh]",
                    "ind_energy-demand_mae_gas-bio[TWh]",
                    "ind_energy-demand_wwp_gas-bio[TWh]",
                    "ind_energy-demand_ois_gas-bio[TWh]",
                    "ind_energy-demand_copper_gas-bio[TWh]"
                ]
            }
        },
        "string-input-490:1306:1260:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_liquid-ff.*"
        },
        "column-filter-490:1306:1257:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1170:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-490:1661:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "single-selection-490:1531:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1496:349":{
            "type":"string",
            "default":"amm_emissions_N2O",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"amm_emissions_N2O"
        },
        "string-input-490:1306:1260:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1292:1150:460":{
            "type":"string",
            "default":"%",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"%"
        },
        "single-selection-875:1300:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1224:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "string-input-490:1224:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "string-input-875:1301:446":{
            "type":"string",
            "default":"tec_emission-factor_N2O_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_N2O_(.*)\\[.*"
        },
        "string-input-490:1306:1260:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_liquid-ff-oil"
        },
        "string-input-875:1301:444":{
            "type":"string",
            "default":"amm_emissions_N2O",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_emissions_N2O"
        },
        "string-input-875:1301:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "single-selection-875:1262:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1289:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1513:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_aluminium_prim_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_aluminium_prim_electricity[TWh]",
                    "ind_energy_aluminium_sec_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_electricity[TWh]",
                    "ind_energy_cement_geopolym_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_electricity[TWh]",
                    "ind_energy_chem_chem-tech_electricity[TWh]",
                    "ind_energy_copper_tech_electricity[TWh]",
                    "ind_energy_fbt_tech_electricity[TWh]",
                    "ind_energy_glass_glass_electricity[TWh]",
                    "ind_energy_lime_lime_electricity[TWh]",
                    "ind_energy_mae_tech_electricity[TWh]",
                    "ind_energy_ois_tech_electricity[TWh]",
                    "ind_energy_paper_recycled_electricity[TWh]",
                    "ind_energy_paper_woodpulp_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_electricity[TWh]",
                    "ind_energy_steel_hisarna_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_electricity[TWh]",
                    "ind_energy_textiles_tech_electricity[TWh]",
                    "ind_energy_tra-equip_tech_electricity[TWh]",
                    "ind_energy_wwp_tech_electricity[TWh]",
                    "ind_energy_aluminium_prim_hydrogen[TWh]",
                    "ind_energy_aluminium_sec_hydrogen[TWh]",
                    "ind_energy_cement_dry-kiln_hydrogen[TWh]",
                    "ind_energy_cement_geopolym_hydrogen[TWh]",
                    "ind_energy_cement_wet-kiln_hydrogen[TWh]",
                    "ind_energy_chem_chem-tech_hydrogen[TWh]",
                    "ind_energy_copper_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_hydrogen[TWh]",
                    "ind_energy_glass_glass_hydrogen[TWh]",
                    "ind_energy_lime_lime_hydrogen[TWh]",
                    "ind_energy_mae_tech_hydrogen[TWh]",
                    "ind_energy_ois_tech_hydrogen[TWh]",
                    "ind_energy_paper_recycled_hydrogen[TWh]",
                    "ind_energy_paper_woodpulp_hydrogen[TWh]",
                    "ind_energy_steel_BF-BOF_hydrogen[TWh]",
                    "ind_energy_steel_hisarna_hydrogen[TWh]",
                    "ind_energy_steel_hydrog-DRI_hydrogen[TWh]",
                    "ind_energy_steel_scrap-EAF_hydrogen[TWh]",
                    "ind_energy_textiles_tech_hydrogen[TWh]",
                    "ind_energy_tra-equip_tech_hydrogen[TWh]",
                    "ind_energy_wwp_tech_hydrogen[TWh]",
                    "ind_energy_fbt_tech_solid-waste[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste[TWh]",
                    "ind_energy_textiles_tech_solid-waste[TWh]",
                    "ind_energy_mae_tech_solid-waste[TWh]",
                    "ind_energy_wwp_tech_solid-waste[TWh]",
                    "ind_energy_ois_tech_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_solid-waste[TWh]",
                    "ind_energy_aluminium_sec_solid-waste[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste[TWh]",
                    "ind_energy_cement_geopolym_solid-waste[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste[TWh]",
                    "ind_energy_copper_tech_solid-waste[TWh]",
                    "ind_energy_glass_glass_solid-waste[TWh]",
                    "ind_energy_lime_lime_solid-waste[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste[TWh]",
                    "ind_energy_paper_recycled_solid-waste[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste[TWh]",
                    "ind_energy_steel_hisarna_solid-waste[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]"
                ]
            }
        },
        "column-filter-490:1306:1270:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1306:1301:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1646:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:761:444":{
            "type":"string",
            "default":"ind_dem_temp",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_dem_temp"
        },
        "string-input-490:761:445":{
            "type":"string",
            "default":"ind_dem_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_dem_(.*)\\[.*"
        },
        "single-selection-490:1641:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1669:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(liquid-ff-oil|solid-ff-coal|gas-ff-natural)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(liquid-ff-oil|solid-ff-coal|gas-ff-natural)\\[.*\\]"
        },
        "string-input-875:1669:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-biomass.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-biomass.*"
        },
        "string-input-875:1669:444":{
            "type":"string",
            "default":"ind_energy,bio",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,bio"
        },
        "single-selection-875:1518:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "column-filter-490:1613:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_feedstock_fbt_tech_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_feedstock_fbt_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_textiles_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_mae_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_wwp_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_ois_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_feedstock_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_feedstock_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_feedstock_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_feedstock_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_feedstock_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_feedstock_copper_tech_gas-bio[TWh]",
                    "ind_energy_feedstock_glass_glass_gas-bio[TWh]",
                    "ind_energy_feedstock_lime_lime_gas-bio[TWh]",
                    "ind_energy_feedstock_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_feedstock_paper_recycled_gas-bio[TWh]",
                    "ind_energy_feedstock_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_feedstock_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_feedstock_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_feedstock_steel_hydrog-DRI_gas-bio[TWh]"
                ]
            }
        },
        "boolean-input-490:1306:1259:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1717:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1304:349":{
            "type":"string",
            "default":"ind_energy-demand_wwp_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_wwp_gas-ff-natural"
        },
        "boolean-input-490:1613:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1301:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1646:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]"
        },
        "single-selection-490:1306:1238:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1646:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-(electricity).*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-(electricity).*"
        },
        "column-filter-490:1306:1272:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1653:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "boolean-input-490:1508:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "single-selection-490:1300:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1653:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1305:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1219:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_solid-bio.*"
        },
        "string-input-490:1646:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "single-selection-490:1306:1203:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1219:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1272:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1225:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_solid-ff-coal",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_solid-ff-coal"
        },
        "single-selection-490:1306:1246:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-875:1656:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_ammonia_amm-tech_solid-to-gas[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_ammonia_amm-tech_solid-to-gas[%]",
                    "ind_energy-carrier-mix_ammonia_amm-tech_liquid-to-gas[%]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1266:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1672:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Subtraction 2-1"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Subtraction 2-1"
            }
        },
        "single-selection-490:933:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1653:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1304:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1653:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_hydrogen).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_hydrogen).*\\[.*\\]"
        },
        "string-input-490:1653:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*_hydrogen).*\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*_hydrogen).*\\[.*\\]"
        },
        "string-input-490:1306:1304:357":{
            "type":"string",
            "default":"ind_energy_wwp_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_wwp_.*_gas-ff.*"
        },
        "string-input-490:1224:1150:444":{
            "type":"string",
            "default":"cal_rate",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"cal_rate"
        },
        "boolean-input-875:934:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-490:1306:1201:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]"
                ]
            }
        },
        "string-input-490:1224:1150:445":{
            "type":"string",
            "default":"cal_delta_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_delta_(.*)\\[.*"
        },
        "single-selection-490:1494:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1707:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"material_cement[kt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "material_cement[kt]",
                    "material_chem[kt]",
                    "material_paper[kt]",
                    "material_steel[kt]",
                    "specific_energy_cement[TWh/kt]",
                    "specific_energy_chem[TWh/kt]",
                    "specific_energy_paper[TWh/kt]",
                    "specific_energy_steel[TWh/kt]"
                ]
            }
        },
        "column-filter-490:1306:1244:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-875:1690:1666:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "string-input-490:1306:1225:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_solid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_solid-ff.*"
        },
        "single-selection-490:1696:1667:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-875:1233:1146:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1225:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1292:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1498:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1653:349":{
            "type":"string",
            "default":"ind_energy,total",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,total"
        },
        "single-selection-490:751:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-875:1690:1666:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_gas-ff-natural_synfuel[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_synfuel[TWh]"
                ]
            }
        },
        "string-input-490:1306:1296:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1253:357":{
            "type":"string",
            "default":"ind_energy_lime_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_lime_.*_gas-bio.*"
        },
        "boolean-input-490:1306:1221:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1296:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_gas-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_gas-ff.*"
        },
        "string-input-490:1306:1253:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1513:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1264:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1510:357":{
            "type":"string",
            "default":"ind_dem_.*_(.*)\\[t\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_dem_.*_(.*)\\[t\\]"
        },
        "string-input-490:1510:354":{
            "type":"string",
            "default":"t",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"t"
        },
        "string-input-490:1306:1219:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_solid-bio"
        },
        "column-filter-490:1292:1146:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1659:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1306:1296:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_gas-ff-natural",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_gas-ff-natural"
        },
        "string-input-490:1306:1253:349":{
            "type":"string",
            "default":"ind_energy-demand_lime_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_lime_gas-bio"
        },
        "column-filter-490:1306:1265:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1212:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1301:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1277:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1306:1181:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1270:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1301:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-875:1233:446":{
            "type":"string",
            "default":"ind_prod_(.*)\\[.*",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_prod_(.*)\\[.*"
        },
        "single-selection-490:1614:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1488:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-490:1510:349":{
            "type":"string",
            "default":"ind_material-demand_appliances",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_material-demand_appliances"
        },
        "column-filter-490:1306:1220:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1690:1667:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:1661:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1306:1277:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_solid-waste"
        },
        "single-selection-490:1306:1298:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1670:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1670:357":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)-ff-.*_bio\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_(.*_.*_.*)-ff-.*_bio\\[.*\\]"
        },
        "boolean-input-490:1306:1285:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1316:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1653:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1238:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1614:349":{
            "type":"string",
            "default":"ind_biomaterial",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_biomaterial"
        },
        "single-selection-490:1661:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1696:1664:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_steel_BF-BOF_to-synfuels[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_steel_BF-BOF_to-synfuels[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_to-synfuels[%]",
                    "ind_energy-carrier-mix_steel_hisarna_to-synfuels[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_to-synfuels[%]",
                    "ind_energy-carrier-mix_aluminium_prim_to-synfuels[%]",
                    "ind_energy-carrier-mix_aluminium_sec_to-synfuels[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_to-synfuels[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_to-synfuels[%]",
                    "ind_energy-carrier-mix_cement_geopolym_to-synfuels[%]",
                    "ind_energy-carrier-mix_lime_lime_to-synfuels[%]",
                    "ind_energy-carrier-mix_glass_glass_to-synfuels[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_to-synfuels[%]",
                    "ind_energy-carrier-mix_paper_recycled_to-synfuels[%]",
                    "ind_energy-carrier-mix_ois_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_wwp_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_mae_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_copper_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_textiles_tech_to-synfuels[%]",
                    "ind_energy-carrier-mix_fbt_tech_to-synfuels[%]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]"
                ]
            }
        },
        "string-input-490:1306:1238:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-875:1659:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1541:1419":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"OPEX"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"OPEX"
            }
        },
        "column-filter-490:1306:1291:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1306:1283:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1238:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_liquid-ff.*"
        },
        "boolean-input-490:1306:1312:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-875:1233:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1289:1146:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1614:357":{
            "type":"string",
            "default":"ind_energy_feedstock_.*_.*_(liquid.*)\\[.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_feedstock_.*_.*_(liquid.*)\\[.*"
        },
        "boolean-input-490:1306:1214:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1484:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1347:1420":{
            "type":"string",
            "default":".*material-production_ammonia_(.+)\\[.*",
            "description":"Pattern selecting the activity to use for cost calculation. The technology is identified by a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the technology identifier.\n",
            "example":".*material-production_ammonia_(.+)\\[.*"
        },
        "string-input-490:1614:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "boolean-input-490:1170:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "single-selection-490:1697:1682:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "column-filter-490:1671:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_gas-bio[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio[TWh]",
                    "ind_energy_textiles_tech_gas-bio[TWh]",
                    "ind_energy_mae_tech_gas-bio[TWh]",
                    "ind_energy_wwp_tech_gas-bio[TWh]",
                    "ind_energy_ois_tech_gas-bio[TWh]",
                    "ind_energy_aluminium_prim_gas-bio[TWh]",
                    "ind_energy_aluminium_sec_gas-bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio[TWh]",
                    "ind_energy_cement_geopolym_gas-bio[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio[TWh]",
                    "ind_energy_copper_tech_gas-bio[TWh]",
                    "ind_energy_glass_glass_gas-bio[TWh]",
                    "ind_energy_lime_lime_gas-bio[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio[TWh]",
                    "ind_energy_paper_recycled_gas-bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_fbt_tech_liquid-bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio[TWh]",
                    "ind_energy_textiles_tech_liquid-bio[TWh]",
                    "ind_energy_mae_tech_liquid-bio[TWh]",
                    "ind_energy_wwp_tech_liquid-bio[TWh]",
                    "ind_energy_ois_tech_liquid-bio[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio[TWh]",
                    "ind_energy_copper_tech_liquid-bio[TWh]",
                    "ind_energy_glass_glass_liquid-bio[TWh]",
                    "ind_energy_lime_lime_liquid-bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio[TWh]",
                    "ind_energy_paper_recycled_liquid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio[TWh]",
                    "ind_energy_fbt_tech_solid-bio[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio[TWh]",
                    "ind_energy_textiles_tech_solid-bio[TWh]",
                    "ind_energy_mae_tech_solid-bio[TWh]",
                    "ind_energy_wwp_tech_solid-bio[TWh]",
                    "ind_energy_ois_tech_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_solid-bio[TWh]",
                    "ind_energy_aluminium_sec_solid-bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio[TWh]",
                    "ind_energy_cement_geopolym_solid-bio[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio[TWh]",
                    "ind_energy_copper_tech_solid-bio[TWh]",
                    "ind_energy_glass_glass_solid-bio[TWh]",
                    "ind_energy_lime_lime_solid-bio[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio[TWh]",
                    "ind_energy_paper_recycled_solid-bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_aluminium_prim_gas_bio[TWh]",
                    "ind_energy_aluminium_prim_liquid_bio[TWh]",
                    "ind_energy_aluminium_prim_solid_bio[TWh]",
                    "ind_energy_aluminium_sec_gas_bio[TWh]",
                    "ind_energy_aluminium_sec_liquid_bio[TWh]",
                    "ind_energy_aluminium_sec_solid_bio[TWh]",
                    "ind_energy_cement_dry-kiln_gas_bio[TWh]",
                    "ind_energy_cement_dry-kiln_liquid_bio[TWh]",
                    "ind_energy_cement_dry-kiln_solid_bio[TWh]",
                    "ind_energy_cement_geopolym_gas_bio[TWh]",
                    "ind_energy_cement_geopolym_liquid_bio[TWh]",
                    "ind_energy_cement_geopolym_solid_bio[TWh]",
                    "ind_energy_cement_wet-kiln_gas_bio[TWh]",
                    "ind_energy_cement_wet-kiln_liquid_bio[TWh]",
                    "ind_energy_cement_wet-kiln_solid_bio[TWh]",
                    "ind_energy_chem_chem-tech_gas_bio[TWh]",
                    "ind_energy_chem_chem-tech_liquid_bio[TWh]",
                    "ind_energy_chem_chem-tech_solid_bio[TWh]",
                    "ind_energy_copper_tech_gas_bio[TWh]",
                    "ind_energy_copper_tech_liquid_bio[TWh]",
                    "ind_energy_copper_tech_solid_bio[TWh]",
                    "ind_energy_fbt_tech_gas_bio[TWh]",
                    "ind_energy_fbt_tech_liquid_bio[TWh]",
                    "ind_energy_fbt_tech_solid_bio[TWh]",
                    "ind_energy_glass_glass_gas_bio[TWh]",
                    "ind_energy_glass_glass_liquid_bio[TWh]",
                    "ind_energy_glass_glass_solid_bio[TWh]",
                    "ind_energy_lime_lime_gas_bio[TWh]",
                    "ind_energy_lime_lime_liquid_bio[TWh]",
                    "ind_energy_lime_lime_solid_bio[TWh]",
                    "ind_energy_mae_tech_gas_bio[TWh]",
                    "ind_energy_mae_tech_liquid_bio[TWh]",
                    "ind_energy_mae_tech_solid_bio[TWh]",
                    "ind_energy_ois_tech_gas_bio[TWh]",
                    "ind_energy_ois_tech_liquid_bio[TWh]",
                    "ind_energy_ois_tech_solid_bio[TWh]",
                    "ind_energy_paper_recycled_gas_bio[TWh]",
                    "ind_energy_paper_recycled_liquid_bio[TWh]",
                    "ind_energy_paper_recycled_solid_bio[TWh]",
                    "ind_energy_paper_woodpulp_gas_bio[TWh]",
                    "ind_energy_paper_woodpulp_liquid_bio[TWh]",
                    "ind_energy_paper_woodpulp_solid_bio[TWh]",
                    "ind_energy_steel_BF-BOF_gas_bio[TWh]",
                    "ind_energy_steel_BF-BOF_liquid_bio[TWh]",
                    "ind_energy_steel_BF-BOF_solid_bio[TWh]",
                    "ind_energy_steel_hisarna_gas_bio[TWh]",
                    "ind_energy_steel_hisarna_liquid_bio[TWh]",
                    "ind_energy_steel_hisarna_solid_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid_bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid_bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid_bio[TWh]",
                    "ind_energy_textiles_tech_gas_bio[TWh]",
                    "ind_energy_textiles_tech_liquid_bio[TWh]",
                    "ind_energy_textiles_tech_solid_bio[TWh]",
                    "ind_energy_tra-equip_tech_gas_bio[TWh]",
                    "ind_energy_tra-equip_tech_liquid_bio[TWh]",
                    "ind_energy_tra-equip_tech_solid_bio[TWh]",
                    "ind_energy_wwp_tech_gas_bio[TWh]",
                    "ind_energy_wwp_tech_liquid_bio[TWh]",
                    "ind_energy_wwp_tech_solid_bio[TWh]"
                ]
            }
        },
        "single-selection-490:1306:1259:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1649:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-490:761:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "column-filter-490:1306:1309:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1289:444":{
            "type":"string",
            "default":"ind_energy-demand",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy-demand"
        },
        "string-input-490:1289:445":{
            "type":"string",
            "default":"cal_ind_energy_(.*)\\[.*\\]",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_energy_(.*)\\[.*\\]"
        },
        "string-input-875:1233:444":{
            "type":"string",
            "default":"ind_prod_checked",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod_checked"
        },
        "string-input-875:1233:445":{
            "type":"string",
            "default":"cal_ind_production-calibration_(.*)\\[.*",
            "description":"Pattern selecting the group of calibration columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_ind_production-calibration_(.*)\\[.*"
        },
        "string-input-490:1289:446":{
            "type":"string",
            "default":"ind_energy-demand_(.*)\\[.*\\]",
            "description":"Pattern selecting the group of columns to be calibrated. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy-demand_(.*)\\[.*\\]"
        },
        "single-selection-490:1717:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1306:1227:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1244:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1702:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:933:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1294:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_gas-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_gas-bio.*"
        },
        "single-selection-490:1646:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1306:1294:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1305:446":{
            "type":"string",
            "default":"tec_emission-factor_CO2_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"tec_emission-factor_CO2_(.*)\\[.*"
        },
        "string-input-490:1709:1245":{
            "type":"string",
            "default":"material_.*\\[.*",
            "description":"Enter Description",
            "example":"material_.*\\[.*"
        },
        "string-input-875:1305:444":{
            "type":"string",
            "default":"amm_emissions_CO2",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"amm_emissions_CO2"
        },
        "string-input-875:1305:445":{
            "type":"string",
            "default":"ind_energy_(.*)_(.*_.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*)_(.*_.*)\\[.*"
        },
        "boolean-input-490:1306:1229:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-490:1306:1310:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1696:1666:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1203:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_solid-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_solid-bio[TWh]",
                    "ind_energy_steel_hisarna_solid-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio[TWh]"
                ]
            }
        },
        "column-filter-490:1669:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-carrier-mix_steel_BF-BOF_to-biomass[%]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-carrier-mix_steel_BF-BOF_to-biomass[%]",
                    "ind_energy-carrier-mix_steel_scrap-EAF_to-biomass[%]",
                    "ind_energy-carrier-mix_steel_hisarna_to-biomass[%]",
                    "ind_energy-carrier-mix_steel_hydrog-DRI_to-biomass[%]",
                    "ind_energy-carrier-mix_aluminium_sec_to-biomass[%]",
                    "ind_energy-carrier-mix_aluminium_prim_to-biomass[%]",
                    "ind_energy-carrier-mix_cement_wet-kiln_to-biomass[%]",
                    "ind_energy-carrier-mix_cement_dry-kiln_to-biomass[%]",
                    "ind_energy-carrier-mix_cement_geopolym_to-biomass[%]",
                    "ind_energy-carrier-mix_lime_lime_to-biomass[%]",
                    "ind_energy-carrier-mix_glass_glass_to-biomass[%]",
                    "ind_energy-carrier-mix_chem_chem-tech_to-biomass[%]",
                    "ind_energy-carrier-mix_paper_woodpulp_to-biomass[%]",
                    "ind_energy-carrier-mix_paper_recycled_to-biomass[%]",
                    "ind_energy-carrier-mix_ois_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_wwp_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_mae_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_tra-equip_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_copper_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_textiles_tech_to-biomass[%]",
                    "ind_energy-carrier-mix_fbt_tech_to-biomass[%]",
                    "ind_energy_aluminium_prim_gas-ff-natural[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal[TWh]"
                ]
            }
        },
        "boolean-input-875:1658:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1289:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-875:1496:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1294:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_gas-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_gas-bio"
        },
        "single-selection-490:1670:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1255:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1653:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-875:1661:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-490:1306:1274:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1709:1246":{
            "type":"string",
            "default":"kt",
            "description":"Enter Description",
            "example":"kt"
        },
        "string-input-490:1661:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-490:1306:1262:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_solid-bio"
        },
        "single-selection-490:1234:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "boolean-input-490:1659:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "boolean-input-490:1306:1240:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1223:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1289:1151:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1488:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "column-filter-490:1306:1218:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1238:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_liquid-ff-oil"
        },
        "string-input-490:1306:1262:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_solid-bio.*"
        },
        "string-input-490:1306:1206:357":{
            "type":"string",
            "default":"ind_energy_steel_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_steel_.*_solid-waste.*"
        },
        "string-input-490:1306:1206:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1262:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1223:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_liquid-bio.*"
        },
        "string-input-490:1306:1223:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1292:1164":{
            "type":"string",
            "default":"2015",
            "description":"Enter Description",
            "example":"2015"
        },
        "boolean-input-490:1671:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1294:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1267:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_CO2-emissions-after-CC_aluminium_prim[Mt]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_CO2-emissions-after-CC_aluminium_prim[Mt]",
                    "ind_CO2-emissions-after-CC_aluminium_sec[Mt]",
                    "ind_CO2-emissions-after-CC_cement_dry-kiln[Mt]",
                    "ind_CO2-emissions-after-CC_cement_geopolym[Mt]",
                    "ind_CO2-emissions-after-CC_cement_wet-kiln[Mt]",
                    "ind_CO2-emissions-after-CC_chem_chem-tech[Mt]",
                    "ind_CO2-emissions-after-CC_copper_tech[Mt]",
                    "ind_CO2-emissions-after-CC_fbt_tech[Mt]",
                    "ind_CO2-emissions-after-CC_glass_glass[Mt]",
                    "ind_CO2-emissions-after-CC_lime_lime[Mt]",
                    "ind_CO2-emissions-after-CC_mae_tech[Mt]",
                    "ind_CO2-emissions-after-CC_ois_tech[Mt]",
                    "ind_CO2-emissions-after-CC_paper_recycled[Mt]",
                    "ind_CO2-emissions-after-CC_paper_woodpulp[Mt]",
                    "ind_CO2-emissions-after-CC_steel_BF-BOF[Mt]",
                    "ind_CO2-emissions-after-CC_steel_hisarna[Mt]",
                    "ind_CO2-emissions-after-CC_steel_hydrog-DRI[Mt]",
                    "ind_CO2-emissions-after-CC_steel_scrap-EAF[Mt]",
                    "ind_CO2-emissions-after-CC_textiles_tech[Mt]",
                    "ind_CO2-emissions-after-CC_tra-equip_tech[Mt]",
                    "ind_CO2-emissions-after-CC_wwp_tech[Mt]"
                ]
            }
        },
        "single-selection-875:1599:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "string-input-875:1305:460":{
            "type":"string",
            "default":"Mt",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"Mt"
        },
        "string-input-490:1661:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]"
        },
        "string-input-490:1661:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "single-selection-490:1510:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1661:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-(hydrogen).*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-(hydrogen).*"
        },
        "column-filter-490:1306:1235:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1206:349":{
            "type":"string",
            "default":"ind_energy-demand_steel_solid-waste",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_steel_solid-waste"
        },
        "string-input-875:1661:444":{
            "type":"string",
            "default":"ind_energy",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy"
        },
        "string-input-490:1292:1163":{
            "type":"string",
            "default":"1990",
            "description":"Enter Description",
            "example":"1990"
        },
        "string-input-490:933:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "string-input-875:1661:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-(hydrogen).*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-(hydrogen).*"
        },
        "string-input-490:933:445":{
            "type":"string",
            "default":"lfs_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"lfs_(.*)\\[.*"
        },
        "string-input-875:1661:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(?!hydrogen|electricity)(.*)\\[.*\\]"
        },
        "string-input-490:1306:1223:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_liquid-bio"
        },
        "string-input-490:933:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "single-selection-875:1659:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "column-filter-490:1690:844":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"Country"
                    }
                }
            },
            "description":"Enter Description",
            "example":{
                "columns":[
                    "Country",
                    "Years",
                    "ind_energy-demand_liquid-ff-diesel[TWh]",
                    "ind_energy-demand_liquid-ff-fuel-oil[TWh]",
                    "ind_energy-demand_electricity[TWh]",
                    "ind_energy-demand_gas-ff-natural[TWh]",
                    "ind_energy-demand_hydrogen[TWh]",
                    "ind_energy-demand_solid-ff-coal[TWh]"
                ]
            }
        },
        "string-input-490:1306:1277:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_solid-waste.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_solid-waste.*"
        },
        "single-selection-875:761:659:661":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"PARALLEL_OP"
                }
            },
            "description":"Enter Description",
            "example":{
                "variable_value":"PARALLEL_OP"
            }
        },
        "boolean-input-490:1647:359":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation",
            "example":false
        },
        "column-filter-490:1702:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_dem_floor-area_new_non-residential_cement[t]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_dem_floor-area_new_non-residential_cement[t]",
                    "ind_dem_floor-area_new_non-residential_paper[t]",
                    "ind_dem_floor-area_new_non-residential_steel[t]",
                    "ind_dem_floor-area_reno_non-residential_chem[t]",
                    "ind_dem_floor-area_reno_non-residential_paper[t]",
                    "ind_dem_floor-area_new_residential_cement[t]",
                    "ind_dem_floor-area_new_residential_steel[t]",
                    "ind_dem_floor-area_new_residential_timber[t]",
                    "ind_dem_floor-area_reno_residential_chem[t]",
                    "ind_dem_floor-area_reno_residential_paper[t]",
                    "ind_dem_floor-area_reno_residential_natfibers[t]",
                    "ind_dem_floor-area_reno_non-residential_natfibers[t]"
                ]
            }
        },
        "string-input-490:1306:1321:349":{
            "type":"string",
            "default":"ind_energy-demand_copper_liquid-ff-oil",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_copper_liquid-ff-oil"
        },
        "string-input-875:1670:357":{
            "type":"string",
            "default":"ind_energy_(.*_.*_.*)-ff-.*_bio\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_(.*_.*_.*)-ff-.*_bio\\[.*\\]"
        },
        "string-input-490:1306:1208:349":{
            "type":"string",
            "default":"ind_energy-demand_cement_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_cement_hydrogen"
        },
        "single-selection-490:1306:1229:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "string-input-490:1306:1321:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-875:1670:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "double-input-490:1721:1247":{
            "type":"number",
            "default":0.001,
            "description":"Enter Description",
            "example":0.001
        },
        "string-input-490:1306:1279:357":{
            "type":"string",
            "default":"ind_energy_fbt_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_fbt_.*_solid-bio.*"
        },
        "string-input-490:1306:1236:357":{
            "type":"string",
            "default":"ind_energy_aluminium_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_aluminium_.*_hydrogen.*"
        },
        "string-input-490:1306:1236:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-875:934:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1366:1246":{
            "type":"string",
            "default":"Mt",
            "description":"Enter Description",
            "example":"Mt"
        },
        "boolean-input-490:1306:1310:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1306:1321:357":{
            "type":"string",
            "default":"ind_energy_copper_.*_liquid-ff.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_copper_.*_liquid-ff.*"
        },
        "string-input-875:1366:1245":{
            "type":"string",
            "default":"ind_material-production.*",
            "description":"Enter Description",
            "example":"ind_material-production.*"
        },
        "single-selection-875:761:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-490:1612:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:933:652":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1208:357":{
            "type":"string",
            "default":"ind_energy_cement_.*_hydrogen.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_cement_.*_hydrogen.*"
        },
        "string-input-490:1292:1146:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "column-filter-490:1306:1261:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1208:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1306:1314:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1285:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1242:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-875:1661:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "single-selection-875:1514:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "string-input-875:1657:349":{
            "type":"string",
            "default":"ind_energy,gas-ff-natural_added",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,gas-ff-natural_added"
        },
        "string-input-490:1306:1308:349":{
            "type":"string",
            "default":"ind_energy-demand_ois_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_ois_liquid-bio"
        },
        "column-filter-490:1306:1307:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "boolean-input-490:1619:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1691:1686:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-875:1657:357":{
            "type":"string",
            "default":"ind_energy_([^_]*_[^_]*)_.*_gas-ff-natural\\[.*\\]",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_([^_]*_[^_]*)_.*_gas-ff-natural\\[.*\\]"
        },
        "single-selection-875:1657:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-875:1170:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1308:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "single-selection-490:1292:1151:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1657:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1308:357":{
            "type":"string",
            "default":"ind_energy_ois_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_ois_.*_liquid-bio.*"
        },
        "single-selection-490:1649:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "single-selection-490:1306:1257:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "single-selection-490:1306:1214:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1253:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1210:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1296:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "single-selection-875:1305:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "boolean-input-490:1301:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1306:1205:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_steel_BF-BOF_gas-bio[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_steel_BF-BOF_gas-bio[TWh]",
                    "ind_energy_steel_hisarna_gas-bio[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio[TWh]"
                ]
            }
        },
        "boolean-input-490:1224:1151:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1706:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "boolean-input-875:1259:586":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation.",
            "example":true
        },
        "string-input-490:1306:1292:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1292:357":{
            "type":"string",
            "default":"ind_energy_mae_.*_solid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_mae_.*_solid-bio.*"
        },
        "string-input-490:931:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "string-input-875:1690:1664:460":{
            "type":"string",
            "default":"unit",
            "description":"New unit for the output columns. Not changing this option or setting it to \"unit\" keeps the unit from the first column group.",
            "example":"unit"
        },
        "single-selection-490:926:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Python"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Python"
            }
        },
        "single-selection-875:1181:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "boolean-input-490:1306:1225:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-490:1306:1268:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "boolean-input-875:1301:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "single-selection-490:1707:463":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Product"
                }
            },
            "description":"Method used to combine columns. For asymetric operations, the direction of the operation is specified, e.g. \"Division 2/1\" means dividing columns from the second group by columns from the first group.",
            "example":{
                "variable_value":"Product"
            }
        },
        "string-input-490:1696:1664:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(liquid-ff-oil|gas-ff-natural)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(liquid-ff-oil|gas-ff-natural)\\[.*\\]"
        },
        "string-input-490:1696:1664:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-synfuels.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-synfuels.*"
        },
        "boolean-input-490:1646:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "column-filter-490:1647:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_fbt_tech_gas-bio_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_fbt_tech_gas-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_gas-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_gas-bio_electricity[TWh]",
                    "ind_energy_mae_tech_gas-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_gas-bio_electricity[TWh]",
                    "ind_energy_ois_tech_gas-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_gas-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_gas-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_gas-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_gas-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_gas-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_gas-bio_electricity[TWh]",
                    "ind_energy_copper_tech_gas-bio_electricity[TWh]",
                    "ind_energy_glass_glass_gas-bio_electricity[TWh]",
                    "ind_energy_lime_lime_gas-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_gas-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_gas-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_gas-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_gas-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_tra-equip_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_textiles_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_mae_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_wwp_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_ois_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_aluminium_prim_gas-ff-natural_electricity[TWh]",
                    "ind_energy_aluminium_sec_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_gas-ff-natural_electricity[TWh]",
                    "ind_energy_cement_geopolym_gas-ff-natural_electricity[TWh]",
                    "ind_energy_chem_chem-tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_copper_tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_glass_glass_gas-ff-natural_electricity[TWh]",
                    "ind_energy_lime_lime_gas-ff-natural_electricity[TWh]",
                    "ind_energy_paper_woodpulp_gas-ff-natural_electricity[TWh]",
                    "ind_energy_paper_recycled_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_hisarna_gas-ff-natural_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_gas-ff-natural_electricity[TWh]",
                    "ind_energy_fbt_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_mae_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_ois_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_liquid-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_liquid-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_liquid-bio_electricity[TWh]",
                    "ind_energy_copper_tech_liquid-bio_electricity[TWh]",
                    "ind_energy_glass_glass_liquid-bio_electricity[TWh]",
                    "ind_energy_lime_lime_liquid-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_liquid-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_liquid-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_tra-equip_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_textiles_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_mae_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_wwp_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_ois_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_aluminium_prim_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_aluminium_sec_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_cement_geopolym_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_chem_chem-tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_copper_tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_glass_glass_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_lime_lime_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_paper_woodpulp_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_paper_recycled_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_hisarna_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-bio_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-bio_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-bio_electricity[TWh]",
                    "ind_energy_mae_tech_solid-bio_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-bio_electricity[TWh]",
                    "ind_energy_ois_tech_solid-bio_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-bio_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-bio_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-bio_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-bio_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-bio_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-bio_electricity[TWh]",
                    "ind_energy_copper_tech_solid-bio_electricity[TWh]",
                    "ind_energy_glass_glass_solid-bio_electricity[TWh]",
                    "ind_energy_lime_lime_solid-bio_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-bio_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-bio_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-bio_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-bio_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-bio_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-bio_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_mae_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_ois_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-ff-coal_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-ff-coal_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-ff-coal_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_copper_tech_solid-ff-coal_electricity[TWh]",
                    "ind_energy_glass_glass_solid-ff-coal_electricity[TWh]",
                    "ind_energy_lime_lime_solid-ff-coal_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-ff-coal_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-ff-coal_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-ff-coal_electricity[TWh]",
                    "ind_energy_fbt_tech_solid-waste_electricity[TWh]",
                    "ind_energy_tra-equip_tech_solid-waste_electricity[TWh]",
                    "ind_energy_textiles_tech_solid-waste_electricity[TWh]",
                    "ind_energy_mae_tech_solid-waste_electricity[TWh]",
                    "ind_energy_wwp_tech_solid-waste_electricity[TWh]",
                    "ind_energy_ois_tech_solid-waste_electricity[TWh]",
                    "ind_energy_aluminium_prim_solid-waste_electricity[TWh]",
                    "ind_energy_aluminium_sec_solid-waste_electricity[TWh]",
                    "ind_energy_cement_dry-kiln_solid-waste_electricity[TWh]",
                    "ind_energy_cement_wet-kiln_solid-waste_electricity[TWh]",
                    "ind_energy_cement_geopolym_solid-waste_electricity[TWh]",
                    "ind_energy_chem_chem-tech_solid-waste_electricity[TWh]",
                    "ind_energy_copper_tech_solid-waste_electricity[TWh]",
                    "ind_energy_glass_glass_solid-waste_electricity[TWh]",
                    "ind_energy_lime_lime_solid-waste_electricity[TWh]",
                    "ind_energy_paper_woodpulp_solid-waste_electricity[TWh]",
                    "ind_energy_paper_recycled_solid-waste_electricity[TWh]",
                    "ind_energy_steel_BF-BOF_solid-waste_electricity[TWh]",
                    "ind_energy_steel_scrap-EAF_solid-waste_electricity[TWh]",
                    "ind_energy_steel_hisarna_solid-waste_electricity[TWh]",
                    "ind_energy_steel_hydrog-DRI_solid-waste_electricity[TWh]"
                ]
            }
        },
        "column-filter-875:1647:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy_ammonia_amm-tech_solid-waste_electricity[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy_ammonia_amm-tech_solid-waste_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-bio_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_gas-ff-natural_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_liquid-ff-oil_electricity[TWh]",
                    "ind_energy_ammonia_amm-tech_solid-ff-coal_electricity[TWh]"
                ]
            }
        },
        "boolean-input-875:1646:586":{
            "type":"boolean",
            "default":"false",
            "description":"Remove columns used in the calculation.",
            "example":false
        },
        "string-input-490:1696:1664:444":{
            "type":"string",
            "default":"ind_energy,synfuel",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,synfuel"
        },
        "string-input-490:1306:1292:349":{
            "type":"string",
            "default":"ind_energy-demand_mae_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_mae_solid-bio"
        },
        "string-input-490:1670:349":{
            "type":"string",
            "default":"ind_energy,bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,bio"
        },
        "boolean-input-490:1545:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "column-filter-490:1306:1276:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "single-selection-490:1575:653":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Java"
                }
            },
            "description":"Select code language to use",
            "example":{
                "variable_value":"Java"
            }
        },
        "string-input-875:1690:1664:444":{
            "type":"string",
            "default":"ind_energy,synfuel",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_energy,synfuel"
        },
        "string-input-875:1690:1664:445":{
            "type":"string",
            "default":"ind_energy_(.*_.*)_(liquid-ff-oil|gas-ff-natural)\\[.*\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_energy_(.*_.*)_(liquid-ff-oil|gas-ff-natural)\\[.*\\]"
        },
        "string-input-875:1690:1664:446":{
            "type":"string",
            "default":"ind_energy-carrier-mix_(.*_.*)_to-synfuels.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_energy-carrier-mix_(.*_.*)_to-synfuels.*"
        },
        "single-selection-490:1512:350":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"Sum"
                }
            },
            "description":"Method used to combine columns.",
            "example":{
                "variable_value":"Sum"
            }
        },
        "column-filter-490:1306:1233:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "column-filter-490:1619:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array",
                    "items":{
                        "type":"string",
                        "default":"ind_energy-demand_steel_solid-waste[TWh]"
                    }
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                    "ind_energy-demand_steel_solid-waste[TWh]",
                    "ind_energy-demand_cement_solid-waste[TWh]",
                    "ind_energy-demand_chem_solid-waste[TWh]",
                    "ind_energy-demand_paper_solid-waste[TWh]",
                    "ind_energy-demand_aluminium_solid-waste[TWh]",
                    "ind_energy-demand_glass_solid-waste[TWh]",
                    "ind_energy-demand_lime_solid-waste[TWh]",
                    "ind_energy-demand_tra-equip_solid-waste[TWh]",
                    "ind_energy-demand_fbt_solid-waste[TWh]",
                    "ind_energy-demand_textiles_solid-waste[TWh]",
                    "ind_energy-demand_mae_solid-waste[TWh]",
                    "ind_energy-demand_wwp_solid-waste[TWh]",
                    "ind_energy-demand_ois_solid-waste[TWh]",
                    "ind_energy-demand_copper_solid-waste[TWh]"
                ]
            }
        },
        "string-input-490:1306:1221:349":{
            "type":"string",
            "default":"ind_energy-demand_chem_electricity",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_chem_electricity"
        },
        "string-input-490:1306:1264:349":{
            "type":"string",
            "default":"ind_energy-demand_tra-equip_liquid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_tra-equip_liquid-bio"
        },
        "string-input-490:931:444":{
            "type":"string",
            "default":"ind_prod",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_prod"
        },
        "string-input-490:1306:1279:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:931:445":{
            "type":"string",
            "default":"bld_(.*)\\[.*",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"bld_(.*)\\[.*"
        },
        "string-input-490:931:446":{
            "type":"string",
            "default":"ind_prod_percentage_(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).\n\nOnly in the Python version, a named regex group can be used to explicitly identify the iterator if it's not the first group. The pattern is \"sector_variable_(.*)_(?P<i>.*)\\[.*\". This give the name \"i\" (as in iterator) to the second group. The naming of the resulting variable is not affected by this (i.e. it's still the iterator,, then the second group of the first pattern, then the second group of the second pattern.",
            "example":"ind_prod_percentage_(.*)\\[.*"
        },
        "boolean-input-490:1306:1281:359":{
            "type":"boolean",
            "default":"true",
            "description":"Remove columns used in the calculation",
            "example":true
        },
        "string-input-490:1292:1146:446":{
            "type":"string",
            "default":"ind_emissions-(.*)\\[.*",
            "description":"Pattern selecting the second group of columns. The columns in this group will be matched with columns from the first group using the iterator. The iterator is defined similarly to the pattern in group 1. \nExample: single column \"sector_demand_.*\", multiple columns \"sector_variable_(.*)\\[.*\"\n\nThis pattern can also optionally include a second iterator for combining each column from the first group with multiple columns from the second group.\nExample: \"sector_variable_(.*)_(.*)\\[.*\"\n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"ind_emissions-(.*)\\[.*"
        },
        "string-input-490:1292:1146:445":{
            "type":"string",
            "default":"cal_rate_(.*)\\[%\\]",
            "description":"Pattern selecting the first group of columns. The resulting columns will be appended with the iterator, which is a Regex capture group embedded in the pattern. \nExample: \"sector_variable_(.*)\\[.*\" to use the last item before the unit as the iterator. \n\nNote that these patterns can also be used to identify flow variables. They work exactly the same, flow variables matching the name will be transformed into columns in the data (with the same value for every row).",
            "example":"cal_rate_(.*)\\[%\\]"
        },
        "string-input-490:1292:1146:444":{
            "type":"string",
            "default":"ind_emissions",
            "description":"Name of resulting columns. The name will be appended with the iterator(s) (see below).",
            "example":"ind_emissions"
        },
        "string-input-875:1670:349":{
            "type":"string",
            "default":"ind_energy,bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below). A suffix can be added after a comma, for instance \"ind_energy,electricity\". The suffix will be added last to the variable name, but before the unit, for instance \"ind_energy_aluminium_electricity[TWh].\n",
            "example":"ind_energy,bio"
        },
        "single-selection-490:1540:355":{
            "type":"object",
            "properties":{
                "variable_value":{
                    "type":"string",
                    "default":"industry"
                }
            },
            "description":"Module Selection",
            "example":{
                "variable_value":"industry"
            }
        },
        "column-filter-490:1306:1248:362":{
            "type":"object",
            "properties":{
                "columns":{
                    "type":"array"
                }
            },
            "description":"This filter is ther for testing purpose. It allows the user to test the regex pattern used in the Pattern section.",
            "example":{
                "columns":[
                ]
            }
        },
        "string-input-490:1306:1236:349":{
            "type":"string",
            "default":"ind_energy-demand_aluminium_hydrogen",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_aluminium_hydrogen"
        },
        "string-input-490:1306:1264:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        },
        "string-input-490:1306:1221:357":{
            "type":"string",
            "default":"ind_energy_chem_.*_electricity.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_chem_.*_electricity.*"
        },
        "string-input-490:1306:1279:349":{
            "type":"string",
            "default":"ind_energy-demand_fbt_solid-bio",
            "description":"Name of resulting column. The name will be appended with the unit (see below)",
            "example":"ind_energy-demand_fbt_solid-bio"
        },
        "string-input-490:1306:1264:357":{
            "type":"string",
            "default":"ind_energy_tra-equip_.*_liquid-bio.*",
            "description":"Pattern selecting the columns to aggregate following the aggregation method (see below).\nThis pattern must be written in a Regex format.\nExample: \"sector_variable_.*\" to aggregate all the columns of the same variable from one sector.",
            "example":"ind_energy_tra-equip_.*_liquid-bio.*"
        },
        "string-input-490:1306:1221:354":{
            "type":"string",
            "default":"TWh",
            "description":"New unit for the output columns. Will be added to the name of the new column.",
            "example":"TWh"
        }
    }
}